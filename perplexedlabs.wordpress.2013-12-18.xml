<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.1.2" created="2013-12-18 04:44" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>Perplexed Labs</title>
	<link>http://blog.perplexedlabs.com</link>
	<description>web development war stories from the frontlines to the backend</description>
	<pubDate>Wed, 18 Dec 2013 04:44:58 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://blog.perplexedlabs.com</wp:base_site_url>
	<wp:base_blog_url>http://blog.perplexedlabs.com</wp:base_blog_url>

	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>snakes</wp:author_login><wp:author_email>snakes@gmail.com</wp:author_email><wp:author_display_name><![CDATA[Matt]]></wp:author_display_name><wp:author_first_name><![CDATA[Matt]]></wp:author_first_name><wp:author_last_name><![CDATA[Reiferson]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>3</wp:author_id><wp:author_login>speric</wp:author_login><wp:author_email>speric@gmail.com</wp:author_email><wp:author_display_name><![CDATA[Eric]]></wp:author_display_name><wp:author_first_name><![CDATA[Eric]]></wp:author_first_name><wp:author_last_name><![CDATA[Farkas]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>163</wp:term_id><wp:category_nicename>book-reviews</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Book Reviews]]></wp:cat_name><wp:category_description><![CDATA[Reviews of books we've read.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>8</wp:term_id><wp:category_nicename>development</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Development]]></wp:cat_name><wp:category_description><![CDATA[Programming, languages, algorithms, application and software development, maintenance.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>105</wp:term_id><wp:category_nicename>django</wp:category_nicename><wp:category_parent>development</wp:category_parent><wp:cat_name><![CDATA[Django]]></wp:cat_name><wp:category_description><![CDATA[Django, the open source Python web application framework.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>45</wp:term_id><wp:category_nicename>infrastructure</wp:category_nicename><wp:category_parent>development</wp:category_parent><wp:cat_name><![CDATA[Infrastructure]]></wp:cat_name><wp:category_description><![CDATA[Linux, Apache, operating systems, etc.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>230</wp:term_id><wp:category_nicename>ios</wp:category_nicename><wp:category_parent>development</wp:category_parent><wp:cat_name><![CDATA[iOS]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>52</wp:term_id><wp:category_nicename>javascript</wp:category_nicename><wp:category_parent>development</wp:category_parent><wp:cat_name><![CDATA[JavaScript]]></wp:cat_name><wp:category_description><![CDATA[JavaScript, Prototype framework, jQuery framework.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>13</wp:term_id><wp:category_nicename>php-development</wp:category_nicename><wp:category_parent>development</wp:category_parent><wp:cat_name><![CDATA[PHP]]></wp:cat_name><wp:category_description><![CDATA[PHP related.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>106</wp:term_id><wp:category_nicename>python</wp:category_nicename><wp:category_parent>development</wp:category_parent><wp:cat_name><![CDATA[Python]]></wp:cat_name><wp:category_description><![CDATA[Python related.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>random</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Random]]></wp:cat_name><wp:category_description><![CDATA[Ramblings, thoughts, rants.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>150</wp:term_id><wp:category_nicename>ruby-development</wp:category_nicename><wp:category_parent>development</wp:category_parent><wp:cat_name><![CDATA[Ruby]]></wp:cat_name><wp:category_description><![CDATA[Ruby related.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>44</wp:term_id><wp:category_nicename>ruby-on-rails</wp:category_nicename><wp:category_parent>development</wp:category_parent><wp:cat_name><![CDATA[Ruby on Rails]]></wp:cat_name><wp:category_description><![CDATA[Ruby on Rails related.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>189</wp:term_id><wp:category_nicename>clojure-development</wp:category_nicename><wp:category_parent>development</wp:category_parent><wp:cat_name><![CDATA[Clojure]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>50</wp:term_id><wp:category_nicename>css</wp:category_nicename><wp:category_parent>development</wp:category_parent><wp:cat_name><![CDATA[CSS]]></wp:cat_name><wp:category_description><![CDATA[CSS related.]]></wp:category_description></wp:category>
	<wp:tag><wp:term_id>190</wp:term_id><wp:tag_slug>1-4</wp:tag_slug><wp:tag_name><![CDATA[1.4]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>147</wp:term_id><wp:tag_slug>37signals</wp:tag_slug><wp:tag_name><![CDATA[37signals]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>223</wp:term_id><wp:tag_slug>activerecord</wp:tag_slug><wp:tag_name><![CDATA[ActiveRecord]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>136</wp:term_id><wp:tag_slug>add-new-tag</wp:tag_slug><wp:tag_name><![CDATA[Add new tag]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>134</wp:term_id><wp:tag_slug>ads</wp:tag_slug><wp:tag_name><![CDATA[ads]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>99</wp:term_id><wp:tag_slug>ajax</wp:tag_slug><wp:tag_name><![CDATA[ajax]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>126</wp:term_id><wp:tag_slug>aol</wp:tag_slug><wp:tag_name><![CDATA[aol]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>61</wp:term_id><wp:tag_slug>apache</wp:tag_slug><wp:tag_name><![CDATA[apache]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>206</wp:term_id><wp:tag_slug>api</wp:tag_slug><wp:tag_name><![CDATA[API]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug>array</wp:tag_slug><wp:tag_name><![CDATA[array]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>227</wp:term_id><wp:tag_slug>async</wp:tag_slug><wp:tag_name><![CDATA[async]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>204</wp:term_id><wp:tag_slug>asynchronous</wp:tag_slug><wp:tag_name><![CDATA[asynchronous]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>229</wp:term_id><wp:tag_slug>asynchttpclient</wp:tag_slug><wp:tag_name><![CDATA[asynchttpclient]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>221</wp:term_id><wp:tag_slug>authlogic</wp:tag_slug><wp:tag_name><![CDATA[authlogic]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>94</wp:term_id><wp:tag_slug>auto-props</wp:tag_slug><wp:tag_name><![CDATA[auto-props]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>143</wp:term_id><wp:tag_slug>backup</wp:tag_slug><wp:tag_name><![CDATA[backup]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>172</wp:term_id><wp:tag_slug>bash</wp:tag_slug><wp:tag_name><![CDATA[bash]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>212</wp:term_id><wp:tag_slug>binding</wp:tag_slug><wp:tag_name><![CDATA[binding]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>186</wp:term_id><wp:tag_slug>book-review</wp:tag_slug><wp:tag_name><![CDATA[book review]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>133</wp:term_id><wp:tag_slug>businessmodel</wp:tag_slug><wp:tag_name><![CDATA[businessmodel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>c</wp:tag_slug><wp:tag_name><![CDATA[c++]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>226</wp:term_id><wp:tag_slug>c-ares</wp:tag_slug><wp:tag_name><![CDATA[c-ares]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>209</wp:term_id><wp:tag_slug>capistrano</wp:tag_slug><wp:tag_name><![CDATA[capistrano]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>164</wp:term_id><wp:tag_slug>career</wp:tag_slug><wp:tag_name><![CDATA[career]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>60</wp:term_id><wp:tag_slug>centos</wp:tag_slug><wp:tag_name><![CDATA[centos]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>95</wp:term_id><wp:tag_slug>class</wp:tag_slug><wp:tag_name><![CDATA[class]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>188</wp:term_id><wp:tag_slug>clojure</wp:tag_slug><wp:tag_name><![CDATA[clojure]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>54</wp:term_id><wp:tag_slug>code</wp:tag_slug><wp:tag_name><![CDATA[code]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>207</wp:term_id><wp:tag_slug>coders-at-work</wp:tag_slug><wp:tag_name><![CDATA[coders at work]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>184</wp:term_id><wp:tag_slug>concurrency</wp:tag_slug><wp:tag_name><![CDATA[concurrency]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>166</wp:term_id><wp:tag_slug>consulting</wp:tag_slug><wp:tag_name><![CDATA[consulting]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>219</wp:term_id><wp:tag_slug>convert</wp:tag_slug><wp:tag_name><![CDATA[convert]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>108</wp:term_id><wp:tag_slug>cpanel</wp:tag_slug><wp:tag_name><![CDATA[cpanel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>142</wp:term_id><wp:tag_slug>cron</wp:tag_slug><wp:tag_name><![CDATA[cron]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>50</wp:term_id><wp:tag_slug>css</wp:tag_slug><wp:tag_name><![CDATA[CSS]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>122</wp:term_id><wp:tag_slug>curl</wp:tag_slug><wp:tag_name><![CDATA[curl]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>210</wp:term_id><wp:tag_slug>cython</wp:tag_slug><wp:tag_name><![CDATA[cython]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>64</wp:term_id><wp:tag_slug>database</wp:tag_slug><wp:tag_name><![CDATA[database]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>116</wp:term_id><wp:tag_slug>deltasoft</wp:tag_slug><wp:tag_name><![CDATA[deltasoft]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>132</wp:term_id><wp:tag_slug>deployment</wp:tag_slug><wp:tag_name><![CDATA[deployment]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>development</wp:tag_slug><wp:tag_name><![CDATA[Development]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>105</wp:term_id><wp:tag_slug>django</wp:tag_slug><wp:tag_name><![CDATA[Django]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>228</wp:term_id><wp:tag_slug>dns</wp:tag_slug><wp:tag_name><![CDATA[dns]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>137</wp:term_id><wp:tag_slug>embed</wp:tag_slug><wp:tag_name><![CDATA[embed]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>93</wp:term_id><wp:tag_slug>enable-auto-props</wp:tag_slug><wp:tag_name><![CDATA[enable-auto-props]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>80</wp:term_id><wp:tag_slug>error-log</wp:tag_slug><wp:tag_name><![CDATA[error log]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>81</wp:term_id><wp:tag_slug>error_log</wp:tag_slug><wp:tag_name><![CDATA[error_log]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>111</wp:term_id><wp:tag_slug>event-handler</wp:tag_slug><wp:tag_name><![CDATA[event handler]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>40</wp:term_id><wp:tag_slug>execution-time</wp:tag_slug><wp:tag_name><![CDATA[execution time]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug>explode</wp:tag_slug><wp:tag_name><![CDATA[explode]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>63</wp:term_id><wp:tag_slug>export</wp:tag_slug><wp:tag_name><![CDATA[export]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>220</wp:term_id><wp:tag_slug>extension</wp:tag_slug><wp:tag_name><![CDATA[extension]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>5</wp:term_id><wp:tag_slug>finance</wp:tag_slug><wp:tag_name><![CDATA[Finance]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>109</wp:term_id><wp:tag_slug>firefox</wp:tag_slug><wp:tag_name><![CDATA[firefox]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>84</wp:term_id><wp:tag_slug>flickr</wp:tag_slug><wp:tag_name><![CDATA[flickr]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>181</wp:term_id><wp:tag_slug>fork</wp:tag_slug><wp:tag_name><![CDATA[fork]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>199</wp:term_id><wp:tag_slug>formstack</wp:tag_slug><wp:tag_name><![CDATA[FormStack]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>framework</wp:tag_slug><wp:tag_name><![CDATA[framework]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>165</wp:term_id><wp:tag_slug>freelance</wp:tag_slug><wp:tag_name><![CDATA[freelance]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>124</wp:term_id><wp:tag_slug>game-programming</wp:tag_slug><wp:tag_name><![CDATA[game programming]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>82</wp:term_id><wp:tag_slug>garbage-collection</wp:tag_slug><wp:tag_name><![CDATA[garbage collection]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>getcwd</wp:tag_slug><wp:tag_name><![CDATA[getcwd]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>171</wp:term_id><wp:tag_slug>hacker-news</wp:tag_slug><wp:tag_name><![CDATA[hacker news]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>173</wp:term_id><wp:tag_slug>hotcopy</wp:tag_slug><wp:tag_name><![CDATA[hotcopy]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>217</wp:term_id><wp:tag_slug>html-to-pdf</wp:tag_slug><wp:tag_name><![CDATA[html to pdf]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>104</wp:term_id><wp:tag_slug>iframe</wp:tag_slug><wp:tag_name><![CDATA[iframe]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>155</wp:term_id><wp:tag_slug>igbinary</wp:tag_slug><wp:tag_name><![CDATA[igbinary]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>144</wp:term_id><wp:tag_slug>images</wp:tag_slug><wp:tag_name><![CDATA[images]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>168</wp:term_id><wp:tag_slug>india</wp:tag_slug><wp:tag_name><![CDATA[india]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>231</wp:term_id><wp:tag_slug>ios-2</wp:tag_slug><wp:tag_name><![CDATA[ios]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>236</wp:term_id><wp:tag_slug>ios-sdk</wp:tag_slug><wp:tag_name><![CDATA[ios sdk]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>233</wp:term_id><wp:tag_slug>ipad</wp:tag_slug><wp:tag_name><![CDATA[ipad]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>235</wp:term_id><wp:tag_slug>ipad-sdk</wp:tag_slug><wp:tag_name><![CDATA[ipad sdk]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>232</wp:term_id><wp:tag_slug>iphone</wp:tag_slug><wp:tag_name><![CDATA[iphone]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>234</wp:term_id><wp:tag_slug>iphone-sdk</wp:tag_slug><wp:tag_name><![CDATA[iphone sdk]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>java</wp:tag_slug><wp:tag_name><![CDATA[java]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug>javascript</wp:tag_slug><wp:tag_name><![CDATA[JavaScript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>112</wp:term_id><wp:tag_slug>jquery</wp:tag_slug><wp:tag_name><![CDATA[jquery]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>191</wp:term_id><wp:tag_slug>jquery-1-4</wp:tag_slug><wp:tag_name><![CDATA[jquery 1.4]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>197</wp:term_id><wp:tag_slug>json</wp:tag_slug><wp:tag_name><![CDATA[JSON]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>87</wp:term_id><wp:tag_slug>keyword-substitution</wp:tag_slug><wp:tag_name><![CDATA[keyword substitution]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>languages</wp:tag_slug><wp:tag_name><![CDATA[languages]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>225</wp:term_id><wp:tag_slug>libcurl</wp:tag_slug><wp:tag_name><![CDATA[libcurl]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>153</wp:term_id><wp:tag_slug>libmemcached</wp:tag_slug><wp:tag_name><![CDATA[libmemcached]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>214</wp:term_id><wp:tag_slug>libwkhtmltox</wp:tag_slug><wp:tag_name><![CDATA[libwkhtmltox]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>151</wp:term_id><wp:tag_slug>lighttpd</wp:tag_slug><wp:tag_name><![CDATA[lighttpd]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>175</wp:term_id><wp:tag_slug>linux</wp:tag_slug><wp:tag_name><![CDATA[linux]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>128</wp:term_id><wp:tag_slug>localhost</wp:tag_slug><wp:tag_name><![CDATA[localhost]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>141</wp:term_id><wp:tag_slug>logs</wp:tag_slug><wp:tag_name><![CDATA[logs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>103</wp:term_id><wp:tag_slug>long-polling</wp:tag_slug><wp:tag_name><![CDATA[long polling]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>158</wp:term_id><wp:tag_slug>magic</wp:tag_slug><wp:tag_name><![CDATA[magic]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>154</wp:term_id><wp:tag_slug>memcache</wp:tag_slug><wp:tag_name><![CDATA[memcache]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug>memcached</wp:tag_slug><wp:tag_name><![CDATA[memcached]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>83</wp:term_id><wp:tag_slug>memory-leak</wp:tag_slug><wp:tag_name><![CDATA[memory leak]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>microsoft</wp:tag_slug><wp:tag_name><![CDATA[microsoft]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>41</wp:term_id><wp:tag_slug>microtime</wp:tag_slug><wp:tag_name><![CDATA[microtime]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>224</wp:term_id><wp:tag_slug>model</wp:tag_slug><wp:tag_name><![CDATA[model]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>211</wp:term_id><wp:tag_slug>module</wp:tag_slug><wp:tag_name><![CDATA[module]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>88</wp:term_id><wp:tag_slug>mod_rewrite</wp:tag_slug><wp:tag_name><![CDATA[mod_rewrite]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>107</wp:term_id><wp:tag_slug>mod_wsgi</wp:tag_slug><wp:tag_name><![CDATA[mod_wsgi]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>192</wp:term_id><wp:tag_slug>mongrel</wp:tag_slug><wp:tag_name><![CDATA[mongrel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug>msft</wp:tag_slug><wp:tag_name><![CDATA[msft]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>195</wp:term_id><wp:tag_slug>multiprocessing</wp:tag_slug><wp:tag_name><![CDATA[multiprocessing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>68</wp:term_id><wp:tag_slug>mutex</wp:tag_slug><wp:tag_name><![CDATA[mutex]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>62</wp:term_id><wp:tag_slug>mysql</wp:tag_slug><wp:tag_name><![CDATA[mysql]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>177</wp:term_id><wp:tag_slug>mysql-python</wp:tag_slug><wp:tag_name><![CDATA[mysql-python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>176</wp:term_id><wp:tag_slug>mysqldb</wp:tag_slug><wp:tag_name><![CDATA[mysqldb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>66</wp:term_id><wp:tag_slug>mysqldump</wp:tag_slug><wp:tag_name><![CDATA[mysqldump]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>237</wp:term_id><wp:tag_slug>nagios</wp:tag_slug><wp:tag_name><![CDATA[nagios]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>149</wp:term_id><wp:tag_slug>named-parameters</wp:tag_slug><wp:tag_name><![CDATA[named parameters]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>152</wp:term_id><wp:tag_slug>nginx</wp:tag_slug><wp:tag_name><![CDATA[nginx]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>203</wp:term_id><wp:tag_slug>non-blocking</wp:tag_slug><wp:tag_name><![CDATA[non-blocking]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>118</wp:term_id><wp:tag_slug>nostalgia</wp:tag_slug><wp:tag_name><![CDATA[nostalgia]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>73</wp:term_id><wp:tag_slug>ob_flush</wp:tag_slug><wp:tag_name><![CDATA[ob_flush]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>74</wp:term_id><wp:tag_slug>ob_implicit_flush</wp:tag_slug><wp:tag_name><![CDATA[ob_implicit_flush]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>238</wp:term_id><wp:tag_slug>oncall</wp:tag_slug><wp:tag_name><![CDATA[oncall]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug>optimizing</wp:tag_slug><wp:tag_name><![CDATA[optimizing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>167</wp:term_id><wp:tag_slug>outsource</wp:tag_slug><wp:tag_name><![CDATA[outsource]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>123</wp:term_id><wp:tag_slug>parallel</wp:tag_slug><wp:tag_name><![CDATA[parallel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>129</wp:term_id><wp:tag_slug>passenger</wp:tag_slug><wp:tag_name><![CDATA[passenger]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>222</wp:term_id><wp:tag_slug>passwords</wp:tag_slug><wp:tag_name><![CDATA[passwords]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>179</wp:term_id><wp:tag_slug>pcntl</wp:tag_slug><wp:tag_name><![CDATA[pcntl]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>180</wp:term_id><wp:tag_slug>pcntl_fork</wp:tag_slug><wp:tag_name><![CDATA[pcntl_fork]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>194</wp:term_id><wp:tag_slug>pcntl_wait</wp:tag_slug><wp:tag_name><![CDATA[pcntl_wait]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>218</wp:term_id><wp:tag_slug>pdf</wp:tag_slug><wp:tag_name><![CDATA[pdf]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>156</wp:term_id><wp:tag_slug>pecl</wp:tag_slug><wp:tag_name><![CDATA[pecl]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>periodicity</wp:tag_slug><wp:tag_name><![CDATA[periodicity]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>115</wp:term_id><wp:tag_slug>perplexed</wp:tag_slug><wp:tag_name><![CDATA[perplexed]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>114</wp:term_id><wp:tag_slug>perplexed-deltasoft-programming-nostalgia</wp:tag_slug><wp:tag_name><![CDATA[perplexed deltasoft programming nostalgia]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug>php</wp:tag_slug><wp:tag_name><![CDATA[php]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>131</wp:term_id><wp:tag_slug>phusion</wp:tag_slug><wp:tag_name><![CDATA[phusion]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>193</wp:term_id><wp:tag_slug>phusion-passenger</wp:tag_slug><wp:tag_name><![CDATA[phusion passenger]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>161</wp:term_id><wp:tag_slug>pingback</wp:tag_slug><wp:tag_name><![CDATA[pingback]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>200</wp:term_id><wp:tag_slug>plugins</wp:tag_slug><wp:tag_name><![CDATA[plugins]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>preg_split</wp:tag_slug><wp:tag_name><![CDATA[preg_split]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>185</wp:term_id><wp:tag_slug>process</wp:tag_slug><wp:tag_name><![CDATA[process]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug>profiling</wp:tag_slug><wp:tag_name><![CDATA[profiling]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>187</wp:term_id><wp:tag_slug>programmer</wp:tag_slug><wp:tag_name><![CDATA[programmer]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>117</wp:term_id><wp:tag_slug>programming</wp:tag_slug><wp:tag_name><![CDATA[programming]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>100</wp:term_id><wp:tag_slug>progress-bar</wp:tag_slug><wp:tag_name><![CDATA[progress bar]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>92</wp:term_id><wp:tag_slug>propset</wp:tag_slug><wp:tag_name><![CDATA[propset]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>113</wp:term_id><wp:tag_slug>prototype</wp:tag_slug><wp:tag_name><![CDATA[prototype]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>106</wp:term_id><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[Python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>208</wp:term_id><wp:tag_slug>python-tornado</wp:tag_slug><wp:tag_name><![CDATA[python tornado]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug>rails</wp:tag_slug><wp:tag_name><![CDATA[rails]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>71</wp:term_id><wp:tag_slug>rails-testing</wp:tag_slug><wp:tag_name><![CDATA[rails testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>1</wp:term_id><wp:tag_slug>random</wp:tag_slug><wp:tag_name><![CDATA[Random]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>119</wp:term_id><wp:tag_slug>rcov</wp:tag_slug><wp:tag_name><![CDATA[rcov]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>regex</wp:tag_slug><wp:tag_name><![CDATA[regex]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug>regular-expression</wp:tag_slug><wp:tag_name><![CDATA[regular expression]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>146</wp:term_id><wp:tag_slug>resize</wp:tag_slug><wp:tag_name><![CDATA[resize]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>205</wp:term_id><wp:tag_slug>rest</wp:tag_slug><wp:tag_name><![CDATA[REST]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>135</wp:term_id><wp:tag_slug>revenue</wp:tag_slug><wp:tag_name><![CDATA[revenue]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>139</wp:term_id><wp:tag_slug>round</wp:tag_slug><wp:tag_name><![CDATA[round]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>140</wp:term_id><wp:tag_slug>rounding</wp:tag_slug><wp:tag_name><![CDATA[rounding]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug>ruby</wp:tag_slug><wp:tag_name><![CDATA[ruby]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>130</wp:term_id><wp:tag_slug>ruby-enterprise-edition</wp:tag_slug><wp:tag_name><![CDATA[ruby enterprise edition]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>44</wp:term_id><wp:tag_slug>ruby-on-rails</wp:tag_slug><wp:tag_name><![CDATA[Ruby on Rails]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>121</wp:term_id><wp:tag_slug>scrape</wp:tag_slug><wp:tag_name><![CDATA[scrape]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>138</wp:term_id><wp:tag_slug>script</wp:tag_slug><wp:tag_name><![CDATA[SCRIPT]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>98</wp:term_id><wp:tag_slug>self</wp:tag_slug><wp:tag_name><![CDATA[self]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>78</wp:term_id><wp:tag_slug>serialize</wp:tag_slug><wp:tag_name><![CDATA[serialize]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>75</wp:term_id><wp:tag_slug>session</wp:tag_slug><wp:tag_name><![CDATA[session]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>159</wp:term_id><wp:tag_slug>session-handler</wp:tag_slug><wp:tag_name><![CDATA[session handler]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>127</wp:term_id><wp:tag_slug>sessions</wp:tag_slug><wp:tag_name><![CDATA[sessions]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>178</wp:term_id><wp:tag_slug>setuptools</wp:tag_slug><wp:tag_name><![CDATA[setuptools]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>59</wp:term_id><wp:tag_slug>slicehost</wp:tag_slug><wp:tag_name><![CDATA[slicehost]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>split</wp:tag_slug><wp:tag_name><![CDATA[split]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>43</wp:term_id><wp:tag_slug>sql</wp:tag_slug><wp:tag_name><![CDATA[sql]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>69</wp:term_id><wp:tag_slug>stock</wp:tag_slug><wp:tag_name><![CDATA[stock]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>148</wp:term_id><wp:tag_slug>string</wp:tag_slug><wp:tag_name><![CDATA[string]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>85</wp:term_id><wp:tag_slug>subversion</wp:tag_slug><wp:tag_name><![CDATA[subversion]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>86</wp:term_id><wp:tag_slug>svn</wp:tag_slug><wp:tag_name><![CDATA[svn]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>157</wp:term_id><wp:tag_slug>svnkeywords</wp:tag_slug><wp:tag_name><![CDATA[svn:keywords]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>174</wp:term_id><wp:tag_slug>svnadmin</wp:tag_slug><wp:tag_name><![CDATA[svnadmin]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>169</wp:term_id><wp:tag_slug>templates</wp:tag_slug><wp:tag_name><![CDATA[templates]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>162</wp:term_id><wp:tag_slug>ternary</wp:tag_slug><wp:tag_name><![CDATA[ternary]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>120</wp:term_id><wp:tag_slug>testing</wp:tag_slug><wp:tag_name><![CDATA[testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>196</wp:term_id><wp:tag_slug>thoughts</wp:tag_slug><wp:tag_name><![CDATA[thoughts]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>183</wp:term_id><wp:tag_slug>thread</wp:tag_slug><wp:tag_name><![CDATA[thread]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>201</wp:term_id><wp:tag_slug>tornado</wp:tag_slug><wp:tag_name><![CDATA[tornado]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>145</wp:term_id><wp:tag_slug>tumbelog</wp:tag_slug><wp:tag_name><![CDATA[tumbelog]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>170</wp:term_id><wp:tag_slug>twitter</wp:tag_slug><wp:tag_name><![CDATA[twitter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>182</wp:term_id><wp:tag_slug>unix</wp:tag_slug><wp:tag_name><![CDATA[unix]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>77</wp:term_id><wp:tag_slug>unserialize</wp:tag_slug><wp:tag_name><![CDATA[unserialize]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>89</wp:term_id><wp:tag_slug>urlencode</wp:tag_slug><wp:tag_name><![CDATA[urlencode]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>79</wp:term_id><wp:tag_slug>var_export</wp:tag_slug><wp:tag_name><![CDATA[var_export]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>125</wp:term_id><wp:tag_slug>vb</wp:tag_slug><wp:tag_name><![CDATA[vb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>202</wp:term_id><wp:tag_slug>web-py</wp:tag_slug><wp:tag_name><![CDATA[web.py]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>whitespace</wp:tag_slug><wp:tag_name><![CDATA[whitespace]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>216</wp:term_id><wp:tag_slug>wkhtmltoimage</wp:tag_slug><wp:tag_name><![CDATA[wkhtmltoimage]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>215</wp:term_id><wp:tag_slug>wkhtmltopdf</wp:tag_slug><wp:tag_name><![CDATA[wkhtmltopdf]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>213</wp:term_id><wp:tag_slug>wrapper</wp:tag_slug><wp:tag_name><![CDATA[wrapper]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug>xhtml</wp:tag_slug><wp:tag_name><![CDATA[xhtml]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>198</wp:term_id><wp:tag_slug>xml</wp:tag_slug><wp:tag_name><![CDATA[XML]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>160</wp:term_id><wp:tag_slug>xmlrpc</wp:tag_slug><wp:tag_name><![CDATA[xmlrpc]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>yahoo</wp:tag_slug><wp:tag_name><![CDATA[yahoo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>yhoo</wp:tag_slug><wp:tag_name><![CDATA[yhoo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>97</wp:term_id><wp:tag_slug>__call</wp:tag_slug><wp:tag_name><![CDATA[__call]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.org/?v=3.1.2</generator>

	<item>
		<title>Periodity Box Example Chart</title>
		<link>http://blog.perplexedlabs.com/?attachment_id=6</link>
		<pubDate>Fri, 01 Feb 2008 15:55:30 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://perplexedlabs.com/wp-content/uploads/2008/02/chart.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2008-02-01 10:55:30</wp:post_date>
		<wp:post_date_gmt>2008-02-01 15:55:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>periodity-box-example-chart</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://perplexedlabs.com/wp-content/uploads/2008/02/chart.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/plabs/public_html/wp-content/uploads/2008/02/chart.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1180;s:6:"height";i:676;s:14:"hwstring_small";s:23:"height='73' width='128'";s:4:"file";s:60:"/home/plabs/public_html/wp-content/uploads/2008/02/chart.png";s:5:"thumb";s:19:"chart.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Periodity Box Example Chart Thumb</title>
		<link>http://blog.perplexedlabs.com/?attachment_id=8</link>
		<pubDate>Fri, 01 Feb 2008 16:01:25 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://perplexedlabs.com/wp-content/uploads/2008/02/chart1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2008-02-01 11:01:25</wp:post_date>
		<wp:post_date_gmt>2008-02-01 16:01:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>periodity-box-example-chart-thumb</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://perplexedlabs.com/wp-content/uploads/2008/02/chart1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/plabs/public_html/wp-content/uploads/2008/02/chart1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:450;s:6:"height";i:258;s:14:"hwstring_small";s:23:"height='73' width='128'";s:4:"file";s:61:"/home/plabs/public_html/wp-content/uploads/2008/02/chart1.png";s:5:"thumb";s:20:"chart1.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Get It Done</title>
		<link>http://blog.perplexedlabs.com/2008/02/01/get-it-done/</link>
		<pubDate>Fri, 01 Feb 2008 19:06:54 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://perplexedlabs.com/2008/02/01/get-it-done/</guid>
		<description></description>
		<content:encoded><![CDATA[Today's comic at <a href="http://xkcd.com/378/">xkcd</a> was entitled "Real Programmers", which was hysterical.  It got me thinking about a lot of blogs where flame wars erupt because fanboys think their current way of doing things is best, and yours is crap.  Everyone has an opinion about which language/framework/web server/OS is The Best.   It's fine to have such opinions, and to be able to explain and defend them.  But please don't tell me I am somehow less of a programmer because I use That Other [language/framework/web server/OS].  In a professional capacity I use Ruby on Rails everyday, and I love it.  But I have no problem writing applications in PHP, Java, C/C++...even VB.  Because at the end of the day, users, be they business or otherwise, only care about one thing: the end product.  As programmer, I use whatever tool is best to get the job done.  Of course I have my preferences but I will never try and force a solution to fit within those preferences.
<h3></h3>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2008-02-01 14:06:54</wp:post_date>
		<wp:post_date_gmt>2008-02-01 19:06:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>get-it-done</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="framework"><![CDATA[framework]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="languages"><![CDATA[languages]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399950]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP Document Root Trick</title>
		<link>http://blog.perplexedlabs.com/2008/02/01/php-test/</link>
		<pubDate>Fri, 01 Feb 2008 19:16:57 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://perplexedlabs.com/2008/02/01/php-test/</guid>
		<description></description>
		<content:encoded><![CDATA[Create and place this file in your document root, include it in all other files to easily have access to the directory your site is located without using clumsy and unreliable $_SERVER or $_ENV entries.

_require.php:
[sourcecode language='php']
<?php
$oldCwd = getcwd();
chdir(dirname(__FILE__));
define('SITE_DOCROOT', getcwd());
chdir($oldCwd);
?>
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2008-02-01 14:16:57</wp:post_date>
		<wp:post_date_gmt>2008-02-01 19:16:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-test</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="getcwd"><![CDATA[getcwd]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399951]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>873</wp:comment_id>
			<wp:comment_author><![CDATA[David]]></wp:comment_author>
			<wp:comment_author_email>david@davidblechinger.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.70.121.51</wp:comment_author_IP>
			<wp:comment_date>2009-03-03 22:12:59</wp:comment_date>
			<wp:comment_date_gmt>2009-03-04 03:12:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Worked awesome for me....]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Periodity Box With Colors</title>
		<link>http://blog.perplexedlabs.com/?attachment_id=23</link>
		<pubDate>Wed, 06 Feb 2008 20:42:49 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/wp-content/uploads/2008/02/chartboxes2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2008-02-06 15:42:49</wp:post_date>
		<wp:post_date_gmt>2008-02-06 20:42:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>periodity-box-with-colors</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.perplexedlabs.com/wp-content/uploads/2008/02/chartboxes2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/plabs/public_html/wp-content/uploads/2008/02/chartboxes2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1180;s:6:"height";i:830;s:14:"hwstring_small";s:23:"height='90' width='128'";s:4:"file";s:66:"/home/plabs/public_html/wp-content/uploads/2008/02/chartboxes2.png";s:5:"thumb";s:25:"chartboxes2.thumbnail.png";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Periodity Box With Colors Thumb</title>
		<link>http://blog.perplexedlabs.com/?attachment_id=24</link>
		<pubDate>Wed, 06 Feb 2008 20:43:14 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/wp-content/uploads/2008/02/chartboxes2_sm.PNG</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2008-02-06 15:43:14</wp:post_date>
		<wp:post_date_gmt>2008-02-06 20:43:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>periodity-box-with-colors-thumb</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.perplexedlabs.com/wp-content/uploads/2008/02/chartboxes2_sm.PNG</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/plabs/public_html/wp-content/uploads/2008/02/chartboxes2_sm.PNG]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:295;s:6:"height";i:208;s:14:"hwstring_small";s:23:"height='90' width='128'";s:4:"file";s:69:"/home/plabs/public_html/wp-content/uploads/2008/02/chartboxes2_sm.PNG";s:5:"thumb";s:28:"chartboxes2_sm.thumbnail.PNG";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cyberia</title>
		<link>http://blog.perplexedlabs.com/2008/11/20/13-years-on-the-web-a-retrospective-part-i/cyberia/</link>
		<pubDate>Thu, 20 Nov 2008 16:46:41 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/wp-content/uploads/2008/11/cyberia.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date>2008-11-20 11:46:41</wp:post_date>
		<wp:post_date_gmt>2008-11-20 16:46:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cyberia</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>78</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.perplexedlabs.com/wp-content/uploads/2008/11/cyberia.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/plabs/public_html/wp-content/uploads/2008/11/cyberia.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:275;s:6:"height";i:380;s:14:"hwstring_small";s:22:"height='96' width='69'";s:4:"file";s:62:"/home/plabs/public_html/wp-content/uploads/2008/11/cyberia.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:19:"cyberia-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;}s:6:"medium";a:3:{s:4:"file";s:19:"cyberia-217x300.jpg";s:5:"width";i:217;s:6:"height";i:300;}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>title</title>
		<link>http://blog.perplexedlabs.com/2008/12/19/13-years-on-the-web-a-retrospective-part-ii/title/</link>
		<pubDate>Fri, 19 Dec 2008 16:09:49 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/wp-content/uploads/2008/12/title.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date>2008-12-19 11:09:49</wp:post_date>
		<wp:post_date_gmt>2008-12-19 16:09:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>title</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>96</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.perplexedlabs.com/wp-content/uploads/2008/12/title.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2008/12/title.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"350";s:6:"height";s:3:"150";s:14:"hwstring_small";s:23:"height='54' width='128'";s:4:"file";s:17:"2008/12/title.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:17:"title-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:17:"title-300x128.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"128";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>titleth</title>
		<link>http://blog.perplexedlabs.com/2008/12/19/13-years-on-the-web-a-retrospective-part-ii/titleth/</link>
		<pubDate>Fri, 19 Dec 2008 16:09:49 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/wp-content/uploads/2008/12/titleth.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date>2008-12-19 11:09:49</wp:post_date>
		<wp:post_date_gmt>2008-12-19 16:09:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>titleth</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>96</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.perplexedlabs.com/wp-content/uploads/2008/12/titleth.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2008/12/titleth.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"150";s:6:"height";s:2:"30";s:14:"hwstring_small";s:23:"height='25' width='128'";s:4:"file";s:19:"2008/12/titleth.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hajiworld</title>
		<link>http://blog.perplexedlabs.com/2008/12/19/13-years-on-the-web-a-retrospective-part-ii/hajiworld/</link>
		<pubDate>Fri, 19 Dec 2008 16:10:54 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/wp-content/uploads/2008/12/hajiworld.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date>2008-12-19 11:10:54</wp:post_date>
		<wp:post_date_gmt>2008-12-19 16:10:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hajiworld</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>96</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.perplexedlabs.com/wp-content/uploads/2008/12/hajiworld.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2008/12/hajiworld.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"492";s:6:"height";s:3:"150";s:14:"hwstring_small";s:23:"height='39' width='128'";s:4:"file";s:21:"2008/12/hajiworld.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:21:"hajiworld-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:20:"hajiworld-300x91.jpg";s:5:"width";s:3:"300";s:6:"height";s:2:"91";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen13</title>
		<link>http://blog.perplexedlabs.com/2008/12/19/13-years-on-the-web-a-retrospective-part-ii/screen13/</link>
		<pubDate>Fri, 19 Dec 2008 16:10:55 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/wp-content/uploads/2008/12/screen13.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date>2008-12-19 11:10:55</wp:post_date>
		<wp:post_date_gmt>2008-12-19 16:10:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen13</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>96</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.perplexedlabs.com/wp-content/uploads/2008/12/screen13.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2008/12/screen13.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"640";s:6:"height";s:3:"480";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:20:"2008/12/screen13.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:20:"screen13-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:20:"screen13-300x225.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"225";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gpmegal</title>
		<link>http://blog.perplexedlabs.com/2008/12/19/13-years-on-the-web-a-retrospective-part-ii/gpmegal/</link>
		<pubDate>Fri, 19 Dec 2008 16:12:03 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/wp-content/uploads/2008/12/gpmegal.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date>2008-12-19 11:12:03</wp:post_date>
		<wp:post_date_gmt>2008-12-19 16:12:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gpmegal</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>96</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.perplexedlabs.com/wp-content/uploads/2008/12/gpmegal.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2008/12/gpmegal.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"356";s:6:"height";s:3:"154";s:14:"hwstring_small";s:23:"height='55' width='128'";s:4:"file";s:19:"2008/12/gpmegal.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:19:"gpmegal-150x150.gif";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:19:"gpmegal-300x129.gif";s:5:"width";s:3:"300";s:6:"height";s:3:"129";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lban</title>
		<link>http://blog.perplexedlabs.com/2008/12/19/13-years-on-the-web-a-retrospective-part-ii/lban/</link>
		<pubDate>Fri, 19 Dec 2008 16:12:03 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/wp-content/uploads/2008/12/lban.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date>2008-12-19 11:12:03</wp:post_date>
		<wp:post_date_gmt>2008-12-19 16:12:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lban</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>96</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.perplexedlabs.com/wp-content/uploads/2008/12/lban.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2008/12/lban.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"468";s:6:"height";s:2:"60";s:14:"hwstring_small";s:23:"height='16' width='128'";s:4:"file";s:16:"2008/12/lban.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:15:"lban-150x60.gif";s:5:"width";s:3:"150";s:6:"height";s:2:"60";}s:6:"medium";a:3:{s:4:"file";s:15:"lban-300x38.gif";s:5:"width";s:3:"300";s:6:"height";s:2:"38";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>title1</title>
		<link>http://blog.perplexedlabs.com/2008/12/19/13-years-on-the-web-a-retrospective-part-ii/title1/</link>
		<pubDate>Fri, 19 Dec 2008 16:12:03 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/wp-content/uploads/2008/12/title1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date>2008-12-19 11:12:03</wp:post_date>
		<wp:post_date_gmt>2008-12-19 16:12:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>title1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>96</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.perplexedlabs.com/wp-content/uploads/2008/12/title1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2008/12/title1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"360";s:6:"height";s:3:"106";s:14:"hwstring_small";s:23:"height='37' width='128'";s:4:"file";s:18:"2008/12/title1.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:18:"title1-150x106.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"106";}s:6:"medium";a:3:{s:4:"file";s:17:"title1-300x88.jpg";s:5:"width";s:3:"300";s:6:"height";s:2:"88";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>37signals_php</title>
		<link>http://blog.perplexedlabs.com/2009/04/21/37signals-and-php/37signals_php/</link>
		<pubDate>Tue, 21 Apr 2009 16:37:11 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/wp-content/uploads/2009/04/37signals_php.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date>2009-04-21 11:37:11</wp:post_date>
		<wp:post_date_gmt>2009-04-21 16:37:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>37signals_php</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>219</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.perplexedlabs.com/wp-content/uploads/2009/04/37signals_php.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/04/37signals_php.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"784";s:6:"height";s:3:"638";s:14:"hwstring_small";s:23:"height='96' width='117'";s:4:"file";s:25:"2009/04/37signals_php.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:25:"37signals_php-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:25:"37signals_php-300x244.png";s:5:"width";s:3:"300";s:6:"height";s:3:"244";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sample Chapter 6 &quot;Serving Multiple Templates&quot;</title>
		<link>http://blog.perplexedlabs.com/2009/07/28/django-1-0-template-development-sample-chapter-serving-multiple-templates/django-1-0-template-development-sample-chapter-6-serving-multiple-templates/</link>
		<pubDate>Wed, 29 Jul 2009 01:23:56 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/wp-content/uploads/2009/07/django-1-0-template-development-sample-chapter-6-serving-multiple-templates.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>324</wp:post_id>
		<wp:post_date>2009-07-28 20:23:56</wp:post_date>
		<wp:post_date_gmt>2009-07-29 01:23:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>django-1-0-template-development-sample-chapter-6-serving-multiple-templates</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>323</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.perplexedlabs.com/wp-content/uploads/2009/07/django-1-0-template-development-sample-chapter-6-serving-multiple-templates.pdf</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/07/django-1-0-template-development-sample-chapter-6-serving-multiple-templates.pdf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Becoming A Better Developer or Book Review of &quot;Coders at Work&quot;</title>
		<link>http://blog.perplexedlabs.com/?p=465</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=465</guid>
		<description></description>
		<content:encoded><![CDATA[I've just wrapped up a read through <a href="http://www.amazon.com/gp/redirect.html?ie=UTF8&location=http%3A%2F%2Fwww.amazon.com%2Fs%3Fie%3DUTF8%26x%3D0%26ref_%3Dnb%5Fsb%5Fss%5Fi%5F0%5F6%26y%3D0%26field-keywords%3Dcoders%2520at%2520work%26url%3Dsearch-alias%253Daps%26sprefix%3Dcoders&tag=perplabs-20&linkCode=ur2&camp=1789&creative=390957">Coders at Work</a><img src="https://www.assoc-amazon.com/e/ir?t=perplabs-20&l=ur2&o=1" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> by Peter Siebel.  It's an excellent collection of interviews with some of the most important programmers of our time and a unique opportunity to pick their brain and hear their voice regarding tools, techniques, theory, process, education, and the state of our craft.

Clearly this is an opinionated bunch.  Unit testing, higher education, debugging, programming languages, design patterns, coding style - "holy war" issues that perhaps nobody will ever agree on.  I do however feel like I was able to glean some universal truths, so here goes:

<ol>
	<li><strong>Write Code</strong> - it seems obvious enough.  A similar theme would be <em>only by doing do you truly learn</em>.  I can relate to the latter.  Reading a book, a tutorial, or an article only serves as whetting an appetite.  True understanding and the ability to use that knowledge comes from actually doing it yourself.  Try to identify the value of a solution or technology with respect to a problem you have.  A marriage of the two is the perfect opportunity for learning and solving.

I find the hardest part for me in certain situations is <em>starting</em>.  If you just begin writing code, get something on the screen, and iterate on that the ball begins to roll.  It was interesting to hear that even the greats deal with this roadblock.  One going as far as telling himself (paraphrasing) "You've done this before, for 30 years, and every time it ends up great - just start".  It's comforting to know you're not alone in feeling this way...</li>

<li><strong>Read Code</strong> - conversely another skill that's vitally important is t
</ol>

http://www.bluebytesoftware.com/blog/2010/09/06/ThePrematureOptimizationIsEvilMyth.aspx

“Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.” - Brian W. Kernighan]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>465</wp:post_id>
		<wp:post_date>2010-09-08 19:03:45</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="book-review"><![CDATA[book review]]></category>
		<category domain="category" nicename="book-reviews"><![CDATA[Book Reviews]]></category>
		<category domain="post_tag" nicename="coders-at-work"><![CDATA[coders at work]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="random"><![CDATA[Random]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a0979344d6e8814b0254acbd91225e03</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Problems</title>
		<link>http://blog.perplexedlabs.com/2011/05/16/experiences-developing-my-first-ios-iphone-app-oncall-for-nagios/sshot4/</link>
		<pubDate>Sat, 14 May 2011 19:47:45 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/wp-content/uploads/2011/05/sshot4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>519</wp:post_id>
		<wp:post_date>2011-05-14 14:47:45</wp:post_date>
		<wp:post_date_gmt>2011-05-14 19:47:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sshot4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>517</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.perplexedlabs.com/wp-content/uploads/2011/05/sshot4.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/sshot4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"320";s:6:"height";s:3:"480";s:14:"hwstring_small";s:22:"height='96' width='64'";s:4:"file";s:18:"2011/05/sshot4.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:18:"sshot4-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:18:"sshot4-200x300.png";s:5:"width";s:3:"200";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Problems View Screen Shot]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>clang</title>
		<link>http://blog.perplexedlabs.com/2011/05/16/experiences-developing-my-first-ios-iphone-app-oncall-for-nagios/clang3/</link>
		<pubDate>Sat, 14 May 2011 19:49:37 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/wp-content/uploads/2011/05/clang3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>522</wp:post_id>
		<wp:post_date>2011-05-14 14:49:37</wp:post_date>
		<wp:post_date_gmt>2011-05-14 19:49:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clang3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>517</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.perplexedlabs.com/wp-content/uploads/2011/05/clang3.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/clang3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"649";s:6:"height";s:3:"246";s:14:"hwstring_small";s:23:"height='48' width='128'";s:4:"file";s:18:"2011/05/clang3.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:18:"clang3-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:18:"clang3-300x113.png";s:5:"width";s:3:"300";s:6:"height";s:3:"113";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Enable Static Code Analyzer]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ServiceDetail</title>
		<link>http://blog.perplexedlabs.com/2011/05/16/experiences-developing-my-first-ios-iphone-app-oncall-for-nagios/sshot5/</link>
		<pubDate>Sat, 14 May 2011 19:51:50 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/wp-content/uploads/2011/05/sshot5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>525</wp:post_id>
		<wp:post_date>2011-05-14 14:51:50</wp:post_date>
		<wp:post_date_gmt>2011-05-14 19:51:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sshot5</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>517</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.perplexedlabs.com/wp-content/uploads/2011/05/sshot5.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/sshot5.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"320";s:6:"height";s:3:"480";s:14:"hwstring_small";s:22:"height='96' width='64'";s:4:"file";s:18:"2011/05/sshot5.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:18:"sshot5-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:18:"sshot5-200x300.png";s:5:"width";s:3:"200";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Service Detail View]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby On Rails and SliceHost Part 1: Initial Setup</title>
		<link>http://blog.perplexedlabs.com/2008/02/04/building-a-rails-capable-slice-from-scratch/</link>
		<pubDate>Mon, 04 Feb 2008 20:42:54 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://perplexedlabs.com/2008/02/04/building-a-rails-capable-slice-from-scratch/</guid>
		<description></description>
		<content:encoded><![CDATA[I recently purchased a VPS from <a href="http://www.slicehost.com">SliceHost.com</a>. After ruling out a shared host and deciding on a VPS setup, SliceHost seemed to offer the most for my money.   My initial setup is the 256slice, which offers 256mb RAM, 10GB of storage, and 100GB of bandwidth for $20 a month.  Being able to build my own stack from scratch is very appealing, especially as most of my side projects are written in <a href="http://www.rubyonrails.org/">Rails</a>.  My goal was to have <a href="http://httpd.apache.org/">Apache 2.2</a> as a front-end server, proxying requests to <a href="http://mongrel.rubyforge.org/">mongrel</a> or a <a href="http://mongrel.rubyforge.org/docs/mongrel_cluster.html">cluster of mongrels</a>, with <a href="http://dev.mysql.com/downloads/mysql/5.0.html">MySQL 5.0</a> as the database.  Of course I also wanted to have <a href="http://www.ruby-lang.org/en/downloads/">Ruby 1.8.6</a> and Rails 2.0.2.  Another useful, though optional, tool is <a href="http://www.phpmyadmin.net/home_page/index.php">phpMyAdmin</a>.  I am also using <a href="http://www.centos.org/">CentOS 5.0</a>, first because of my familiarity with it and second because it's well documented and supported.  The following is the first of a multipart tutorial about how I set this all up.  In future installments I will detail how to secure and optimize each installation as well as enable Apache proxying and mongrel clustering.

<strong>Change the default root password</strong>
<blockquote>&gt;passwd</blockquote>
<strong>Update all yum packages</strong>
<blockquote>&gt;yum update</blockquote>
<strong>Bring in some standard packages</strong>
<blockquote>&gt;yum install wget openssl-devel lynx zlib zlib-devel vixie-cron curl lynx subversion make gcc automake</blockquote>
<strong>Install Apache</strong>
<blockquote>&gt;yum install httpd</blockquote>
<strong>Setup your domain records</strong>
<a href="http://articles.slicehost.com/2007/10/24/creating-dns-records"> http://articles.slicehost.com/2007/10/24/creating-dns-records</a>

<strong>Create your VirtualHosts in Apache's httpd.conf</strong>
<a href="http://httpd.apache.org/docs/2.2/vhosts"> http://httpd.apache.org/docs/2.2/vhosts</a>
Note: Apache's conf directory will be /etc/httpd/conf.  Don't forget to restart Apache after setting up each new vhost:
<blockquote>&gt;service httpd restart</blockquote>
See <a href="http://mongrel.rubyforge.org/docs/apache.html">http://mongrel.rubyforge.org/docs/apache.html</a> for details on how to get Apache and mongrel to play with each other.

<strong>Start Apache</strong>
<blockquote>&gt;httpd service start</blockquote>
<strong>Install MySQL</strong>
<blockquote>&gt;yum install mysql mysql-server</blockquote>
See <a href="http://dev.mysql.com/doc/">http://dev.mysql.com/doc/</a> for post-installation instructions (setting up initial accounts, etc.)

<strong>Install Ruby (1.8.6)</strong>
<blockquote>&gt;wget ftp://ftp.ruby-lang.org/pub/ruby/1.8/ruby-1.8.6-p111.tar.gz
&gt;gzip -d ruby-1.8.6-p111.tar.gz
&gt;tar xvf ruby-1.8.6-p111.tar.gz
&gt;cd ruby-1.8.6-p111.tar.gz
&gt;./configure
&gt;make
&gt;make install</blockquote>
<strong>Install Ruby Gems (1.0.1)</strong>
<blockquote>&gt;wget http://rubyforge.org/frs/download.php/29548/rubygems-1.0.1.tgz
&gt;tar xvf rubygems-1.0.1.tgz
&gt;cd rubygems-1.0.1.tgz
&gt;ruby setup.rb</blockquote>
<strong>Install Rails (2.0.2)</strong>
<blockquote>&gt;gem install rails --include-dependencies</blockquote>
<strong>Install Mongrel</strong>
<blockquote>&gt;gem install mongrel</blockquote>
<strong>Optional for phpMyAdmin
Install php</strong>
<blockquote>&gt;yum install php</blockquote>
<strong>Install php extensions necessary for phpMyAdmin</strong>
<blockquote>&gt;yum install php-mcrypt
&gt;yum install php-mbstring</blockquote>
<strong>I</strong><strong>nstall phpmyadmin</strong>
<a href="http://www.phpmyadmin.net/documentation/#setup">http://www.phpmyadmin.net/documentation/#setup</a>

Any comments or feedback is appreciated.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2008-02-04 15:42:54</wp:post_date>
		<wp:post_date_gmt>2008-02-04 20:42:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>building-a-rails-capable-slice-from-scratch</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apache"><![CDATA[apache]]></category>
		<category domain="post_tag" nicename="centos"><![CDATA[centos]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="post_tag" nicename="memcached"><![CDATA[memcached]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<category domain="post_tag" nicename="slicehost"><![CDATA[slicehost]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399959]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2752</wp:comment_id>
			<wp:comment_author><![CDATA[Ajk]]></wp:comment_author>
			<wp:comment_author_email>mandm_zoom@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>96.255.94.107</wp:comment_author_IP>
			<wp:comment_date>2010-01-24 17:52:22</wp:comment_date>
			<wp:comment_date_gmt>2010-01-24 22:52:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hi i get this error  when i run make command<br><br>gcc -g -O2  -DRUBY_EXPORT -D_GNU_SOURCE=1  -I. -I.  -c math.c<br>math.c:37:13: error: missing binary operator before token "("<br>make: *** [math.o] Error 1]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2826</wp:comment_id>
			<wp:comment_author><![CDATA[sangeethkumar]]></wp:comment_author>
			<wp:comment_author_email>sangeeth@srishtisoft.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>202.140.53.222</wp:comment_author_IP>
			<wp:comment_date>2010-05-06 06:23:07</wp:comment_date>
			<wp:comment_date_gmt>2010-05-06 11:23:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,<br><br><br>math.c:37:13: error: missing binary operator before token "("<br><br><br>while installing ruby 1.8.6 i am getting the above<br> error.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>PHP RegEx for Newlines, Commas, Whitespace</title>
		<link>http://blog.perplexedlabs.com/2008/02/04/php-regular-expression-for-newlines-commas-whitespace/</link>
		<pubDate>Mon, 04 Feb 2008 15:51:02 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://perplexedlabs.com/2008/02/04/php-regular-expression-for-newlines-commas-whitespace/</guid>
		<description></description>
		<content:encoded><![CDATA[The following line splits a string by any combination of whitespace (including newlines) and commas:

[sourcecode language='php']
<?php
$splitArray = preg_split("/[\s,]+/", $input);
?>
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2008-02-04 10:51:02</wp:post_date>
		<wp:post_date_gmt>2008-02-04 15:51:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-regular-expression-for-newlines-commas-whitespace</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="explode"><![CDATA[explode]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="preg_split"><![CDATA[preg_split]]></category>
		<category domain="post_tag" nicename="regex"><![CDATA[regex]]></category>
		<category domain="post_tag" nicename="regular-expression"><![CDATA[regular expression]]></category>
		<category domain="post_tag" nicename="split"><![CDATA[split]]></category>
		<category domain="post_tag" nicename="whitespace"><![CDATA[whitespace]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399952]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP Array to String</title>
		<link>http://blog.perplexedlabs.com/2008/02/04/php-array-to-string/</link>
		<pubDate>Mon, 04 Feb 2008 16:52:45 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://perplexedlabs.com/2008/02/04/php-array-to-string/</guid>
		<description></description>
		<content:encoded><![CDATA[The function below facilitates the process of converting an array to a string.  Very useful for building SQL insert queries with arrays of data.

[sourcecode language='php']
<?php
function array2str($array, $pre = '', $pad = '', $sep = ', ')
{
	$str = '';
	if(is_array($array)) {
		if(count($array)) {
			foreach($array as $v) {
				$str .= $pre.$v.$pad.$sep;
			}
			$str = substr($str, 0, -strlen($sep));
		}
	} else {
		$str .= $pre.$array.$pad;
	}
		
	return $str;
}
?>
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2008-02-04 11:52:45</wp:post_date>
		<wp:post_date_gmt>2008-02-04 16:52:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-array-to-string</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="array"><![CDATA[array]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399955]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Ruby Array to String&nbsp;by&nbsp;Perplexed Labs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.perplexedlabs.com/2008/02/05/ruby-array-to-string/</wp:comment_author_url>
			<wp:comment_author_IP>69.9.189.223</wp:comment_author_IP>
			<wp:comment_date>2008-02-05 16:53:39</wp:comment_date>
			<wp:comment_date_gmt>2008-02-05 21:53:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] post below got me thinking about how I would accomplish the same thing in Ruby, turning an array into a [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>415</wp:comment_id>
			<wp:comment_author><![CDATA[Josh]]></wp:comment_author>
			<wp:comment_author_email>sendjoshspam@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.joshrice.net</wp:comment_author_url>
			<wp:comment_author_IP>98.175.192.133</wp:comment_author_IP>
			<wp:comment_date>2008-12-18 11:41:39</wp:comment_date>
			<wp:comment_date_gmt>2008-12-18 16:41:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You should add recursive call if $v is an array so your script can handle multi-dimensional arrays. 

Something like:

foreach($array as $v) 
{
	if(is_array($v))
		$str .= array2str($v, $pre, $pad, $sep);
	else
		$str .= $pre.$v.$pad.$sep;  
}]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2625</wp:comment_id>
			<wp:comment_author><![CDATA[kersurk]]></wp:comment_author>
			<wp:comment_author_email>madisliias@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://000.pri.ee/</wp:comment_author_url>
			<wp:comment_author_IP>193.40.10.218</wp:comment_author_IP>
			<wp:comment_date>2009-07-07 17:42:33</wp:comment_date>
			<wp:comment_date_gmt>2009-07-07 22:42:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[implode should do the trick as well.<br><br><code]>function array2str($array, $pre = &#39;&#39;, $pad = &#39;&#39;, $sep = &#39;, &#39;) {<br>	$glue = $pad.$sep.$pre;<br>	return $pre.implode($glue, $array).$pad;<br>}</code><br><br>For multidimensional array, this comment could be useful <a href="http://ee2.php.net/manual/en/function.implode.php#84644" rel="nofollow">http://ee2.php.net/manual/en/function.implode.p...</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2657</wp:comment_id>
			<wp:comment_author><![CDATA[test]]></wp:comment_author>
			<wp:comment_author_email>test@test.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>122.252.241.14</wp:comment_author_IP>
			<wp:comment_date>2009-08-05 01:37:54</wp:comment_date>
			<wp:comment_date_gmt>2009-08-05 06:37:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[test]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2737</wp:comment_id>
			<wp:comment_author><![CDATA[test]]></wp:comment_author>
			<wp:comment_author_email>test@test.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>122.252.241.14</wp:comment_author_IP>
			<wp:comment_date>2009-08-05 05:37:54</wp:comment_date>
			<wp:comment_date_gmt>2009-08-05 10:37:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[test]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>PHP Simple Profiling Class</title>
		<link>http://blog.perplexedlabs.com/2008/02/04/php-simple-profiling-class/</link>
		<pubDate>Mon, 04 Feb 2008 18:47:58 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://perplexedlabs.com/2008/02/04/php-simple-profiling-class/</guid>
		<description></description>
		<content:encoded><![CDATA[Had to quickly get the execution time of certain segments of code so I whipped up this basic profiling class below.

Usage would go something like:

[sourcecode language='php']
<?php
$profiler = new cProfiler;
$profiler->start();
// ... long block of code ...
$et = $profiler->end();
echo 'longBlock et = '.$et.'<br>';
?>
[/sourcecode]

Class listing cProfiler.php:

[sourcecode language='php']
<?php

class cProfiler
{
	public $_i;

	public $stamps;
	public $ets;
	
	function __construct()
	{
		$this->_i = 0;
		$this->stamps = array();
		$this->ets = array();
	}
	
	function __destruct() {}
	
	function _stamp() { return microtime(); }

	function start() {
		$this->stamps[$this->_i] = $this->_stamp();
		$this->_i++;
	}
	
	function getET($id = '') { return $this->ets[$id]; }
	
	function end($id = '')
	{
		$timeend = $this->_stamp();
		$et = false;
		if($this->_i > 0) {
			$timestart = $this->stamps[$this->_i - 1];
			unset($this->stamps[$this->_i - 1]);
			$this->_i--;
			$et = number_format(((substr($timeend,0,9)) + (substr($timeend,-10)) - (substr($timestart,0,9)) - (substr($timestart,-10))),4);
			$this->ets[$id] = $et;
		}
		
		return $et;
	}
}

?>
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2008-02-04 13:47:58</wp:post_date>
		<wp:post_date_gmt>2008-02-04 18:47:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-simple-profiling-class</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="execution-time"><![CDATA[execution time]]></category>
		<category domain="post_tag" nicename="microtime"><![CDATA[microtime]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="profiling"><![CDATA[profiling]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399956]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tales of profiling when optimizing</title>
		<link>http://blog.perplexedlabs.com/2008/02/04/tales-of-profiling-when-optimizing/</link>
		<pubDate>Mon, 04 Feb 2008 20:13:51 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://perplexedlabs.com/2008/02/04/tales-of-profiling-when-optimizing/</guid>
		<description></description>
		<content:encoded><![CDATA[Spending most of the day optimizing a page that (when I began) took 8.6 seconds to execute.  Using some basic profiling techniques helped tremendously in not wasting my time and efforts attempting to optimize a portion of code that won't yield appreciable gains.

The time intensive code for applications I write generally fall into either data retrieval or data processing.  In this particular case the app was spending about 1.5 seconds to retrieve orders that composed a given trade - 1 query per order (p.s. there are 1000's and 1000's of orders).   I re-wrote this portion with 1 query to load into memory all the orders beforehand and cut execution time to 0.11 seconds.

After all is said and done, the page execution time sits at 1.7 seconds.   That's an ~80% improvement!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2008-02-04 15:13:51</wp:post_date>
		<wp:post_date_gmt>2008-02-04 20:13:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tales-of-profiling-when-optimizing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="optimizing"><![CDATA[optimizing]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="post_tag" nicename="profiling"><![CDATA[profiling]]></category>
		<category domain="post_tag" nicename="sql"><![CDATA[sql]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399957]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Only Measurement Of Code Quality</title>
		<link>http://blog.perplexedlabs.com/2008/02/05/17/</link>
		<pubDate>Tue, 05 Feb 2008 15:28:39 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://perplexedlabs.com/2008/02/05/17/</guid>
		<description></description>
		<content:encoded><![CDATA[<center><img src="http://www.osnews.com/images/comics/wtfm.jpg" align="middle" height="453" width="500" /></center>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date>2008-02-05 10:28:39</wp:post_date>
		<wp:post_date_gmt>2008-02-05 15:28:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>17</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code"><![CDATA[code]]></category>
		<category domain="category" nicename="random"><![CDATA[Random]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399960]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Clickable SPAN</title>
		<link>http://blog.perplexedlabs.com/2008/02/05/the-clickable-span/</link>
		<pubDate>Tue, 05 Feb 2008 17:08:59 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://perplexedlabs.com/2008/02/05/the-clickable-span/</guid>
		<description></description>
		<content:encoded><![CDATA[It seems like the standard pattern for calling a JavaScript function when text is clicked is the following:
[sourcecode language="xhtml"]<a href="#" onclick="callSomeJSFunction();">Click Me</a>[/sourcecode]
The problem I have often encountered is that clicking the link causes the browser to jump to the top of the page if you have scrolled at all.  Users do not like unexpected behavior like this.  I sometimes prefer to use a "clickable span" instead:
[sourcecode language="css"]
span.clickable_span{
cursor: pointer;
color: #[whatever your link color is];
}
[/sourcecode]

[sourcecode language="xhtml"]<span class="clickable_span" onclick="callSomeJSFunction();">Click Me</span>[/sourcecode]

The span will have the same style as regular link (hand icon when the user mouses over) and the JavaScript function will be called.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date>2008-02-05 12:08:59</wp:post_date>
		<wp:post_date_gmt>2008-02-05 17:08:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-clickable-span</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="xhtml"><![CDATA[xhtml]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399961]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>576</wp:comment_id>
			<wp:comment_author><![CDATA[Joff]]></wp:comment_author>
			<wp:comment_author_email>blog@joff.org</wp:comment_author_email>
			<wp:comment_author_url>http://blog.jofftastic.co.uk</wp:comment_author_url>
			<wp:comment_author_IP>213.106.51.112</wp:comment_author_IP>
			<wp:comment_date>2009-01-18 20:46:24</wp:comment_date>
			<wp:comment_date_gmt>2009-01-19 01:46:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Instead of the "#" within the href, try it with "javascript;" instead.  This won't cause the page to jump back to the top each time.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>580</wp:comment_id>
			<wp:comment_author><![CDATA[Eric]]></wp:comment_author>
			<wp:comment_author_email>speric@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.184.104.53</wp:comment_author_IP>
			<wp:comment_date>2009-01-19 08:16:56</wp:comment_date>
			<wp:comment_date_gmt>2009-01-19 13:16:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's exactly what we've done here!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2704</wp:comment_id>
			<wp:comment_author><![CDATA[mbriedis]]></wp:comment_author>
			<wp:comment_author_email>briedis6152@inbox.lv</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.30.130.46</wp:comment_author_IP>
			<wp:comment_date>2009-11-05 06:59:26</wp:comment_date>
			<wp:comment_date_gmt>2009-11-05 11:59:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hmm, I thinking of a better solution.<br><br>&lt;a href="#" onclick="return myFunc();"&gt;Link</a><br><br>href attribute fill fire only when the result of onclick will be true (will no be false)<br><br>just write your function like this:<br>function myFun(){<br> //code<br> return false;<br>}<br><br><br>or &lt;a href="#" onclick="myFunc(); return false;"&gt;link&lt;/link&gt;<br><br>That won&#39;t make the jump to the top of the page...<br><br><br>Regards,<br>Martin]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2742</wp:comment_id>
			<wp:comment_author><![CDATA[mbriedis]]></wp:comment_author>
			<wp:comment_author_email>briedis6152@inbox.lv</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.30.130.46</wp:comment_author_IP>
			<wp:comment_date>2009-11-05 11:59:26</wp:comment_date>
			<wp:comment_date_gmt>2009-11-05 16:59:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hmm, I thinking of a better solution.<br><br>&lt;a href="#" onclick="return myFunc();"&gt;Link&lt; /a&gt;<br><br>href attribute fill fire only when the result of onclick will be true (will no be false)<br><br>just write your function like this:<br>function myFun(){<br> //code<br> return false;<br>}<br><br><br>or &lt;a href="#" onclick="myFunc(); return false;"&gt;link&lt; /a&gt;<br><br>That won&#39;t make the jump to the top of the page...<br><br><br>Regards,<br>Martin]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>mysqldump usage</title>
		<link>http://blog.perplexedlabs.com/2008/02/05/mysqldump-usage/</link>
		<pubDate>Tue, 05 Feb 2008 19:23:26 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://perplexedlabs.com/2008/02/05/mysqldump-usage/</guid>
		<description></description>
		<content:encoded><![CDATA[The info is available everywhere but for those who want it spoon fed into their eager mouths here goes:

To dump a database to an optimized sql file and then tar/gz compress the file:
<blockquote>> mysqldump --opt database > database.sql
> tar -czvf database.tar.gz database.sql</blockquote>

To export a database from the local mysql server to a remote mysql server:
<blockquote>> mysqldump --opt -A | mysql --user=remote_user --password=remote_pw --host=xxx.xxx.xxx.xxx</blockquote>

You're welcome!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2008-02-05 14:23:26</wp:post_date>
		<wp:post_date_gmt>2008-02-05 19:23:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysqldump-usage</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="database"><![CDATA[database]]></category>
		<category domain="post_tag" nicename="export"><![CDATA[export]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="mysqldump"><![CDATA[mysqldump]]></category>
		<category domain="post_tag" nicename="sql"><![CDATA[sql]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399963]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2628</wp:comment_id>
			<wp:comment_author><![CDATA[lionheart620]]></wp:comment_author>
			<wp:comment_author_email>maxx620@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>10.8.50.130</wp:comment_author_IP>
			<wp:comment_date>2009-07-22 20:25:52</wp:comment_date>
			<wp:comment_date_gmt>2009-07-23 01:25:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A slightly more indepth look at mysqldump usage:<br><a href="http://www.tjbourke.com/2" rel="nofollow">http://www.tjbourke.com/2</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2741</wp:comment_id>
			<wp:comment_author><![CDATA[lionheart620]]></wp:comment_author>
			<wp:comment_author_email>maxx620@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>10.8.50.130</wp:comment_author_IP>
			<wp:comment_date>2009-07-23 00:25:52</wp:comment_date>
			<wp:comment_date_gmt>2009-07-23 05:25:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A slightly more indepth look at mysqldump usage:<br><a href="http://www.tjbourke.com/2" rel="nofollow">http://www.tjbourke.com/2</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Mutex with PHP and mySQL</title>
		<link>http://blog.perplexedlabs.com/2008/02/06/mutex-with-php-and-mysql/</link>
		<pubDate>Wed, 06 Feb 2008 15:34:57 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/2008/02/06/mutex-with-php-and-mysql/</guid>
		<description></description>
		<content:encoded><![CDATA[There are certain situations where you want a periodically executed script to have one and only one instance running at a time to prevent against poisoning of data due to simultaneous execution.

There's actually an extremely simple way to accomplish this in a PHP environment by taking advantage of mySQL's built in "lock" functionality.

The following simple example illustrates the usage of the class that is listed below:
[sourcecode language='php']
<?php
$lock = new cLock("updateEarnings");
if($lock->isFree()) {
	$lock->lock();
	// execute
	$lock->release();
} else {
	trigger_error("ALREADY LOCKED... ABORTING!", E_USER_NOTICE);
}
?>
[/sourcecode]

Class listing cLock.php: (keep in mind this class uses some helper functions of mine, particularly 'qdb()' and 'result()' which do the obvious)
[sourcecode language='php']
<?php

class cLock
{
	var $lockname;
	var $timeout;
	var $locked;
	
	function cLock($name, $timeout = 0)
	{
		$this->lockname = $name;
		$this->timeout = $timeout;
		$this->locked = -1;
	}
	
	function lock()
	{
		$rs = qdb("SELECT GET_LOCK('".$this->lockname."', ".$this->timeout.")");
		$this->locked = result($rs, 0);
		mysqli_free_result($rs);
	}
	
	function release()
	{
		$rs = qdb("SELECT RELEASE_LOCK('".$this->lockname."')");
		$this->locked = !result($rs, 0);
		mysqli_free_result($rs);
		
	}
	
	function isFree()
	{	
		$rs = qdb("SELECT IS_FREE_LOCK('".$this->lockname."')");
		$lock = (bool)result($rs, 0);
		mysqli_free_result($rs);
		
		return $lock;
	}
}

?>
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2008-02-06 10:34:57</wp:post_date>
		<wp:post_date_gmt>2008-02-06 15:34:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mutex-with-php-and-mysql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="mutex"><![CDATA[mutex]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399965]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>68.195.71.152</wp:comment_author_IP>
			<wp:comment_date>2008-02-14 09:34:00</wp:comment_date>
			<wp:comment_date_gmt>2008-02-14 14:34:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is a valid point, thank you.  It would probably be best to improve the simplicity of the class by calling isFree() from inside lock() and returning (in lock) whether it was a success or failure... then you could simply:

$lock = new cLock("identifier");
if($lock->lock()) {
    // execute
    $lock->release();
}]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Artur Muszynski]]></wp:comment_author>
			<wp:comment_author_email>arturm@union.com.pl</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>87.205.86.233</wp:comment_author_IP>
			<wp:comment_date>2008-02-14 06:10:14</wp:comment_date>
			<wp:comment_date_gmt>2008-02-14 11:10:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Usage example is buggy. You have to check if lock didn't failed. This prevents race when we call isFree() then another process call lock():
...
$lock-&gt;lock();
if($lock-&gt;locked)
{
  // execute
  $lock-&gt;release();
}]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2608</wp:comment_id>
			<wp:comment_author><![CDATA[m_rahman]]></wp:comment_author>
			<wp:comment_author_email>m_rahman18@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.232.143.57</wp:comment_author_IP>
			<wp:comment_date>2009-06-02 17:22:25</wp:comment_date>
			<wp:comment_date_gmt>2009-06-02 22:22:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[otherwise it&#39;s great<br><br>thank you]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2728</wp:comment_id>
			<wp:comment_author><![CDATA[m_rahman]]></wp:comment_author>
			<wp:comment_author_email>m_rahman18@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.232.143.57</wp:comment_author_IP>
			<wp:comment_date>2009-06-02 21:22:25</wp:comment_date>
			<wp:comment_date_gmt>2009-06-03 02:22:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[otherwise it&#39;s great<br><br>thank you]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3513</wp:comment_id>
			<wp:comment_author><![CDATA[Arena]]></wp:comment_author>
			<wp:comment_author_email>andre.renaut@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>89.83.76.134</wp:comment_author_IP>
			<wp:comment_date>2010-11-05 11:33:54</wp:comment_date>
			<wp:comment_date_gmt>2010-11-05 16:33:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://techblog.procurios.nl/k/n618/news/view/41405/14863" rel="nofollow">http://techblog.procurios.nl/k/n618/news/view/41405/14863</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3512</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3512</wp:comment_id>
			<wp:comment_author><![CDATA[Arena]]></wp:comment_author>
			<wp:comment_author_email>andre.renaut@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>89.83.76.134</wp:comment_author_IP>
			<wp:comment_date>2010-11-05 11:31:53</wp:comment_date>
			<wp:comment_date_gmt>2010-11-05 16:31:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[SELECT GET_LOCK always return true even if you activate it twice in a row !]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3448</wp:comment_id>
			<wp:comment_author><![CDATA[A Guest]]></wp:comment_author>
			<wp:comment_author_email>a.guest@mailinator.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>169.197.2.6</wp:comment_author_IP>
			<wp:comment_date>2010-10-11 18:06:43</wp:comment_date>
			<wp:comment_date_gmt>2010-10-11 23:06:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If you want a pure PHP solution with no MySQL dependencies, check out this approach:<br><br><a href="http://cubicspot.blogspot.com/2010/10/forget-flock-and-system-v-semaphores.html" rel="nofollow">http://cubicspot.blogspot.com/2010/10/forget-flock-and-system-v-semaphores.html</a><br>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4270</wp:comment_id>
			<wp:comment_author><![CDATA[Николай Калинин]]></wp:comment_author>
			<wp:comment_author_email>the.fs.iam@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-04-13 11:18:00</wp:comment_date>
			<wp:comment_date_gmt>2012-04-13 11:18:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Using 
SELECT IS_FREE_LOCK('{$this-&gt;lockname}') AND GET_LOCK('{$this-&gt;lockname}', {$this-&gt;timeout})

and in using:
if($lock-&gt;lock()) {
    // execute
    $lock-&gt;release();
} else {
    trigger_error("ALREADY LOCKED... ABORTING!", E_USER_NOTICE);
}

is more efficient thing =)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Using RCov to test Rails</title>
		<link>http://blog.perplexedlabs.com/2008/02/07/using-rcov-to-test-rails/</link>
		<pubDate>Thu, 07 Feb 2008 16:17:43 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/2008/02/07/using-rcov-to-test-rails/</guid>
		<description></description>
		<content:encoded><![CDATA[I always lose this snippet of code, which will run <a href="http://eigenclass.org/hiki.rb?rcov">RCov</a> for all your controllers and models, and output the results to the /public folder of your Rails app:
<blockquote>&gt;rcov test/functional/*.rb test/unit/*.rb --output=public/rcov --rails</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2008-02-07 11:17:43</wp:post_date>
		<wp:post_date_gmt>2008-02-07 16:17:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-rcov-to-test-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="rcov"><![CDATA[rcov]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP Realtime Output to Browser</title>
		<link>http://blog.perplexedlabs.com/2008/02/08/php-realtime-output-to-browser/</link>
		<pubDate>Fri, 08 Feb 2008 15:52:59 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/2008/02/08/php-realtime-output-to-browser/</guid>
		<description></description>
		<content:encoded><![CDATA[I write a lot of administrative scripts that have rather long execution times.  Often it's desirable to be able to monitor the progress of the script in the browser, in realtime.  By default I have my PHP installation setup with gzip output buffering enabled.  This reduces the size of data transmitted to the client but also (obviously) buffers the output.

The PHP manual states that calling <strong><a href="http://us3.php.net/manual/en/function.ob-implicit-flush.php">ob_implicit_flush();</a></strong> <em>"...will turn implicit flushing on or off. Implicit flushing will result in a flush operation after every output call, so that explicit calls to flush() will no longer be needed."</em>.  In my experience this doesn't actually happen.

The answer is simple.  After every portion of output (whether it be nested html, echo, print - whatever) simply call <strong><a href="http://us3.php.net/manual/en/function.ob-flush.php">ob_flush();</a></strong>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2008-02-08 10:52:59</wp:post_date>
		<wp:post_date_gmt>2008-02-08 15:52:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-realtime-output-to-browser</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="ob_flush"><![CDATA[ob_flush]]></category>
		<category domain="post_tag" nicename="ob_implicit_flush"><![CDATA[ob_implicit_flush]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399967]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4044</wp:comment_id>
			<wp:comment_author><![CDATA[Master of Puppets | Trolling]]></wp:comment_author>
			<wp:comment_author_email>oooooo@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-08-19 12:29:00</wp:comment_date>
			<wp:comment_date_gmt>2011-08-19 12:29:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[test]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4015</wp:comment_id>
			<wp:comment_author><![CDATA[Fddf]]></wp:comment_author>
			<wp:comment_author_email>fddf@hghghghhg.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-07-28 11:34:00</wp:comment_date>
			<wp:comment_date_gmt>2011-07-28 11:34:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hhhhhhhhhhhhhhhhhhhhh]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Testing Nirvana</title>
		<link>http://blog.perplexedlabs.com/2008/02/08/testing-nirvana/</link>
		<pubDate>Fri, 08 Feb 2008 18:30:22 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/2008/02/08/testing-nirvana/</guid>
		<description></description>
		<content:encoded><![CDATA[

<blockquote>Started
……………………………………………………………………………………………
Finished in 1702.88777 seconds.

105 tests, 369 assertions, 0 failures, 0 errors</blockquote>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2008-02-08 13:30:22</wp:post_date>
		<wp:post_date_gmt>2008-02-08 18:30:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>testing-nirvana</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="rails-testing"><![CDATA[rails testing]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399968]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Seconds to Minutes/Seconds in Rails</title>
		<link>http://blog.perplexedlabs.com/2008/02/08/seconds-to-minutesseconds-in-rails/</link>
		<pubDate>Fri, 08 Feb 2008 21:48:47 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/2008/02/08/seconds-to-minutesseconds-in-rails/</guid>
		<description></description>
		<content:encoded><![CDATA[Came up with this snippet while writing a Rails log file parser.  It will take any number of seconds and convert it to Xm Xs format (which was useful for my display purposes):

[sourcecode language="ruby"]
def convert_seconds_to_time(seconds)
   total_minutes = seconds / 1.minutes
   seconds_in_last_minute = seconds - total_minutes.minutes.seconds
   "#{total_minutes}m #{seconds_in_last_minute}s"
end
[/sourcecode]
<blockquote>convert_seconds_to_time(630)
=&gt;"10m 30s"</blockquote>
I didn't need to but obviously it can be modified easily to allow for hours as well.  This is small and trivial but useful.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2008-02-08 16:48:47</wp:post_date>
		<wp:post_date_gmt>2008-02-08 21:48:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>seconds-to-minutesseconds-in-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399969]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2746</wp:comment_id>
			<wp:comment_author><![CDATA[Juan Maiz]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/joaomilho</wp:comment_author_url>
			<wp:comment_author_IP>189.27.230.71</wp:comment_author_IP>
			<wp:comment_date>2010-01-04 21:09:30</wp:comment_date>
			<wp:comment_date_gmt>2010-01-05 02:09:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Why bother? time_ago_in_words is just fine. <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001696" rel="nofollow">http://api.rubyonrails.org/classes/ActionView/H...</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4017</wp:comment_id>
			<wp:comment_author><![CDATA[philippelegrain]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/philippelegrain</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-08-01 08:28:00</wp:comment_date>
			<wp:comment_date_gmt>2011-08-01 08:28:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[time_ago_in_words has nothing to do with converting seconds in minutes/seconds ... what it does is tell how much time has elapsed since the time you pass in param.  What is explained here is convert seconds into minutes/seconds.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2746</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>PHP fast, large (megabyte), data transfer between sessions</title>
		<link>http://blog.perplexedlabs.com/2008/02/12/php-fast-large-megabyte-data-transfer-between-sessions/</link>
		<pubDate>Tue, 12 Feb 2008 17:24:04 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/2008/02/12/php-fast-large-megabyte-data-transfer-between-sessions/</guid>
		<description></description>
		<content:encoded><![CDATA[The ability to transfer data from one executing script to the next as components of a web application is of the utmost importance.  Sometimes the objects in transit can grow in size to 10's of megabytes of data.  Nested classes, arrays of smaller classes, arrays of data, indexes, etc.

I've been on a pretty long optimization kick for a lot of the production applications that are used on a daily basis.  Most applications use an "extended database listing" class that extracts raw data from a mySQL table and provides interfaces to add columns using that base data and sort, format, and highlight the data.  The process works in two phases - the second being an AJAX request to actually deliver the HTML output to the browser.  In choosing to go this route (the originating page now finishes execution faster and displays faster) it's necessary to pass the list object from the originating script to the AJAX display helper script.  It is this object that, depending on the size and data in the list, can become enormous.

Initially I had been using the tried and true serialize() / unserialize() on the object and storing it in the $_SESSION superglobal.  As soon as the object becomes anywhere "unusually" large, the unserialize call will take an exponentially increasing # of seconds to complete.  Not satisfied with this situation I searched and searched for a solution.

One solution I've come across that cuts execution time by 50% is the use of var_export() instead.  var_export() will, by default, output a php parsable representation of the variable passed to it.  In my case, the object being exported was a class.  PHP &gt; 5.1.0 changed the way var_export worked on class objects.  You now have to implement the magic function __set_state() in your class in order to correctly handle a class exported with var_export().  On the other end of the process, where you would normally use unserialize(), now all you do is include the file you exported to.

Here is my implementation of the __set_state() magic function:
[sourcecode language='php']
public static function __set_state($array)
{
    $obj = new cListExtDB;
    foreach($array as $field => $val) {
        $obj->$field = $array[$field];
    }
    return $obj;
}
[/sourcecode]

The following example illustrates the exporting side of this procedure:
[sourcecode language='php']
<?php
$_SESSION['_list_hash'] = $hash;
file_put_contents('_list'.$hash.'.dat', '<?php $__data = '.var_export($object, true).'; ?>');
?>
[/sourcecode]

And in the AJAX helper script, the following example illustrates the importing side of this procedure:
[sourcecode language='php']
<?php
$fname = '_list'.$_SESSION['_list_hash'].'.dat';
if(file_exists($fname)) {
    include($fname);
    unlink($fname);
    $list = $__data;
}
// proceed to operate with $list as it existed when exported in originating script
?>
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date>2008-02-12 12:24:04</wp:post_date>
		<wp:post_date_gmt>2008-02-12 17:24:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-fast-large-megabyte-data-transfer-between-sessions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="serialize"><![CDATA[serialize]]></category>
		<category domain="post_tag" nicename="session"><![CDATA[session]]></category>
		<category domain="post_tag" nicename="unserialize"><![CDATA[unserialize]]></category>
		<category domain="post_tag" nicename="var_export"><![CDATA[var_export]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399970]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2688</wp:comment_id>
			<wp:comment_author><![CDATA[Benjamin A. Shelton | Blog &raquo; Blog Archive &raquo; Links of the Week: September 4th]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.bashelton.com/2009/09/links-of-the-week-september-4/</wp:comment_author_url>
			<wp:comment_author_IP>72.0.44.133</wp:comment_author_IP>
			<wp:comment_date>2009-09-05 00:48:04</wp:comment_date>
			<wp:comment_date_gmt>2009-09-05 05:48:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] of PHP, Perplexed Labs has another post also related to speed. No, this isn&#8217;t exactly arrays (it can be!). It&#8217;s about transferring data into a [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3969</wp:comment_id>
			<wp:comment_author><![CDATA[PHP jQuery AJAX Javascript Long Polling - coderday]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://coderday.com/?p=166</wp:comment_author_url>
			<wp:comment_author_IP>114.80.214.144</wp:comment_author_IP>
			<wp:comment_date>2011-07-07 10:08:11</wp:comment_date>
			<wp:comment_date_gmt>2011-07-07 15:08:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] PHP fast, large (megabyte), data transfer between sessions [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>PHP Error Log Viewer</title>
		<link>http://blog.perplexedlabs.com/2008/02/13/php-error-log-viewer/</link>
		<pubDate>Wed, 13 Feb 2008 15:42:53 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/2008/02/13/php-error-log-viewer/</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Very</strong> simple error_log viewer...

[sourcecode language='php']
<?php
$fname = "./error_log";
if(file_exists($fname)) {
	if($_REQUEST['mode'] == 'del') {
		unlink($fname);
	} else {
		$contents = file_get_contents($fname);
		?>
		<div style="margin-bottom: 1em;"><a href="?mode=del">Delete error_log</a></div>
		<?php
		echo nl2br($contents);
	}
} else {
	echo 'No Errors!';
}
?>
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date>2008-02-13 10:42:53</wp:post_date>
		<wp:post_date_gmt>2008-02-13 15:42:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-error-log-viewer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="error-log"><![CDATA[error log]]></category>
		<category domain="post_tag" nicename="error_log"><![CDATA[error_log]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399972]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>115</wp:comment_id>
			<wp:comment_author><![CDATA[fedmich]]></wp:comment_author>
			<wp:comment_author_email>fedmich@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.fedmich.com/</wp:comment_author_url>
			<wp:comment_author_IP>119.94.3.50</wp:comment_author_IP>
			<wp:comment_date>2008-09-23 00:34:01</wp:comment_date>
			<wp:comment_date_gmt>2008-09-23 05:34:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I was looking for some error_log notifier, or erro_log viewer of all subdirectory, and then some error_log formatter :)
I think that would be useful...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3755</wp:comment_id>
			<wp:comment_author><![CDATA[Babul A. Mukherjee]]></wp:comment_author>
			<wp:comment_author_email>babul@montopolis.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.montopolis.com</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-04-01 03:42:00</wp:comment_date>
			<wp:comment_date_gmt>2011-04-01 03:42:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A great, simple solution for a closed server...  Thanks for posting this!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>PHP garbage collection and memory leaks</title>
		<link>http://blog.perplexedlabs.com/2008/02/25/php-garbage-collection-and-memory-leaks/</link>
		<pubDate>Mon, 25 Feb 2008 17:57:33 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/2008/02/25/php-garbage-collection-and-memory-leaks/</guid>
		<description></description>
		<content:encoded><![CDATA[Been working on a command line script that takes days to finish execution (yes, DAYS).  Unfortunately, it had a healthy flow of memory leaking.  It would fatally crash with your typical "out of memory" error.

I spent hours debugging the potential source - free'd results of mysql queries, unset variables, you name it I tried it.  I kind of gave up and instead chose to add in a "start at" parameter so that I could just re-execute and jump back in to the loop where it crashed last time.

Today, through natural processes of improving functionality and cleaning code, I moved the block of code that was leaking memory into a function so that it could be recycled elsewhere.  <strong>By simply moving the code into a function I suspect PHP now garbage collects after each call and memory no longer hemorrhages from its veins.</strong>

I hope this helps someone else out there!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date>2008-02-25 12:57:33</wp:post_date>
		<wp:post_date_gmt>2008-02-25 17:57:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-garbage-collection-and-memory-leaks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="garbage-collection"><![CDATA[garbage collection]]></category>
		<category domain="post_tag" nicename="memory-leak"><![CDATA[memory leak]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399973]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1068</wp:comment_id>
			<wp:comment_author><![CDATA[Tom Lancaster]]></wp:comment_author>
			<wp:comment_author_email>tom@grubbyconsulting.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.sunopensol.com</wp:comment_author_url>
			<wp:comment_author_IP>58.187.148.182</wp:comment_author_IP>
			<wp:comment_date>2009-03-15 02:00:19</wp:comment_date>
			<wp:comment_date_gmt>2009-03-15 07:00:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[thanks for this insight. You've just saved me a lot of time on a script that I'm using to update my whole database. This technique works.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2689</wp:comment_id>
			<wp:comment_author><![CDATA[Brandon Savage]]></wp:comment_author>
			<wp:comment_author_email>brandon@brandonsavage.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.brandonsavage.net/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.121.250</wp:comment_author_IP>
			<wp:comment_date>2009-09-09 09:33:09</wp:comment_date>
			<wp:comment_date_gmt>2009-09-09 14:33:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This did help me. Thanks for posting it. I did exactly what you did and my application works properly.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2701</wp:comment_id>
			<wp:comment_author><![CDATA[Paul]]></wp:comment_author>
			<wp:comment_author_email>ksadya@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.8.251.113</wp:comment_author_IP>
			<wp:comment_date>2009-10-19 05:31:53</wp:comment_date>
			<wp:comment_date_gmt>2009-10-19 10:31:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This helped... I&#39;m working with objects, so it&#39;s a little different for me.  <br><br>You need to cache objects that are created within a method, where the method&#39;s return value is the result of a function call on the newly created object.<br><br>&lt;pre&gt;<br>class a {<br>  function b() { <br>    $c = new c();<br>    // memory leaking here.<br>    return $c-&gt;d();<br>  }<br>}<br>class c { <br>  function d() { <br>    return 3+5;<br>  }<br>}<br><br>Fixed:<br>class a {<br>  var $objc;<br>  function b() { <br>    // create if not exists, else use cached object.<br>    if( !is_object($this-&gt;objc) ) { <br>      $this-&gt;objc = new c();<br>    }<br>    return $this-&gt;objc-&gt;d();<br>  }<br>}<br>&lt;/pre&gt;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2725</wp:comment_id>
			<wp:comment_author><![CDATA[Paul]]></wp:comment_author>
			<wp:comment_author_email>ksadya@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.8.251.113</wp:comment_author_IP>
			<wp:comment_date>2009-10-19 09:31:53</wp:comment_date>
			<wp:comment_date_gmt>2009-10-19 14:31:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This helped... I&#39;m working with objects, so it&#39;s a little different for me.  <br><br>You need to cache objects that are created within a method, where the method&#39;s return value is the result of a function call on the newly created object.<br><br>&lt;pre&gt;<br>class a {<br>  function b() { <br>    $c = new c();<br>    // memory leaking here.<br>    return $c-&gt;d();<br>  }<br>}<br>class c { <br>  function d() { <br>    return 3+5;<br>  }<br>}<br><br>Fixed:<br>class a {<br>  var $objc;<br>  function b() { <br>    // create if not exists, else use cached object.<br>    if( !is_object($this-&gt;objc) ) { <br>      $this-&gt;objc = new c();<br>    }<br>    return $this-&gt;objc-&gt;d();<br>  }<br>}<br>&lt;/pre&gt;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3267</wp:comment_id>
			<wp:comment_author><![CDATA[Gary Reckard]]></wp:comment_author>
			<wp:comment_author_email>greckard@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.garyreckard.com</wp:comment_author_url>
			<wp:comment_author_IP>75.139.89.69</wp:comment_author_IP>
			<wp:comment_date>2010-09-05 16:03:30</wp:comment_date>
			<wp:comment_date_gmt>2010-09-05 21:03:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow, thank you! This actually solved my problem. I&#39;m importing 30k+ products into an ecommerce system, and was only getting like 100 or so done at a time. I has also tried a method of picking up where the script died, but that wouldn&#39;t be feasible. You rock.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Flickr, RSS, and Ruby</title>
		<link>http://blog.perplexedlabs.com/2008/02/26/flickr-rss-and-ruby/</link>
		<pubDate>Tue, 26 Feb 2008 13:31:30 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/2008/02/26/flickr-rss-and-ruby/</guid>
		<description></description>
		<content:encoded><![CDATA[Flickr is one of my favorite web applications.  Often times, instead of building a photo uploading utility for small web sites I am working on, I will simply integrate the clients' Flickr account into their website, using RSS and the Flickr API.  Here's how I do it.

<strong>Get the RSS Feed
</strong>[sourcecode language="ruby"]
require 'rss'
require 'net/http'
require 'rexml/document'

@flickr_rss = RSS::Parser.parse(open('http://api.flickr.com/services/feeds/photos_public.gne?id=24034605@N04&lang=en-us&format=rss_200').read, false)
[/sourcecode]

Next, I initialize an array that will hold hashes with the values I need for rendering the images in the view.  This will make sense in a minute.

[sourcecode language="ruby"]
@flickr = Array.new
[/sourcecode]

<strong>Use Flickr API to get the URL to the thumbnails
</strong>[sourcecode language="ruby"]
@flickr_rss.items.each do |i|
photo_id = flickr_photo_id(i.link)
url = "http://api.flickr.com/services/rest/?method=flickr.photos.getSizes&api_key=#{your_api_key}&photo_id=#{photo_id}"
flickr_response = REXML::Document.new(Net::HTTP.get_response(URI.parse(url)).body)
flickr_response.elements.each('rsp/sizes/size') do |e|
@flickr << {"title" => i.title, "src" => e.attribute("source"), "link" => i.link} if e.attribute("label").value == "Thumbnail"
end
end

def flickr_photo_id(url)
url.split('/').last
end
[/sourcecode]

So now I have an array of hashes with links to the Thumbnails of each Flickr photo in the RSS feed.  You can modify the above code very easily to get the Small, Medium, Large etc. sizes.

<strong>Render the View</strong>
[sourcecode="ruby"]
<% @flickr.each_with_index do |f, i| -%>
<div align="center"><a href="<%= f['link'] -%>"><img class="img_border" src="<%= f['src'] -%>" border="0" title="<%= f['title'] -%>"/></a></div>
<% end -%>
[/sourcecode]

Check it out <a href="http://www.110collegeandcareer.com/grow/">in action</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date>2008-02-26 08:31:30</wp:post_date>
		<wp:post_date_gmt>2008-02-26 13:31:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>flickr-rss-and-ruby</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="flickr"><![CDATA[flickr]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399974]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Breaking Radio Silence</title>
		<link>http://blog.perplexedlabs.com/2008/03/18/breaking-radio-silence/</link>
		<pubDate>Tue, 18 Mar 2008 20:54:37 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/2008/03/18/breaking-radio-silence/</guid>
		<description></description>
		<content:encoded><![CDATA[It's been a few weeks since our last post, but rest assured we are still committed to this blog.  We started a project that's not really top-secret, but we're keeping it under wraps for now.  In the meantime we have developed a pretty cool framework.  I know the pure Rubyists out there will cringe but it's been nice to do some PHP programming.  I still love Ruby, but in the tech world you have to keep all your skills sharp.

I am still trying to digest everything that's happened with Bear Stearns.  It's very sad on a human level when you think about the people who have lost their jobs and retirement money. On a macro level, what implications does this, and the current credit crisis/dollar weakness mean for the future of America?  I have no idea but it's scary to think about.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2008-03-18 15:54:37</wp:post_date>
		<wp:post_date_gmt>2008-03-18 20:54:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>breaking-radio-silence</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="random"><![CDATA[Random]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SVN Keyword Substitution svn:keywords</title>
		<link>http://blog.perplexedlabs.com/2008/03/18/svn-keyword-substitution/</link>
		<pubDate>Wed, 19 Mar 2008 02:53:56 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/2008/03/18/svn-keyword-substitution/</guid>
		<description></description>
		<content:encoded><![CDATA[Ever see those pretty comments at the top of a source code file under version control via subversion?  It's really rather simple to setup.

Assuming you're past the point where you have a repository with files already under version control, you simply add in wherever you want the substitution to occur the variable name surrounded by $.

[sourcecode language="php"]
/* SVN: $Id$ */
/**
 * Short Description
 *
 * Long Description
 *
 * @package			mypackage
 * @lastmodified	$Date$
 * @modifiedby		$LastChangedBy$
 * @version			$Revision$
 */
[/sourcecode]

Then you run the svn propset command in your working directory:

<blockquote>svn propset svn:keywords "Id Date LastChangedBy Revision" . -R</blockquote>

Remember, you need to set properties to all new files you add, this is NOT done automatically!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date>2008-03-18 21:53:56</wp:post_date>
		<wp:post_date_gmt>2008-03-19 02:53:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>svn-keyword-substitution</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="post_tag" nicename="keyword-substitution"><![CDATA[keyword substitution]]></category>
		<category domain="post_tag" nicename="subversion"><![CDATA[subversion]]></category>
		<category domain="post_tag" nicename="svn"><![CDATA[svn]]></category>
		<category domain="post_tag" nicename="svnkeywords"><![CDATA[svn:keywords]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399977]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mod_rewrite urlencode and special characters</title>
		<link>http://blog.perplexedlabs.com/2008/03/20/mod_rewrite-urlencode-and-special-characters/</link>
		<pubDate>Thu, 20 Mar 2008 19:08:32 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/2008/03/20/mod_rewrite-urlencode-and-special-characters/</guid>
		<description></description>
		<content:encoded><![CDATA[If you're developing a website which uses mod_rewrite rules to redirect to a single point of entry (in which behind the scenes the actual url request gets passed as a query string parameter to "index.php" for example)... something like the following:
<code>
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ index.php?url=$1 [L]
</code>

If you want to be able to hand-off parameters which contain special characters that would normally get urlencoded and urldecoded mod_rewrite will interfere.  The trick is to urlencode the portion of the request URL that needs to preserve special characters TWICE!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date>2008-03-20 14:08:32</wp:post_date>
		<wp:post_date_gmt>2008-03-20 19:08:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mod_rewrite-urlencode-and-special-characters</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="post_tag" nicename="mod_rewrite"><![CDATA[mod_rewrite]]></category>
		<category domain="post_tag" nicename="urlencode"><![CDATA[urlencode]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399978]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2631</wp:comment_id>
			<wp:comment_author><![CDATA[Yury]]></wp:comment_author>
			<wp:comment_author_email>yury@nix.co.il</wp:comment_author_email>
			<wp:comment_author_url>http://www.freebsd.co.il/</wp:comment_author_url>
			<wp:comment_author_IP>80.179.98.214</wp:comment_author_IP>
			<wp:comment_date>2009-07-26 03:59:15</wp:comment_date>
			<wp:comment_date_gmt>2009-07-26 08:59:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I&#39;ve found that approaching that from another angle worked better for me, I&#39;ve made the rewrite rule to rewrite to /index.php/$1 and then parsed $_SREVER[&#39;REQUEST_URI&#39;] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2740</wp:comment_id>
			<wp:comment_author><![CDATA[Yury]]></wp:comment_author>
			<wp:comment_author_email>yury@nix.co.il</wp:comment_author_email>
			<wp:comment_author_url>http://www.freebsd.co.il/</wp:comment_author_url>
			<wp:comment_author_IP>80.179.98.214</wp:comment_author_IP>
			<wp:comment_date>2009-07-26 07:59:15</wp:comment_date>
			<wp:comment_date_gmt>2009-07-26 12:59:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I&#39;ve found that approaching that from another angle worked better for me, I&#39;ve made the rewrite rule to rewrite to /index.php/$1 and then parsed $_SREVER[&#39;REQUEST_URI&#39;] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2928</wp:comment_id>
			<wp:comment_author><![CDATA[Merlone]]></wp:comment_author>
			<wp:comment_author_email>merlone@hotmail.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.250.56.177</wp:comment_author_IP>
			<wp:comment_date>2010-06-18 19:33:23</wp:comment_date>
			<wp:comment_date_gmt>2010-06-19 00:33:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Works perfect! Thanks ! I almost lost my hairs before finding your trick !]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3273</wp:comment_id>
			<wp:comment_author><![CDATA[Hristofor]]></wp:comment_author>
			<wp:comment_author_email>sandh@abv.bg</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>77.70.117.160</wp:comment_author_IP>
			<wp:comment_date>2010-09-09 10:10:51</wp:comment_date>
			<wp:comment_date_gmt>2010-09-09 15:10:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[THANK YOU!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3706</wp:comment_id>
			<wp:comment_author><![CDATA[Hristofor Lukanov]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/forkomarmorko</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2010-09-09 10:09:00</wp:comment_date>
			<wp:comment_date_gmt>2010-09-09 10:09:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[THANK YOU!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4268</wp:comment_id>
			<wp:comment_author><![CDATA[Habkeine]]></wp:comment_author>
			<wp:comment_author_email>habkeine@myws.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-03-22 01:14:00</wp:comment_date>
			<wp:comment_date_gmt>2012-03-22 01:14:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The trick is to urlencode the portion of the request URL that needs to preserve special characters TWICE!Thank you so much!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Suppressing SQL Logs in Rails</title>
		<link>http://blog.perplexedlabs.com/2008/04/09/suppressing-sql-logs-in-rails/</link>
		<pubDate>Wed, 09 Apr 2008 20:12:38 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/2008/04/09/suppressing-sql-logs-in-rails/</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I worked on a project where the Rails logs were filling up way too quickly.  Even though we had log rotation implemented, disk space was filling up fast.  As a short term solution, we wanted to suppress all SQL logging Rails.  Here's what I did.

[sourcecode language="ruby"]
#place this in environment.rb
class ActiveRecord::ConnectionAdapters::OracleAdapter
  def log_info(sql, name, runtime)
  end
end
[/sourcecode]

What, you thought it would be difficult?  This particular code works for Oracle; for MySQL just change the class to extend ActiveRecord::ConnectionAdapters::MysqlAdapter.  For good measure, here's how I rotate logs in Rails:

[sourcecode language="ruby"]
#place this in environment.rb
Rails::Initializer.run do |config|
   config.logger = Logger.new("/path/to/logs/#{RAILS_ENV}.log", 5, 10485760)
end
[/sourcecode]

This will rotate the logs up to 5 times, each file being about 10 megs in size.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date>2008-04-09 15:12:38</wp:post_date>
		<wp:post_date_gmt>2008-04-09 20:12:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>suppressing-sql-logs-in-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399979]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4034</wp:comment_id>
			<wp:comment_author><![CDATA[George]]></wp:comment_author>
			<wp:comment_author_email>george@boost-media.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.onlineinvestingai.com/blog/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-08-16 02:24:00</wp:comment_date>
			<wp:comment_date_gmt>2011-08-16 02:24:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I tried the above for Postgres, but got the following error when starting the server:
superclass mismatch for class PostgreSQLAdapter

The following did work for me:
# Add to config/environments/development.rb
config.log_level = :info

Rails 3.0.7]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>SVN Automatically Setting Properties</title>
		<link>http://blog.perplexedlabs.com/2008/04/09/svn-automatically-setting-properties/</link>
		<pubDate>Wed, 09 Apr 2008 21:20:47 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/2008/04/09/svn-automatically-setting-properties/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>It's quite the pain in the ass to manually propset for each new file added.</p>
<p>Edit the file .subversion/config and scroll down towards the bottom... find the <strong>[miscellany] </strong>block and uncomment the line <strong>enable-auto-props = true</strong></p>
<p>In the group of options below titled <strong>[auto-props] </strong>and add a line like:</p>
<blockquote><p>* = svn:keywords=Id Date LastChangedBy Revision</p></blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2008-04-09 16:20:47</wp:post_date>
		<wp:post_date_gmt>2008-04-09 21:20:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>svn-automatically-setting-properties</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="auto-props"><![CDATA[auto-props]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="enable-auto-props"><![CDATA[enable-auto-props]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="post_tag" nicename="propset"><![CDATA[propset]]></category>
		<category domain="post_tag" nicename="svn"><![CDATA[svn]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399980]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP Daisy Chain Class Method Calls</title>
		<link>http://blog.perplexedlabs.com/2008/04/09/php-daisy-chain-class-method-calls/</link>
		<pubDate>Wed, 09 Apr 2008 21:25:26 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/2008/04/09/php-daisy-chain-class-method-calls/</guid>
		<description></description>
		<content:encoded><![CDATA[The code snippet below shows an interesting technique to daisy chain calls to a particular method without having to implicitly call the <em>parent::method()</em> in the child method.  It takes advantage of php's <strong>__call</strong> and <strong>self </strong>

[sourcecode language='php']
<?php

class b extends a
{
	public function _init()
	{
		echo 'hello from b::_init<br>';
	}
}

class a
{
	public function _init()
	{
		echo 'hello from a::_init<br';
	}
	
	public function __call($n, $a)
	{
		echo 'hello from a::__call<br>';
		call_user_func_array(array($this, '_'.$n), $a);
		call_user_func_array(array(self, '_'.$n), $a);
	}
}

$obj = new b;
$obj->init();

?>
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date>2008-04-09 16:25:26</wp:post_date>
		<wp:post_date_gmt>2008-04-09 21:25:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-daisy-chain-class-method-calls</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="class"><![CDATA[class]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="self"><![CDATA[self]]></category>
		<category domain="post_tag" nicename="__call"><![CDATA[__call]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399981]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Real-time &quot;AJAX&quot; JavaScript Progress Bar</title>
		<link>http://blog.perplexedlabs.com/2008/11/07/real-time-ajax-javascript-progress-bar/</link>
		<pubDate>Fri, 07 Nov 2008 18:05:19 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=43</guid>
		<description></description>
		<content:encoded><![CDATA[UPDATE 2011-01-23: I've revisited this old trick and fixed some bugs some of which were in the comments, so thanks.  The changes are the setTimeout in the parent window's update function (to give the DOM some time to render) and the use of str_pad to force the browser to begin parsing/execution.

I've been developing a stock market screener with some advanced functionality.  Some of the parameters a user might enter, because of their complexity or sheer volume of data required to calculate, would cause the screener to run for considerable amounts of time before returning results.  The opportunity to create a progress bar presented itself.  <strong>EVERY DEVELOPER LOVES CREATING PROGRESS BARS</strong>.

The technique is fairly straightforward.  Here's an overview:
<ol>
	<li>Dynamically create a hidden IFRAME</li>
	<li>Post to the IFRAME</li>
	<li>Backend script outputs (in real-time) individual &lt;SCRIPT&gt; tags to the IFRAME.</li>
	<li>Each &lt;SCRIPT&gt; tag contains a single function call to the parent of the IFRAME ( parent.myFuncName(); )</li>
	<li>Parent JavaScript function updates the status bar with newly passed parameters</li>
</ol>
A bit of background information.  The "processing" thead is initiated when a user hits the 'Screen' button.  It's an AJAX request to a PHP backend.  While executing, for each iteration, it sets status variables in memcache.  These are the variables that our "status" thread will be able to fetch.

<span style="color: #c0c0c0;"><em><strong>Note: </strong>There are a variety of ways I can think of to use this same technique to achieve a real-time progress bar satisfying different situations.  For example, your "processing" thread can be your "status" thread if, for each iteration, it outputs the necessary calls we'll discuss below.  That would allow you to avoid the situation of delivering status data to a seperate thread via memcache (or some other technology).</em></span>

I previously had been using an AJAX long-polling technique to achieve this.  If you're not familiar with AJAX long-polling it's essentially when you make a subsequent AJAX request on completion of the prior request to achieve a simulated, continual, "stream" from a server.  The problem in using this technique for a progress bar is two-fold:
<ol>
	<li>Multiple, continual, repeated requests to a web server.</li>
	<li>The data "stream" is pseudo real-time and is affected by variations in each request's latency.  Not very pretty.</li>
</ol>
All examples below utilize the Prototype JavaScript library.

<strong>Create the hidden IFRAME</strong>
[sourcecode language="jscript"]
// create status iframe
var statusFrame = new Element('iframe', { id: 'statusFrame', name: 'statusFrame' }).hide();
$$('body')[0].appendChild(statusFrame);
[/sourcecode]

<strong>Post to the IFRAME</strong>
[sourcecode language="jscript"]
// create status form
var statusForm = new Element('form', { action: '/stocks/screenstatus', method: 'post', target: 'statusFrame' });
$$('body')[0].appendChild(statusForm);

// post to iframe
statusForm.submit();
[/sourcecode]

<strong>Backend script snippet to output &lt;SCRIPT&gt; tags</strong>
[sourcecode language="php"]
public function screenstatus()
{
        // pad to force the browser to starting parsing/executing
        echo str_pad('&lt;html&gt;&lt;body&gt;', 4096);
	while(1) {
		//status string
		$status = Mcache::get('status');
		
		// how many have been processed
		$c = Mcache::get('c');
		
		// how many results
		$rc = Mcache::get('rc');
		
		// total
		$t = Mcache::get('t');
		
		echo str_pad('&lt;script type=&quot;text/javascript&quot;&gt;parent.updateStatus(&quot;'.$status.'&quot;, '.(int)$c.', '.(int)$rc.', '.(int)$t.');&lt;/script&gt;'.&quot;\n&quot;, 1024);
		flush();
		
		if(($status === false) || ($status === 'canceled') || ($status === 'complete')) {
			break;
		}
		
		usleep(25000);
	}

        echo '&lt;/body&gt;&lt;/html&gt;';
}
[/sourcecode]

<strong>Parent JavaScript function to update progress bar</strong>

I chose to use a div with a background color and a dynamically adjusted width as the visual element for my progress bar.  Initially the width is set to 0.  In each updateStatus() call the width is adjusted to the current % of the whole (which in my case is 675px, the final desired width of the progress bar).

To overlay text I have a 2nd div styled 'position: relative;' with negative 'top' and 'bottom-margin'.  This positions the textual div on top of the progress bar div.
[sourcecode language="css"]
#statusProgressBar {
width: 0px;
height: 29px;
background: #f4f4f4;
}
#statusProgress {
position: relative;
top: -29px;
left: 0;
text-align: center;
width: 675px;
padding-top: 3px;
height: 26px;
margin-bottom: -29px;
color: #00a;
font-size: 10px;
}
[/sourcecode]
[sourcecode language="html"]
&lt;div id=&quot;statusProgressBar&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;statusProgress&quot;&gt;&lt;/div&gt;
[/sourcecode]
[sourcecode language="jscript"]
function updateStatus(status, c, rc, t)
{
	var statusHTML;
	var progressBarWidth;
	
	if(status == 'initializing') {
		$('statusProgressBar').setStyle({ width: '0px' });
		statusHTML = '&lt;span id=&quot;top&quot;&gt;Initializing...&lt;/span&gt;';
	} else if(status == 'canceled') {
		$('statusProgressBar').setStyle({ width: '0px' });
		statusHTML = '&lt;span id=&quot;top&quot;&gt;Canceled... '+number_format(c / t * 100, 2)+'% Complete&lt;/span&gt;';
	} else {
		if(t) {
			statusHTML = '&lt;span id=&quot;top&quot;&gt;'+rc+' result(s) ('+number_format((c ? (rc / c) : 0) * 100, 2)+'%)&lt;/span&gt;&lt;br/&gt;&lt;span id=&quot;bot&quot;&gt;'+c+' of '+t+' processed ('+number_format(c / t * 100, 2)+'%)&lt;/span&gt;';
		} else {
			statusHTML = '&lt;span id=&quot;top&quot;&gt;0 result(s)&lt;/span&gt;';
		}
		progressBarWidth = Math.floor(675 * (c / t));
		$('statusProgressBar').setStyle({ width: progressBarWidth+'px' });
	}
	
        // give the DOM some time to actually render
        setTimeout(function() { $('statusProgress').update(statusHTML); }, 10);
}
[/sourcecode]

You'll notice that the updateStatus() function calls number_format().  It's functionally equivalent to PHP's number_format().  Here is the JavaScript code below:
[sourcecode language="jscript"]
function number_format( number, decimals, dec_point, thousands_sep ) {
    // http://kevin.vanzonneveld.net
    // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +     bugfix by: Michael White (http://getsprink.com)
    // +     bugfix by: Benjamin Lupton
    // +     bugfix by: Allan Jensen (http://www.winternet.no)
    // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
    // +     bugfix by: Howard Yeend
    // *     example 1: number_format(1234.5678, 2, '.', '');
    // *     returns 1: 1234.57     
 
    var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;
    var d = dec_point == undefined ? &quot;.&quot; : dec_point;
    var t = thousands_sep == undefined ? &quot;,&quot; : thousands_sep, s = n &lt; 0 ? &quot;-&quot; : &quot;&quot;;
    var i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + &quot;&quot;, j = (j = i.length) &gt; 3 ? j % 3 : 0;
    
    return s + (j ? i.substr(0, j) + t : &quot;&quot;) + i.substr(j).replace(/(\d{3})(?=\d)/g, &quot;$1&quot; + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : &quot;&quot;);
}
[/sourcecode]

I hope you found some of this code useful.  I welcome comments and criticism!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2008-11-07 13:05:19</wp:post_date>
		<wp:post_date_gmt>2008-11-07 18:05:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>real-time-ajax-javascript-progress-bar</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[ajax]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="iframe"><![CDATA[iframe]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="long-polling"><![CDATA[long polling]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="progress-bar"><![CDATA[progress bar]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399982]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>549</wp:comment_id>
			<wp:comment_author><![CDATA[notarealname]]></wp:comment_author>
			<wp:comment_author_email>mvromans@zonnet.nl</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>84.24.227.186</wp:comment_author_IP>
			<wp:comment_date>2009-01-15 19:40:31</wp:comment_date>
			<wp:comment_date_gmt>2009-01-16 00:40:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This really helped me out! It 'looks' like you need something special creating a progress bar, even if you have Visual Studio. I hope this will work !]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1131</wp:comment_id>
			<wp:comment_author><![CDATA[Erik Oosterwaal]]></wp:comment_author>
			<wp:comment_author_email>posted@precompiled.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>212.178.100.82</wp:comment_author_IP>
			<wp:comment_date>2009-03-20 04:46:11</wp:comment_date>
			<wp:comment_date_gmt>2009-03-20 09:46:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Matt,
I have created something similar, but I'm running into a problem and I'm curious if you experienced this also (and how you solved it). I have a long running process that generates script tags in an iFrame that update the progressbar in the TOP(/parent) frame. The problem is that the JavaScript doesn't seem to get executed because the other iFrame is too busy. In the end the progress bar jumps to 100%, but the in-between steps don't get displayed. The problem is only visible when I really have a large data set (say 800 steps). If I have only 10 steps or so, the updates to the progressbar DO seem to work. BTW. I use IE 7 (not by choice, but the app is used in a corporate environment).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1134</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-03-20 08:23:40</wp:comment_date>
			<wp:comment_date_gmt>2009-03-20 13:23:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Erik,

Could you elaborate a bit on what you meant by "other iframe is too busy"?  How many iframes are there?  What is the other iframe doing?

Thanks for you question.

-Matt]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2378</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>24.103.25.96</wp:comment_author_IP>
			<wp:comment_date>2009-04-29 10:57:09</wp:comment_date>
			<wp:comment_date_gmt>2009-04-29 15:57:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@hoa

Try 'flush();' not ob-flush.  Also make sure you don't have any output buffering enabled before entering the loop.

Finally, add a small sleep delay to the loop 'usleep(25000);']]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2325</wp:comment_id>
			<wp:comment_author><![CDATA[Hoa Pham]]></wp:comment_author>
			<wp:comment_author_email>ihoapm@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>118.68.72.146</wp:comment_author_IP>
			<wp:comment_date>2009-04-27 23:57:09</wp:comment_date>
			<wp:comment_date_gmt>2009-04-28 04:57:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi all, 
It work on FF 2 &amp; IE 6, but IE 7 &amp; FF 3 does not !
:-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2323</wp:comment_id>
			<wp:comment_author><![CDATA[Hoa Pham]]></wp:comment_author>
			<wp:comment_author_email>ihoapm@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>118.68.72.146</wp:comment_author_IP>
			<wp:comment_date>2009-04-27 23:25:39</wp:comment_date>
			<wp:comment_date_gmt>2009-04-28 04:25:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Matt,
I have a prob like Erik. The progress bar only displayed when the task is done. So I can not monitor the progress of task while it running. The code is below:

Back-end php (iframe):
set_time_limit(900);
do{
   my_long_time_task();
   echo "window.parent.update_prg(...);";
   ob_flush();
   usleep(25000);   
}while(!$done);

I am using PHP 5.2.9 - Apache 2.2.11
Thx]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1585</wp:comment_id>
			<wp:comment_author><![CDATA[TrazeK]]></wp:comment_author>
			<wp:comment_author_email>ferguson_am@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.231.221.34</wp:comment_author_IP>
			<wp:comment_date>2009-04-08 14:11:36</wp:comment_date>
			<wp:comment_date_gmt>2009-04-08 19:11:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I think I am experiencing the same problem as Erik. My progress bar is in the top frame. While my process executes, the script tags are printed within the iframe and I use javascript to try and edit an element outside the iframe. I think this solution only works if the progress bar is inside the iframe so everything is updated in real-time. Otherwise everything gets updated after the iframe is finished in the order they were called. It happens so fast it seems like the bar jumped from 0 to 100%. Excellent solution btw, as it pointed me to using the prototype framework.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1586</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-04-08 14:21:10</wp:comment_date>
			<wp:comment_date_gmt>2009-04-08 19:21:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Trazek,

In the example in the post (and how I'm currently using it on my site) the progress bar is in the parent window that contains a single child iframe.  If you look at the javascript code the php script outputs it contains parent.updateStatus(blabla).  The key item here is "parent." which allows a child iframe (or window) to access code and elements of the parent window.  It would be important to note that the code for the updateStatus function also resides in the PARENT.

Hope this helps.

-Matt]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1587</wp:comment_id>
			<wp:comment_author><![CDATA[TrazeK]]></wp:comment_author>
			<wp:comment_author_email>ferguson_am@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.231.221.34</wp:comment_author_IP>
			<wp:comment_date>2009-04-08 14:26:42</wp:comment_date>
			<wp:comment_date_gmt>2009-04-08 19:26:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks. Then perhaps I need to try actually redrawing the progress as in the example rather than just changing the width property per update.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1590</wp:comment_id>
			<wp:comment_author><![CDATA[TrazeK]]></wp:comment_author>
			<wp:comment_author_email>ferguson_am@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.231.221.34</wp:comment_author_IP>
			<wp:comment_date>2009-04-08 16:19:04</wp:comment_date>
			<wp:comment_date_gmt>2009-04-08 21:19:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Matt, one more question. Is this status bar supposed to increment while the iframe is processing the request? If I use debug alert messages, I get all the status calls and the bar increments synchronously but if I take the alerts out, it appears to just to 100%. What could I be doing wrong?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1623</wp:comment_id>
			<wp:comment_author><![CDATA[Anselmo Battisti]]></wp:comment_author>
			<wp:comment_author_email>anselmobattisti@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://battisti.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>189.58.164.32</wp:comment_author_IP>
			<wp:comment_date>2009-04-09 07:47:35</wp:comment_date>
			<wp:comment_date_gmt>2009-04-09 12:47:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thx for your idea, 

I was tring to do something like this but not using flush() unfortunly it's apears impossible :(.

'my soluction was'

 


<em></em>

this is out of iframe

a normal iframe with i use to execute the php functoin and it returns

echo " parent.progress.setProgress(10,'10 of 100');";
flush();

and finaly the js funciton 
var progress = {
	setProgress: function(percent, text)
	{
		if(percent &gt; 100 ) percent = 100;
		$('percent').innerHTML = text; 
		var largura = (percent /100) * parseInt($('container').getStyle('width') .substr(0, 3))-5;
		$('progress').setStyle( { 'width' : largura + "px" });

		if (percent == 100) { 
			$('progress').setStyle({'backgroundColor' : 'green' });
			$('percent').innerHTML = "Processamento Concluído.";
		}
	}
}

works great :)
thx again]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1625</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-04-09 08:15:51</wp:comment_date>
			<wp:comment_date_gmt>2009-04-09 13:15:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Trazek,

Yes, it's a "real-time" status bar, its supposed to update dynamically.

Have you flushed and ended all of PHP's output buffering layers?

Are you flushing output after each iteration?

Is it a browser issue? (what browser are you testing in?)

-Matt]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1631</wp:comment_id>
			<wp:comment_author><![CDATA[TrazeK]]></wp:comment_author>
			<wp:comment_author_email>ferguson_am@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.231.221.34</wp:comment_author_IP>
			<wp:comment_date>2009-04-09 11:58:43</wp:comment_date>
			<wp:comment_date_gmt>2009-04-09 16:58:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for your response Matt. I am indeed buffering after each iteration but what I forgot to mention is I am using classic ASP and not PHP for my backend scripting language. I am following the same logic but now suspect it's something going on with ASP and nothing else. I am going to investigate further. Thanks again.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1632</wp:comment_id>
			<wp:comment_author><![CDATA[TrazeK]]></wp:comment_author>
			<wp:comment_author_email>ferguson_am@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.231.221.34</wp:comment_author_IP>
			<wp:comment_date>2009-04-09 12:54:18</wp:comment_date>
			<wp:comment_date_gmt>2009-04-09 17:54:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorry, I mean flushing, not buffering after each iteration.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1639</wp:comment_id>
			<wp:comment_author><![CDATA[TrazeK]]></wp:comment_author>
			<wp:comment_author_email>ferguson_am@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.231.221.34</wp:comment_author_IP>
			<wp:comment_date>2009-04-09 16:49:14</wp:comment_date>
			<wp:comment_date_gmt>2009-04-09 21:49:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ok, I was able to find my problem and all is well. It has nothing to do with ASP or the way it handles page buffering. The problem was I did not sleep() after each iteration and flush so there was not enough time to display each progress bar update. Now that I pause between update calls, it works as advertised. Thanks again!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2714</wp:comment_id>
			<wp:comment_author><![CDATA[Resources for PHP Webmail &laquo; David Woodfield]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://davidwoodfield.wordpress.com/2009/11/24/resources-for-php-webmail/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.201</wp:comment_author_IP>
			<wp:comment_date>2009-11-24 11:58:16</wp:comment_date>
			<wp:comment_date_gmt>2009-11-24 16:58:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://blog.perplexedlabs.com/2008/11/07/real-time-ajax-javascript-progress-bar/ [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2781</wp:comment_id>
			<wp:comment_author><![CDATA[mtthwkfmn]]></wp:comment_author>
			<wp:comment_author_email>matt@mtthwkfmn.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.65.205.15</wp:comment_author_IP>
			<wp:comment_date>2010-03-28 08:12:24</wp:comment_date>
			<wp:comment_date_gmt>2010-03-28 13:12:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[wow NICE.... :).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3258</wp:comment_id>
			<wp:comment_author><![CDATA[Buzzknow]]></wp:comment_author>
			<wp:comment_author_email>greenhouseprod@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://buzzknow.com</wp:comment_author_url>
			<wp:comment_author_IP>125.165.10.218</wp:comment_author_IP>
			<wp:comment_date>2010-08-14 17:31:46</wp:comment_date>
			<wp:comment_date_gmt>2010-08-14 22:31:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[do you have any demo for this script?<br><br>thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3731</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-01-23 20:58:00</wp:comment_date>
			<wp:comment_date_gmt>2011-01-23 20:58:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Check the update I just posted as I revisited this today :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2323</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Setup Python 2.5, mod_wsgi, and Django 1.0 on CentOS 5 (cPanel)</title>
		<link>http://blog.perplexedlabs.com/2008/11/10/setup-python-25-mod_wsgi-and-django-10-on-centos-5-cpanel/</link>
		<pubDate>Mon, 10 Nov 2008 15:53:56 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Please read the update to this article <a href="http://blog.perplexedlabs.com/2009/11/15/setup-python-2-6-4-mod_wsgi-2-6-and-django-1-1-1-on-centos-5-3-cpanel/">Setup Python 2.6.4, mod_wsgi 2.6, and Django 1.1.1 on CentOS 5.3 (cPanel)</a></strong>

<h3>Installing Python 2.5 dependencies</h3>
<h4>Install sqlite3:</h4>
<blockquote>$ wget http://www.sqlite.org/sqlite-amalgamation-3.6.4.tar.gz
$ tar xvfz sqlite-amalgamation-3.6.4
$ cd sqlite-amalgamation-3.6.4.tar.gz
$ ./configure
$ make
$ make install</blockquote>
<h3>Install Python 2.5</h3>
<h4>Download Python 2.5 source package, unzip, and enter working directory:</h4>
<blockquote>$ cd
$ wget http://python.org/ftp/python/2.5/Python-2.5.tgz
$ tar xvfz Python-2.5.tgz
$ cd Python-2.5</blockquote>
<h4>Configure Python 2.5 so that we're not overwriting the system's python installation:</h4>
<blockquote>$ ./configure --prefix=/opt/python2.5 --with-threads --enable-shared</blockquote>
<h4>Make and install:</h4>
<blockquote>$ make
$ make install</blockquote>
<h4>Add an alias to root's .bash_profile:</h4>
<blockquote>alias python='/opt/python2.5/bin/python'</blockquote>
<h4>Make a symbolic link:</h4>
<blockquote>$ ln -s /opt/python2.5/bin/python /usr/bin/python2.5</blockquote>
<h4>Configure ld to find your shared libs:</h4>
<blockquote>$ cat &gt;&gt; /etc/ld.so.conf.d/opt-python2.5.conf
/opt/python2.5/lib <span style="color: #c0c0c0;">(hit enter)</span>
<span style="color: #c0c0c0;">(hit ctrl-d to return to shell)</span>
$ ldconfig</blockquote>
<h4>Test python 2.5 installation:</h4>
<blockquote>$ python</blockquote>
You should get an interactive Python 2.5 session like:
<blockquote>Python 2.5 (r25:51908, Nov  9 2008, 23:18:24)
[GCC 4.1.2 20071124 (Red Hat 4.1.2-42)] on linux2
Type "help", "copyright", "credits" or "license" for more information.

&gt;&gt;&gt;

<span style="color: #c0c0c0;">Hit ctrl-d to exit</span></blockquote>
<h4>Install setuptools:</h4>
<blockquote>$ cd
$ wget http://pypi.python.org/packages/2.5/s/setuptools/setuptools-0.6c9-py2.5.egg
$ sh setuptools-0.6c9-py2.5.egg --prefix=/opt/python2.5</blockquote>
<h4>Install MySQLdb package:</h4>
<blockquote>$ cd
$ wget http://internap.dl.sourceforge.net/sourceforge/mysql-python/MySQL-python-1.2.2.tar.gz
$ tar xvfz MySQL-python-1.2.2.tar.gz
$ cd MySQL-python-1.2.2
$ python setup.py build
$ python setup.py install</blockquote>
<h4>Verify Python 2.5 Installation:</h4>
<blockquote>$ cd
$ python
Python 2.5 (r25:51908, Nov  9 2008, 23:18:24)
[GCC 4.1.2 20071124 (Red Hat 4.1.2-42)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt;</blockquote>
<h3>Installing mod_wsgi</h3>
<h4>What is mod_wsgi?</h4>
The aim of mod_wsgi is to implement a simple to use Apache module which can host any Python application which supports the Python WSGI interface. The module would be suitable for use in hosting high performance production web sites, as well as your average self managed personal sites running on web hosting services.
<h4>Why mod_wsgi?</h4>
The consensus seems to be that mod_wsgi is the prefered Apache module (as opposed to mod_python).  It's stable, less memory intensive, and faster.
<h4>Configure mod_wsgi to link with Python 2.5 shared libs:</h4>
<blockquote>$ cd /opt/python2.5/lib/python2.5/config
$ ln -s ../../libpython2.5.so .
$ cd
$ wget http://modwsgi.googlecode.com/files/mod_wsgi-2.3.tar.gz
$ tar xvfz mod_wsgi-2.3.tar.gz
$ cd mod_wsgi-2.3
$ ./configure --with-python=/opt/python2.5/bin/python</blockquote>
<h4>Make and install:</h4>
<blockquote>$ make
$ make install</blockquote>
It’s important to read the mod_wsgi docs on building with shared libs - mod_wsgi should compile to around 250kb.
<h4>Confirm that the size of mod_wsgi.so is around 250kb:</h4>
<blockquote>$ ls -Al /usr/local/apache/modules/mod_wsgi.so</blockquote>
<h4>Add mod_wsgi to Apache 2.x:</h4>
With cPanel/WHM you can simply add these lines to your 'Pre-Virtualhost Include' file accessible in WHM:
<blockquote>LoadModule wsgi_module /usr/local/apache/modules/mod_wsgi.so
AddHandler wsgi-script .wsgi</blockquote>
<h3>Setup a Django 1.0 test project</h3>
Create a new user/domain via WHM/cPanel
<h4>Edit users .bash_profile:</h4>
<blockquote>alias python='/opt/python2.5/bin/python'
export PYTHONPATH='$PYTHONPATH:/home/username/sites/domain.com'</blockquote>
<h4>Create a new project directory:</h4>
<blockquote>$ mkdir -p /home/username/sites/domain.com
$ cd /home/username/sites/domain.com
$ svn co http://code.djangoproject.com/svn/django/trunk/ django-trunk
$ ln -s django-trunk/django django
$ mkdir .python-eggs
$ chmod 777 .python-eggs
$ /home/username/sites/domain.com/django/bin/django-admin.py startproject testproject
$ chown -R username: /home/username/sites</blockquote>
<h4>Create your apps .wsgi script:</h4>
<blockquote>$ pico /home/username/public_html/test.wsgi

#!/opt/python2.5/bin/python
import os, sys
sys.path.insert(0,'/home/username/sites/domain.com')
os.environ['DJANGO_SETTINGS_MODULE'] = 'testproject.settings'
os.environ['PYTHON_EGG_CACHE'] = '/home/username/sites/domain.com/.python-eggs'
import django.core.handlers.wsgi
application = django.core.handlers.wsgi.WSGIHandler()

$ chown username: /home/username/public_html/test.wsgi</blockquote>
<h4>Setup a vhost include (as root)</h4>
<blockquote>$ mkdir -p /usr/local/apache/conf/userdata/std/2/username/domain.com
$ pico /usr/local/apache/conf/userdata/std/2/username/domain.com/vhost.conf

&lt;IfModule mod_alias.c&gt;
Alias /robots.txt /home/username/sites/domain.com/testproject/media/robots.txt
Alias /site_media /home/username/sites/domain.com/testproject/media
Alias /admin_media /home/username/sites/domain.com/django/contrib/admin/media
&lt;/IfModule&gt;

&lt;IfModule mod_wsgi.c&gt;
# See the link below for an introduction about this mod_wsgi config.
# http://groups.google.com/group/modwsgi/browse_thread/thread/60cb0ec3041ac1bc/2c547b701c4d74aa

WSGIScriptAlias / /home/username/public_html/test.wsgi
WSGIDaemonProcess username processes=7 threads=1 display-name=%{GROUP}
WSGIProcessGroup username
WSGIApplicationGroup %{GLOBAL} 
&lt;/IfModule&gt;

# This fixes the broken ErrorDocument directive we inherit that breaks auth
# if we use a WSGI app.
ErrorDocument 401 "Authentication Error"
ErrorDocument 403 "Forbidden"

$ /scripts/verify_vhost_includes
$ /scripts/ensure_vhost_includes --user=username</blockquote>
domain.com should now be serving a django site.
<h4>To restart a django instance:</h4>
<blockquote>$ touch ~/public_html/test.wsgi</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2008-11-10 10:53:56</wp:post_date>
		<wp:post_date_gmt>2008-11-10 15:53:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>setup-python-25-mod_wsgi-and-django-10-on-centos-5-cpanel</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="centos"><![CDATA[centos]]></category>
		<category domain="post_tag" nicename="cpanel"><![CDATA[cpanel]]></category>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="post_tag" nicename="mod_wsgi"><![CDATA[mod_wsgi]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>690</wp:comment_id>
			<wp:comment_author><![CDATA[Kwasi]]></wp:comment_author>
			<wp:comment_author_email>kwasi.gyasiagyei@4things.co.za</wp:comment_author_email>
			<wp:comment_author_url>http://www.4things.coza</wp:comment_author_url>
			<wp:comment_author_IP>196.2.124.248</wp:comment_author_IP>
			<wp:comment_date>2009-02-11 12:37:35</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 17:37:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ok, those who maybe having my problem solution ---
$ cp where_ever_python_2.5_is/lib/libpython2.5* /usr/lib]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1081</wp:comment_id>
			<wp:comment_author><![CDATA[teh_tech &raquo; Django on mod_wsgi]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://vodenski.com/tech/?p=13</wp:comment_author_url>
			<wp:comment_author_IP>128.177.27.133</wp:comment_author_IP>
			<wp:comment_date>2009-03-15 23:45:07</wp:comment_date>
			<wp:comment_date_gmt>2009-03-16 04:45:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] thought would surely get me in trouble. My yum setup is pretty botched but more importantly I found someone who had put the whole thing together on CentOS 5 and followed along line by [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>682</wp:comment_id>
			<wp:comment_author><![CDATA[links for 2009-02-09 &laquo; Bloggitation]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://zhesto.wordpress.com/2009/02/10/links-for-2009-02-09/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.254.24</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 02:03:53</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 07:03:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Setup Python 2.5, mod_wsgi, and Django 1.0 on CentOS 5 (cPanel) (tags: sysadmin python mysql django apache) [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>668</wp:comment_id>
			<wp:comment_author><![CDATA[Getting Started with Django and Python - First Impressions | Perplexed Labs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.perplexedlabs.com/2009/02/08/getting-started-with-django-and-python-first-impressions/</wp:comment_author_url>
			<wp:comment_author_IP>69.9.189.223</wp:comment_author_IP>
			<wp:comment_date>2009-02-08 23:16:01</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 04:16:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] a previous post I discussed installing Django and getting it to play nice with Apache 2 on a CentOS 5/cPanel server. Updating to Django 1.02 was easy, simply do an svn up in your django-trunk directory, if you [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>687</wp:comment_id>
			<wp:comment_author><![CDATA[Kwasi]]></wp:comment_author>
			<wp:comment_author_email>kwasi.gyasiagyei@4things.co.za</wp:comment_author_email>
			<wp:comment_author_url>http://www.4things.coza</wp:comment_author_url>
			<wp:comment_author_IP>196.35.158.178</wp:comment_author_IP>
			<wp:comment_date>2009-02-11 09:36:40</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 14:36:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[After going through Python set up part, everything works 100% untill I try running python

I get the following

[root@websitematrixone Python-2.5]# alias python='/opt/python2.5/bin/python'
[root@websitematrixone Python-2.5]# ln -s /opt/python2.5/bin/python /usr/bin/python2.5
[root@websitematrixone Python-2.5]# cat &gt;&gt; /etc/ld.so.conf.d/opt-python2.5.conf
/opt/python2.5/lib
[root@websitematrixone Python-2.5]# idconfig
-bash: idconfig: command not found
[root@websitematrixone Python-2.5]# ldconfig
[root@websitematrixone Python-2.5]# python
/opt/python2.5/bin/python: error while loading shared libraries: libpython2.5.so.1.0: cannot open shared object file: No such file or directory

what is up with that? I'm very new to this stuff]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1135</wp:comment_id>
			<wp:comment_author><![CDATA[Django and Python First Impressions - Part II | Perplexed Labs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.perplexedlabs.com/2009/03/20/django-and-python-first-impressions-part-ii/</wp:comment_author_url>
			<wp:comment_author_IP>69.9.189.223</wp:comment_author_IP>
			<wp:comment_date>2009-03-20 10:05:55</wp:comment_date>
			<wp:comment_date_gmt>2009-03-20 15:05:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] spent more time with Django the past couple days. Read my installation guide and my first impressions to get caught up. I wanted to address a couple issues I came across as I [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2598</wp:comment_id>
			<wp:comment_author><![CDATA[Nick]]></wp:comment_author>
			<wp:comment_author_email>nboucart@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.redrobinsoftware.net/blog</wp:comment_author_url>
			<wp:comment_author_IP>213.224.27.206</wp:comment_author_IP>
			<wp:comment_date>2009-05-19 03:30:43</wp:comment_date>
			<wp:comment_date_gmt>2009-05-19 08:30:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for this tutorial, it really helped me to get up to speed quickly.<br><br>I did run into 1 issue that caused me some headaches: after deployment of my django app, I got a server error 500. The logs showed me  ImportError: /opt/python2.5/lib/python2.5/lib-dynload/time.so: failed to map segment from shared object: Permission denied<br><br>After a lot of googling, I found references that if SELinux (I have no real idea what that is..) is enabled, you can run into such problems. Via <a href="http://sysdigg.blogspot.com/2008/01/how-to-disable-selinux-in-centos-5.html" rel="nofollow">http://sysdigg.blogspot.com/2008/01/how-to-disable-selinux-in-centos-5.html</a> I found out how to disable SELinux, and after that, it worked fine.<br><br>Thanks again.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2385</wp:comment_id>
			<wp:comment_author><![CDATA[Trevor]]></wp:comment_author>
			<wp:comment_author_email>saturdayplace@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://saturdayplace.com</wp:comment_author_url>
			<wp:comment_author_IP>65.121.182.3</wp:comment_author_IP>
			<wp:comment_date>2009-04-29 16:50:09</wp:comment_date>
			<wp:comment_date_gmt>2009-04-29 21:50:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@gareth - apparently apxs is part of httpd-devel.  If you do a yum install httpd-devel, and then the ./configure --with-python=/your/python, you should be good to go.  Ran into the same problem just today.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2377</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>24.103.25.96</wp:comment_author_IP>
			<wp:comment_date>2009-04-29 10:54:26</wp:comment_date>
			<wp:comment_date_gmt>2009-04-29 15:54:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@gareth

it looks like you don't have the apache extension tool (APXS) installed.  have you previously installed apache?

i suppose it isn't obvious that this is post assumes that you have apache running correctly on top of centos.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2339</wp:comment_id>
			<wp:comment_author><![CDATA[gareth]]></wp:comment_author>
			<wp:comment_author_email>gmill20@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.45.233.128</wp:comment_author_IP>
			<wp:comment_date>2009-04-28 10:47:20</wp:comment_date>
			<wp:comment_date_gmt>2009-04-28 15:47:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am running into this problem when trying to install the mod_wsgi, eveything else has worked fine.


[root@localhost mod_wsgi-2.3]# ./configure --with-python=/opt/python2.5/bin/python
checking for apxs2... no
checking for apxs... no
checking Apache version... ./configure: line 1695: apxs: command not found
./configure: line 1695: apxs: command not found
./configure: line 1696: /: is a directory

./configure: line 1826: apxs: command not found
configure: creating ./config.status
config.status: error: cannot find input file: Makefile.in]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2627</wp:comment_id>
			<wp:comment_author><![CDATA[ejlee]]></wp:comment_author>
			<wp:comment_author_email>hdformat@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>115.95.159.100</wp:comment_author_IP>
			<wp:comment_date>2009-07-18 08:01:22</wp:comment_date>
			<wp:comment_date_gmt>2009-07-18 13:01:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[yum install httpd-dev*]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2339</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2635</wp:comment_id>
			<wp:comment_author><![CDATA[Seth]]></wp:comment_author>
			<wp:comment_author_email>seth@sethdavis.net</wp:comment_author_email>
			<wp:comment_author_url>http://blog.curiasolutions.com/</wp:comment_author_url>
			<wp:comment_author_IP>75.54.237.175</wp:comment_author_IP>
			<wp:comment_date>2009-07-28 19:11:20</wp:comment_date>
			<wp:comment_date_gmt>2009-07-29 00:11:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nick,<br><br>SELinux is a security & permissions manager. Disabling it entirely is not recommended. You should instead become familiar enough with its settings to be able to tell it how to give your WSGI environment access to the necessary Python libs.<br><br>Running something like: "restorecon -R -v /opt/python2.5/lib" might do the trick (although this also might not be an entirely foolproof solution).<br><br>Cheers!<br>Seth]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2598</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2649</wp:comment_id>
			<wp:comment_author><![CDATA[grahamd]]></wp:comment_author>
			<wp:comment_author_email>graham.dumpleton@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>121.44.108.121</wp:comment_author_IP>
			<wp:comment_date>2009-08-04 18:06:23</wp:comment_date>
			<wp:comment_date_gmt>2009-08-04 23:06:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[FWIW, broken ErrorDocument directives aren&#39;t likely because of running a WSGI application, it is probably because of how you defined where the error documents live. The same issue will apply with any system where you mount it on root of web server.<br><br>What you shouldn&#39;t do is put error documents in normal static document root, with no other configuration, as application mounted at root will take precedence. To expose error documents again, you need to use Alias directive to map the the error documents at the explicit URL mentioned in ErrorDocument directive. Use of Alias directive will take precedence over application mounted at root and so will still be found.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2653</wp:comment_id>
			<wp:comment_author><![CDATA[links for 2009-08-05 &laquo; Object neo = neo Object]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://neobject.wordpress.com/2009/08/06/links-for-2009-08-05/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.201</wp:comment_author_IP>
			<wp:comment_date>2009-08-05 23:30:51</wp:comment_date>
			<wp:comment_date_gmt>2009-08-06 04:30:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Setup Python 2.5, mod_wsgi, and Django 1.0 on CentOS 5 (cPanel) | Perplexed Labs (tags: python centos)      This entry was written by bairos, posted on August 6, 2009 at 1:30 am, filed under delicious-daily. Bookmark the permalink. Follow any comments here with the RSS feed for this post. Post a comment or leave a trackback: Trackback URL.    &laquo; links for&nbsp;2009-08-02 [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2683</wp:comment_id>
			<wp:comment_author><![CDATA[Llanilek]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://openid.claimid.com/llanilek</wp:comment_author_url>
			<wp:comment_author_IP>81.154.17.111</wp:comment_author_IP>
			<wp:comment_date>2009-08-24 06:24:18</wp:comment_date>
			<wp:comment_date_gmt>2009-08-24 11:24:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I&#39;ve been looking around for something like this for ages...<br><br>only problems i&#39;ve been running into is even though we give alias to python2.5 django still seems to be picking up python2.4 as default... which is really strange.<br><br>also it would be nice to explain how to get a single install of django to run rather than having to install multiple django-trunks on each account.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2685</wp:comment_id>
			<wp:comment_author><![CDATA[peter]]></wp:comment_author>
			<wp:comment_author_email>peter.kleynjan@quantis.nl</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>194.109.231.140</wp:comment_author_IP>
			<wp:comment_date>2009-08-29 10:16:15</wp:comment_date>
			<wp:comment_date_gmt>2009-08-29 15:16:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A really really really big thank you! This probably saved me one day++ of work. <br>-Peter]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2708</wp:comment_id>
			<wp:comment_author><![CDATA[Setup Python 2.6.4, mod_wsgi 2.6, and Django 1.1.1 on CentOS 5.3 (cPanel) | Perplexed Labs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com/2009/11/15/setup-python-2-6-4-mod_wsgi-2-6-and-django-1-1-1-on-centos-5-3-cpanel/</wp:comment_author_url>
			<wp:comment_author_IP>69.9.189.223</wp:comment_author_IP>
			<wp:comment_date>2009-11-15 15:37:40</wp:comment_date>
			<wp:comment_date_gmt>2009-11-15 20:37:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This is an update to my previous how-to Setup Python 2.5, mod_wsgi, and Django 1.0 on CentOS 5 (cPanel). [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2697</wp:comment_id>
			<wp:comment_author><![CDATA[alex_davies]]></wp:comment_author>
			<wp:comment_author_email>alex@davz.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>87.86.11.163</wp:comment_author_IP>
			<wp:comment_date>2009-09-17 11:32:52</wp:comment_date>
			<wp:comment_date_gmt>2009-09-17 16:32:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[On RHEL5/CentOS5 you need to install zlib-devel and compile python 2.5 with it, i.e.<br><br>./configure --prefix=/opt/python2.5 --with-threads --enable-shared --with-zlib=/usr/include<br><br>Otherwise you can&#39;t install setuptools.<br><br>Alex]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2700</wp:comment_id>
			<wp:comment_author><![CDATA[WordPress to Django+PostgreSQL, part 3: Installing Apache, Python 2.6, psycopg2, and mod_wsgi]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thebuild.com/blog/2009/10/17/wordpress-to-djangopostgresql-part-3-installing-apache-python-2-6-psycopg2-and-mod_wsgi/</wp:comment_author_url>
			<wp:comment_author_IP>216.17.104.163</wp:comment_author_IP>
			<wp:comment_date>2009-10-17 18:09:42</wp:comment_date>
			<wp:comment_date_gmt>2009-10-17 23:09:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] a solution exists: Doing a parallel installation of Python. I&#8217;m deeply indebted to this posting from Perplexed Labs for guidance on the [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2744</wp:comment_id>
			<wp:comment_author><![CDATA[alex_davies]]></wp:comment_author>
			<wp:comment_author_email>alex@davz.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>87.86.11.163</wp:comment_author_IP>
			<wp:comment_date>2009-09-17 15:32:52</wp:comment_date>
			<wp:comment_date_gmt>2009-09-17 20:32:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[On RHEL5/CentOS5 you need to install zlib-devel and compile python 2.5 with it, i.e.<br><br>./configure --prefix=/opt/python2.5 --with-threads --enable-shared --with-zlib=/usr/include<br><br>Otherwise you can&#39;t install setuptools.<br><br>Alex]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2760</wp:comment_id>
			<wp:comment_author><![CDATA[Venky]]></wp:comment_author>
			<wp:comment_author_email>venky@miglu.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.venkysblog.com/</wp:comment_author_url>
			<wp:comment_author_IP>113.199.159.38</wp:comment_author_IP>
			<wp:comment_date>2010-02-20 05:44:16</wp:comment_date>
			<wp:comment_date_gmt>2010-02-20 10:44:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice Post, I have a similar Post at:<br><br><a href="http://www.venkysblog.com/2009/12/centos-python-wsgi-dango/" rel="nofollow">http://www.venkysblog.com/2009/12/centos-python...</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2775</wp:comment_id>
			<wp:comment_author><![CDATA[nerdydork]]></wp:comment_author>
			<wp:comment_author_email>dustin@davisvillage.com</wp:comment_author_email>
			<wp:comment_author_url>http://NerdyDork.com</wp:comment_author_url>
			<wp:comment_author_IP>65.44.116.170</wp:comment_author_IP>
			<wp:comment_date>2010-03-17 16:57:57</wp:comment_date>
			<wp:comment_date_gmt>2010-03-17 21:57:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I&#39;ve really screwed something up. I can get my apps to run. I&#39;ve installed python2.6. I can get a test WSGI app to run, but I keep getting &#39;Premature end of script headers&#39; and &#39;Segmentation fault&#39; errors.<br><br>I suspect the answer is here: <a href="http://code.google.com/p/modwsgi/wiki/FrequentlyAskedQuestions" rel="nofollow">http://code.google.com/p/modwsgi/wiki/Frequentl...</a><br><br>But I&#39;m not sure how to make sure Apache & my app are looking at the same python instance.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2776</wp:comment_id>
			<wp:comment_author><![CDATA[setup django on centos5 with mod_wsgi (based on perplexed labs) &laquo; a day in the life of an idiot]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://llanilek.wordpress.com/2010/03/18/setup-django-on-centos5-with-mod_wsgi-based-on-perplexed-labs/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.69.24</wp:comment_author_IP>
			<wp:comment_date>2010-03-18 16:19:19</wp:comment_date>
			<wp:comment_date_gmt>2010-03-18 21:19:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This script basically takes away the time taken to set up the django project [See Perplexed Labs]. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2777</wp:comment_id>
			<wp:comment_author><![CDATA[Llanilek]]></wp:comment_author>
			<wp:comment_author_email>neil@streamflame.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>86.186.31.91</wp:comment_author_IP>
			<wp:comment_date>2010-03-18 21:24:08</wp:comment_date>
			<wp:comment_date_gmt>2010-03-19 02:24:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is great, it&#39;s helped me many a time to get set up with my old set up on cpanel it works perfectly...<br><br>I&#39;ve written a python application just to run through the latter part of the setup "Setup a Django 1.0 test project" you can view it at my blog<br><br><a href="http://llanilek.wordpress.com/2010/03/18/setup-django-on-centos5-with-mod_wsgi-based-on-perplexed-labs/" rel="nofollow">http://llanilek.wordpress.com/2010/03/18/setup-...</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2778</wp:comment_id>
			<wp:comment_author><![CDATA[Llanilek]]></wp:comment_author>
			<wp:comment_author_email>neil@streamflame.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>86.186.31.91</wp:comment_author_IP>
			<wp:comment_date>2010-03-18 23:18:46</wp:comment_date>
			<wp:comment_date_gmt>2010-03-19 04:18:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[you can check the versions easily. If you manage to get a django error with debug mode on it will tell you the version that python is running on. If you go into the terminal and type python as a command with no details it will start the python interpreter which will confirm what version your are running on by default (apache will be using default unless you set it to otherwise)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2775</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2779</wp:comment_id>
			<wp:comment_author><![CDATA[Neil]]></wp:comment_author>
			<wp:comment_author_email>neilp@cs.stanford.edu</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>171.66.52.230</wp:comment_author_IP>
			<wp:comment_date>2010-03-27 04:15:35</wp:comment_date>
			<wp:comment_date_gmt>2010-03-27 09:15:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello,<br><br>I followed your instructions for upgrading python, they worked great! However, I&#39;ve found that I need to revert back to my installed python version on centos. How do I undo the changes for python?<br><br>Thanks,<br>Neil]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2832</wp:comment_id>
			<wp:comment_author><![CDATA[Claire]]></wp:comment_author>
			<wp:comment_author_email>claire.renard@igh.cnrs.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.83.85.118</wp:comment_author_IP>
			<wp:comment_date>2010-06-01 08:11:32</wp:comment_date>
			<wp:comment_date_gmt>2010-06-01 13:11:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I wanted to mean the same problem  as Scott, sorry...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2831</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2831</wp:comment_id>
			<wp:comment_author><![CDATA[Claire]]></wp:comment_author>
			<wp:comment_author_email>claire.renard@igh.cnrs.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.83.85.118</wp:comment_author_IP>
			<wp:comment_date>2010-06-01 08:10:34</wp:comment_date>
			<wp:comment_date_gmt>2010-06-01 13:10:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Matt and all,<br><br>I have the same problem as Matt for the installation of easy_install (on RH5).<br>Does somebody has a clue to solve the pb ?<br>Thanks in advance<br><br>Claire]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2824</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2828</wp:comment_id>
			<wp:comment_author><![CDATA[ElGuapo]]></wp:comment_author>
			<wp:comment_author_email>yevmail@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://mavericktraveler.com/blog</wp:comment_author_url>
			<wp:comment_author_IP>201.62.157.58</wp:comment_author_IP>
			<wp:comment_date>2010-05-11 14:14:56</wp:comment_date>
			<wp:comment_date_gmt>2010-05-11 19:14:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great article.  Just followed this steps to mine installation.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2825</wp:comment_id>
			<wp:comment_author><![CDATA[Scott]]></wp:comment_author>
			<wp:comment_author_email>scott@elevatedventures.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>154.5.37.221</wp:comment_author_IP>
			<wp:comment_date>2010-05-06 01:29:35</wp:comment_date>
			<wp:comment_date_gmt>2010-05-06 06:29:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,<br><br>I was able to get setuptools installed by copying /usr/bin/python2.6.4 to /usr/bin/python2.6 so the .egg file was able to run python2.6<br><br>Now when I try to build MySQLdb I get a huge list of errors that ends in:<br><br>_mysql.c:2099: warning: implicit declaration of function ‘mysql_free_result’<br>_mysql.c:2099: error: ‘_mysql_ResultObject’ has no member named ‘result’<br>_mysql.c: At top level:<br>_mysql.c:2330: error: ‘_mysql_ConnectionObject’ has no member named ‘open’<br>_mysql.c:2337: error: ‘_mysql_ConnectionObject’ has no member named ‘converter’<br>_mysql.c:2344: error: ‘_mysql_ConnectionObject’ has no member named ‘connection’<br>_mysql.c:2351: error: ‘_mysql_ConnectionObject’ has no member named ‘connection’<br>_mysql.c:2358: error: ‘_mysql_ConnectionObject’ has no member named ‘connection’<br>_mysql.c:2421: error: ‘_mysql_ResultObject’ has no member named ‘converter’<br>_mysql.c:2421: error: initializer element is not constant<br>_mysql.c:2421: error: (near initialization for ‘_mysql_ResultObject_memberlist[0].offset’)<br>_mysql.c: In function ‘_mysql_ConnectionObject_getattr’:<br>_mysql.c:2443: error: ‘_mysql_ConnectionObject’ has no member named ‘open’<br>error: command &#39;gcc&#39; failed with exit status 1]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2824</wp:comment_id>
			<wp:comment_author><![CDATA[Scott]]></wp:comment_author>
			<wp:comment_author_email>scott@elevatedventures.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>154.5.37.221</wp:comment_author_IP>
			<wp:comment_date>2010-05-05 02:09:26</wp:comment_date>
			<wp:comment_date_gmt>2010-05-05 07:09:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Matt,<br><br>Thanks for writing this guide, looks like it&#39;s helped a lot of people!<br><br>I&#39;ve gotten as far as trying to install setuptools, but I get this error:<br><br># sh setuptools-0.6c11-py2.6.egg --prefix=/opt/python2.6.4<br>setuptools-0.6c11-py2.6.egg: line 3: exec: python2.6: not found<br><br>I tried opening the .egg in vim and replacing the python2.6 in line 3 with python2.6.4 but that seems to have outright broken the .egg and now I have .yoke all over my .lap:<br><br># sh setuptools-0.6c11-py2.6.egg --prefix=/opt/python2.6.4<br>Traceback (most recent call last):<br>  File "&lt;string&gt;", line 1, in &lt;module&gt;<br>ImportError: No module named setuptools.command.easy_install<br><br>Is there anything that occurs to you that might get past this hurdle? Has anyone else encountered/surmounted this obstacle?<br><br>Thanks in advance to whoever may be intrepid enough to shed some light on me.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4116</wp:comment_id>
			<wp:comment_author><![CDATA[Another Python/Mercurial/mod_wsgi on CentOS HOWTO &#8211; 2/2 | Kev&#039;s Big Log]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.zygonia.net/2011/10/23/another-pythonmercurialmod_wsgi-on-centos-howto-22/</wp:comment_author_url>
			<wp:comment_author_IP>217.69.41.34</wp:comment_author_IP>
			<wp:comment_date>2011-10-23 11:01:15</wp:comment_date>
			<wp:comment_date_gmt>2011-10-23 16:01:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Setup Python 2.5, mod_wsgi, and Django 1.0 on CentOS 5 (cPanel) [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4025</wp:comment_id>
			<wp:comment_author><![CDATA[Configure mod_wsgi with Apache for running Django project &laquo; Here is What I Saw and What I Learned]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://b2ctransfer.wordpress.com/2011/08/09/configure-mod_wsgi-with-apache-for-running-django-project/</wp:comment_author_url>
			<wp:comment_author_IP>216.151.210.19</wp:comment_author_IP>
			<wp:comment_date>2011-08-09 15:56:23</wp:comment_date>
			<wp:comment_date_gmt>2011-08-09 20:56:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; http://blog.perplexedlabs.com/2008/11/10/setup-python-25-mod_wsgi-and-django-10-on-centos-5-cpanel/ [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3822</wp:comment_id>
			<wp:comment_author><![CDATA[Santosh]]></wp:comment_author>
			<wp:comment_author_email>santosh.surabi@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-05-24 07:00:00</wp:comment_date>
			<wp:comment_date_gmt>2011-05-24 07:00:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks ejlee.. that worked..  ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2627</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3847</wp:comment_id>
			<wp:comment_author><![CDATA[[Python] 10分でCentOS+mod_wsgi+Django &laquo; rnsk Labs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.rnsk.net/blog/python-10%e5%88%86%e3%81%a7centosmod_wsgidjango/</wp:comment_author_url>
			<wp:comment_author_IP>112.78.120.120</wp:comment_author_IP>
			<wp:comment_date>2011-05-30 16:32:09</wp:comment_date>
			<wp:comment_date_gmt>2011-05-30 21:32:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] ・ウェブ開発者のための、1時間でできるLAMP環境構築術（CentOS編） ・Setup Python 2.5, mod_wsgi, and Django 1.0 on CentOS 5 (cPanel) ・[Django][mod_wsgi][CentOS] CentOS+mod_wsgiでDjangoを動かす [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3516</wp:comment_id>
			<wp:comment_author><![CDATA[Drija &raquo; Archive &raquo; CentOS: revert python version back to original]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://drija.com/centos/34824/centos-revert-python-version-back-to-original/</wp:comment_author_url>
			<wp:comment_author_IP>69.163.245.100</wp:comment_author_IP>
			<wp:comment_date>2010-11-11 14:00:16</wp:comment_date>
			<wp:comment_date_gmt>2010-11-11 19:00:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] installed python 2.6 using the instructions here on CentOS 5.4. However I realized it was a bad move and I need to revert back to 2.4, which was [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3975</wp:comment_id>
			<wp:comment_author><![CDATA[Bleh]]></wp:comment_author>
			<wp:comment_author_email>bleh@blah.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-07-13 17:12:00</wp:comment_date>
			<wp:comment_date_gmt>2011-07-13 17:12:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ yum -y install mysql-devel]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2825</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4032</wp:comment_id>
			<wp:comment_author><![CDATA[mercurial updated, mod_wsgi runs old version - Admins Goodies]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://adminsgoodies.com/mercurial-updated-mod_wsgi-runs-old-version/</wp:comment_author_url>
			<wp:comment_author_IP>64.90.55.54</wp:comment_author_IP>
			<wp:comment_date>2011-08-13 14:09:35</wp:comment_date>
			<wp:comment_date_gmt>2011-08-13 19:09:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] have a VPS with Centos 5.5, installed Python 2.6 following Setup Python 2.5, mod_wsgi, and Django 1.0 on CentOS 5 (cPanel) tutorial and hg 1.6 via [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Remove Firefox Link Outline</title>
		<link>http://blog.perplexedlabs.com/2008/11/11/remove-firefox-link-outline/</link>
		<pubDate>Tue, 11 Nov 2008 18:15:06 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=62</guid>
		<description></description>
		<content:encoded><![CDATA[Add these rules to your stylesheet to remove the dotted border that firefox places around (active) links.

[sourcecode language='css']
/* remove firefox link outline */
a { outline: none; }
:-moz-any-link:focus { outline: none; }
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2008-11-11 13:15:06</wp:post_date>
		<wp:post_date_gmt>2008-11-11 18:15:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>remove-firefox-link-outline</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="firefox"><![CDATA[firefox]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399984]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3486</wp:comment_id>
			<wp:comment_author><![CDATA[Phil]]></wp:comment_author>
			<wp:comment_author_email>phil@philbuilt.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.189.170.97</wp:comment_author_IP>
			<wp:comment_date>2010-10-23 14:38:22</wp:comment_date>
			<wp:comment_date_gmt>2010-10-23 19:38:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great! I reference this all the time....Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>JavaScript Event Handler</title>
		<link>http://blog.perplexedlabs.com/2008/11/12/javascript-event-handler/</link>
		<pubDate>Wed, 12 Nov 2008 15:34:17 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=65</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>2008-11-16: Updated the source code to remove the Prototype dependency</strong>

This is a very simple, lightweight, object to manage the handling of events in JavaScript.  Events can be arbitrarily defined and identified based on calls to listen().  Multiple actions can be handled per event and events can be triggered arbitrarily at any point in your code with calls to trigger().

[sourcecode language='jscript']
var EventHandler = {
	events: [],
	actions: [],
	index: {}
};

EventHandler.listen = function(evt, action)
{
	var idx = this.events.length;
	
	// add a new event entry if one doesn't exist already
	if(typeof(this.index[evt]) == 'undefined') {
		this.events[idx] = evt;
		this.index[evt] = idx;
		this.actions[idx] = [];
	}
	
	// add to the list of actions for this event
	this.actions[idx][this.actions[idx].length] = action;
};

EventHandler.trigger = function(evt, args)
{
	var idx = this.index[evt];
	
	if(typeof(idx) != 'undefined') {
		// cycle and call the actions for this event
		for(var i = 0, len = this.actions[idx].length; i < len; ++i) {
			action = this.actions[idx][i];
			action(args);
		}
	}
};

/*
EventHandler.listen('test', function() { alert('Testing Event Handler'); });
EventHandler.trigger('test');
*/
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date>2008-11-12 10:34:17</wp:post_date>
		<wp:post_date_gmt>2008-11-12 15:34:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript-event-handler</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="event-handler"><![CDATA[event handler]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399985]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>440</wp:comment_id>
			<wp:comment_author><![CDATA[dongyuwei]]></wp:comment_author>
			<wp:comment_author_email>dongyuwei@neusoft.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>124.93.222.11</wp:comment_author_IP>
			<wp:comment_date>2008-12-24 22:58:51</wp:comment_date>
			<wp:comment_date_gmt>2008-12-25 03:58:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[removeEvent]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Converting from Prototype to jQuery</title>
		<link>http://blog.perplexedlabs.com/2008/11/16/converting-from-prototype-to-jquery/</link>
		<pubDate>Mon, 17 Nov 2008 02:52:47 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=68</guid>
		<description></description>
		<content:encoded><![CDATA[Let me start off by saying I absolutely love Prototype.  When a friend showed me how much it helped with writing cross-browser compatible code, I was an instant fan.

Over the years of being a Prototype user I paid close attention to the many posts about why X is a better framework than Y.  I had always planned on at least TRYING another framework at some point to see what all the fuss was about.

Initially what attracted me to jQuery was it's compactness.  It doesn't have separately defined classes for each component, like Prototype.  There's one point of entry and most everything revolves around DOM elements.  There's no distinction between selecting a single or multiple DOM element(s) and, because jQuery only uses a selector syntax, you don't get confused whether the parameter passed is an ID, class, etc.

Furthermore, I never really liked having to use $ for single selection and $$ for multiple selections in Prototype.  Relatively speaking, with jQuery I find that performing actions on multiple DOM elements is easier.  

Chaining is really where jQuery shines.  It reminds me of using the 'with' construct in Visual Basic back in the day.  "This is the object that I want to perform actions on... do this, that, and this... thanks!".  

However, unlike Prototype where one could test for the existence of an object by:

[sourcecode language='jscript']
if($('objectID')) {
// do something
}
[/sourcecode]

In jQuery it isn't quite so intuitive.  Since all jQuery instances are collections of elements, you test for the existence of an element by checking its length property:

[sourcecode language='jscript']
if(jQuery('#objectId').length == 1) {
// do something
}
[/sourcecode]

In jQuery, binding to events is also very intuitive.  Combined with the power of chaining adding event handling to multiple objects is ridiculously simple.  And, because the code executed in your event callback has the context of the object that triggered the event, you can (more easily than bindAsEventListener in Prototype) just access the object within the callback via 'this'.

This brings me to one issue that did initially cause some conversion conflict.  Prototype does a good job of automatically extending standard objects, objects returned, and parameters passed.  With jQuery, you have to get used to 'get()'ing the root DOM element if you need to manipulate it and likewise, extending a root DOM element to a full fledged jQuery instance (such as 'jQuery(this)') if you want to manipulate it via jQuery.

Another primary reason why I switched to jQuery is because it has built in support for basic animations.  Transitional animations give that extra something to a web app.  Having to hand-code them isn't pleasant.  Obviously Prototype has scriptaculous, but thats a huge size (and therefor performance) commitment to make for just a simple fade, no?

jQuery was built to be extensible.  It seems to me that Prototype intended to be the "be all, end all" solution to your JavaScript woes.  jQuery takes a more sensible approach - it provides the fundamental structure and handles the most-desired scenarios.  If there's something it doesn't do out of the box there's probably a plugin available that does.  Most likely someone has come across the same shortcoming already and written a plugin to fulfill the need.

Some plugins I ended up needing immediately were:

<ul>
	<li>Date picker</li>
	<li>CSS Extraction from Ajax responses (IE issue)</li>
	<li>Ancestry (to mimic Prototype's descendantOf())</li>
	<li>DOM element creation (to mimic the functionality of Prototype's Element class)</li>
</ul>

I prefer to create DOM elements in JavaScript programatically without using HTML.  jQuery doesn't have a built in solution for creating DOM elements like Prototype does with its Element class.  Fortunately, Lukasz Rajchel has written the DOMEC (DOM Element Creation) plugin.  It's lightweight and is a drop-in replacement for those familiar with the syntax of Prototype's Element.

During the conversion process I found it to be most helpful to load jQuery side by side with Prototype using jQuery's no-conflict functionality.  As I slowly combed through my JavaScript removing Prototype dependencies I would periodically remove Prototype to see if and where I missed any outliers.  This also requires you to use the jQuery() syntax as opposed to the traditional $() syntax.  In doing so this helps easily identify where Prototype code remains.

How have your conversions to jQuery gone?  Have you converted and never looked back?  Your thoughts are appreciated...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date>2008-11-16 21:52:47</wp:post_date>
		<wp:post_date_gmt>2008-11-17 02:52:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>converting-from-prototype-to-jquery</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="framework"><![CDATA[framework]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<category domain="post_tag" nicename="prototype"><![CDATA[prototype]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399986]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>383</wp:comment_id>
			<wp:comment_author><![CDATA[Ruby, Rails, Web2.0 &raquo; Blog Archive &raquo; Thinking About Switching to jQuery?]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.rubyrailways.com/thinking-about-switching-to-jquery/</wp:comment_author_url>
			<wp:comment_author_IP>208.97.151.17</wp:comment_author_IP>
			<wp:comment_date>2008-12-06 06:57:19</wp:comment_date>
			<wp:comment_date_gmt>2008-12-06 11:57:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Converting fromPrototype to jQuery - thanks for the find goes to Yury Tsukerman [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>242</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>69.123.244.37</wp:comment_author_IP>
			<wp:comment_date>2008-11-17 15:15:50</wp:comment_date>
			<wp:comment_date_gmt>2008-11-17 20:15:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm not sure your code is coming through properly.

What I meant was I DON'T like using HTML snippets in my JavaScript source to create elements on the fly.  I prefer Prototype's Element approach where things are done more programatically via parameter passing.  Perhaps it's due to my past experience using Prototype?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>243</wp:comment_id>
			<wp:comment_author><![CDATA[Coderholic]]></wp:comment_author>
			<wp:comment_author_email>ben@coderholic.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.coderholic.com/</wp:comment_author_url>
			<wp:comment_author_IP>93.96.141.93</wp:comment_author_IP>
			<wp:comment_date>2008-11-17 16:44:41</wp:comment_date>
			<wp:comment_date_gmt>2008-11-17 21:44:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Useful guide, thanks. I've also written an article on converting Ext to jQuery (http://www.coderholic.com/converting-ext-to-jquery/) - soon we'll have everyone using jQuery! :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>239</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>69.123.244.37</wp:comment_author_IP>
			<wp:comment_date>2008-11-17 13:03:31</wp:comment_date>
			<wp:comment_date_gmt>2008-11-17 18:03:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting, thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>240</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan]]></wp:comment_author>
			<wp:comment_author_email>email@address.com</wp:comment_author_email>
			<wp:comment_author_url>http://sprockethouse.com/</wp:comment_author_url>
			<wp:comment_author_IP>74.242.250.215</wp:comment_author_IP>
			<wp:comment_date>2008-11-17 14:46:53</wp:comment_date>
			<wp:comment_date_gmt>2008-11-17 19:46:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great points, all. I found myself nodding in agreement with all of your initial points, which I found characterized Mootools's approach, as well.

But re: DOM element creation, I'm not sure I understand your need. I'm sure you know the $() factory method will create as well as select, right? So:

$('This is a DOM element'').appendTo('');

Generates HTML on the fly...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>241</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan]]></wp:comment_author>
			<wp:comment_author_email>email@address.com</wp:comment_author_email>
			<wp:comment_author_url>http://sprockethouse.com/</wp:comment_author_url>
			<wp:comment_author_IP>74.242.250.215</wp:comment_author_IP>
			<wp:comment_date>2008-11-17 14:48:30</wp:comment_date>
			<wp:comment_date_gmt>2008-11-17 19:48:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorry, my code example was totally butchered, as it parsed the HTML I included in the example. Should be:

<code>
$('This is a DOM element').appendTo('');
</code>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>245</wp:comment_id>
			<wp:comment_author><![CDATA[links for 2008-11-18 &laquo; Brent Sordyl&#8217;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://newsmavens.wordpress.com/2008/11/18/links-for-2008-11-18/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.243.196</wp:comment_author_IP>
			<wp:comment_date>2008-11-18 09:01:24</wp:comment_date>
			<wp:comment_date_gmt>2008-11-18 14:01:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Converting from Prototype to jQuery During the conversion process I found it to be most helpful to load jQuery side by side with Prototype using jQuery’s no-conflict functionality. As I slowly combed through my JavaScript removing Prototype dependencies I would periodically remove Prototype to see if and where I missed any outliers. This also requires you to use the jQuery() syntax as opposed to the traditional $() syntax. In doing so this helps easily identify where Prototype code remains. (tags: jQuery prototype ajax) [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>238</wp:comment_id>
			<wp:comment_author><![CDATA[Anatoli Papirovski]]></wp:comment_author>
			<wp:comment_author_email>apapirovski@mac.com</wp:comment_author_email>
			<wp:comment_author_url>http://fecklessmind.com/</wp:comment_author_url>
			<wp:comment_author_IP>209.148.248.19</wp:comment_author_IP>
			<wp:comment_date>2008-11-17 12:05:11</wp:comment_date>
			<wp:comment_date_gmt>2008-11-17 17:05:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice article. Just a quick note. It's, IMO, easier to do:

if ($('#welcome_message')[0])

which tests whether there's an element in the array or not and it works when the length is greater than 0. Hasn't failed me yet and I've worked on several major projects using jQuery.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2681</wp:comment_id>
			<wp:comment_author><![CDATA[Rick]]></wp:comment_author>
			<wp:comment_author_email>rickyk586@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>69.207.183.225</wp:comment_author_IP>
			<wp:comment_date>2009-08-20 00:21:48</wp:comment_date>
			<wp:comment_date_gmt>2009-08-20 05:21:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[someone should make a tool to convert from one library to another....]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2736</wp:comment_id>
			<wp:comment_author><![CDATA[Rick]]></wp:comment_author>
			<wp:comment_author_email>rickyk586@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>69.207.183.225</wp:comment_author_IP>
			<wp:comment_date>2009-08-20 04:21:48</wp:comment_date>
			<wp:comment_date_gmt>2009-08-20 09:21:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[someone should make a tool to convert from one library to another....]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>13 Years On The Web - A Retrospective, Part I</title>
		<link>http://blog.perplexedlabs.com/2008/11/20/13-years-on-the-web-a-retrospective-part-i/</link>
		<pubDate>Thu, 20 Nov 2008 17:09:01 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=78</guid>
		<description></description>
		<content:encoded><![CDATA[I am not a nostalgic person.  You cannot change the past, and as much as the past has shaped your present, the fact is, you live in that same present, today.  It's no use getting caught up in what you can't change, or worrying about a future that may never come.  However, that being said, there are times when it's instructive to look back on your past and see how far you have come.  To some, this can be a depressing prospect, especially when you come to the realization that the potential of the past has not yet been realized, and may never be.  To others, this process is encouraging, a helpful reminder that hard work and persistence over time leads to success, whatever that term means to you.  But there's a third group, for whom the nostalgic process is a little of both, because, while the present reality might not be what we thought it would be so many years ago, there's also the realization that the process is ongoing, and it's not over yet.  I think I fall into this third category.

<a href="http://www.perplexedlabs.com/wp-content/uploads/2008/11/cyberia.jpg"><img class="alignleft size-medium wp-image-79" style="margin: 1px 4px;" title="Cyberia" src="http://www.perplexedlabs.com/wp-content/uploads/2008/11/cyberia-217x300.jpg" alt="" width="217" height="300" align="left" /></a>In 1994, I met Matt at junior high orientation.  I didn't know it at the time, but I had met a kindred soul.  We both loved good rock music, were good at sports (we are still undefeated in 2-on-2 basketball), and strived to lead a logical, reasoned life.  We had also perfected the art of pulling good grades doing absolutely no schoolwork, but that's for another day.  But perhaps the shared interest that would define our friendship was the computer.  Back then Matt had a 486, I had a 386.  Matt was using Prodigy for internet access, I had AOL 2.0 at home, on a 14.4 modem.  Obviously we played video games (Carmen Sandiego?) but we also started messing around with batch file programming, and generally loved to tinker with our machines.  I cannot tell you how many times I have had to restore my computer from scratch due to the ramifications of excessive (and uninformed) curiosity.  In any case, in November of 1995, we came into contact with a magazine that would literally change the course of our lives forever.  Matt, having the more powerful computer, was into a game called Cyberia, which I remember having insane graphics for it's time.  We purchased the November 1995 issue of Electronic Entertainment magazine, which featured Cyberia.  In the back of that magazine was an article called "How To Make Your Own Web Page", which turned out to be a 3 page tutorial on basic HTML.  Really basic.  We read the article and were hooked.   We had to try this out.

The first time I tried to make an HTML page, I used MS Word.  It took me a few minutes to realize that the formatting that Word does to a document makes it pretty much unreadable to a browser.  The only plain-text editor I had was Notepad.  And so I started using Notepad.  To this day, 13 years later, I code every single file by hand, be it a stylesheet or a PHP script, in a text editor.  Ok, I confess: I had a job after college where I was doing J2EE development and we used IBM WebSphere Development Studio, but Java is such a pain to develop with, I think I can be forgiven for using an IDE!  And in college I did take  VB class, but I was forced to, so don't hold that against me.

Anyway, fast forward a few months through many late night "coding" sessions, constantly tweaking the layouts of our pages (F5 became the most used key on my keyboard), and searching for awesome animated gifs (spinning globes!) and we were experts in the art of webpage creation.  We used AOL's free homepages at the time, because 13 year olds didn't have the money for hosting back then, which was ridiculously expensive compared to today's options.  We formed a fake company called "DeltaSoft".  Our first homepages were really just links to sites we liked, and some information about us.  Nothing crazy.  The first big idea we had was conceived at a sleepover, in the early hours of the morning.  We were going to Action Park the next day with my church's youth group, and we were hanging out in the living room drinking iced tea and eating popcorn (late night snack of champions).  We were talking about what we could do with DeltaSoft, and we had the idea of starting the DeltaSoft Network.  Basically our two separate sites would be part of a larger umbrella site of homepages.  We could let others join the DeltaSoft network and start their own homepages.  We would need hosting space, to be sure, and we weren't sure how exactly program with something dynamic like that.  The thought of making money hadn't crossed our minds yet.  Call us naive.  In retrospect, this idea was like the social networking sites of the present.  At the time, however, we didn't realize that there already existed such a service.  Anyone remember <a href="http://en.wikipedia.org/wiki/GeoCities">GeoCities</a>?  But it didn't matter.  Excited by the possibilities of a network of separate but related websites, we set to work.  What would the content be?  That was yet undecided.  What would drive visitors there?  Still undecided.  But we had an idea and we were going to execute it.

Stay tuned for Part II later this week, in which we become 15 year high school students making $1500 a month from our websites, and are able to purchase bacon, egg, and cheese sandwiches for lunch, making our classmates jealous.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2008-11-20 12:09:01</wp:post_date>
		<wp:post_date_gmt>2008-11-20 17:09:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>13-years-on-the-web-a-retrospective-part-i</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="deltasoft"><![CDATA[deltasoft]]></category>
		<category domain="post_tag" nicename="nostalgia"><![CDATA[nostalgia]]></category>
		<category domain="post_tag" nicename="perplexed"><![CDATA[perplexed]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="random"><![CDATA[Random]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399988]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>421</wp:comment_id>
			<wp:comment_author><![CDATA[13 Years On The Web - A Retrospective, Part II | Perplexed Labs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.perplexedlabs.com/2008/12/19/13-years-on-the-web-a-retrospective-part-ii/</wp:comment_author_url>
			<wp:comment_author_IP>69.9.189.223</wp:comment_author_IP>
			<wp:comment_date>2008-12-19 11:45:36</wp:comment_date>
			<wp:comment_date_gmt>2008-12-19 16:45:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Part I, I detailed the formative phases of our web development careers.  A providential encounter with a [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>408</wp:comment_id>
			<wp:comment_author><![CDATA[Trav]]></wp:comment_author>
			<wp:comment_author_email>amazingtrav@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>64.222.187.211</wp:comment_author_IP>
			<wp:comment_date>2008-12-16 14:44:20</wp:comment_date>
			<wp:comment_date_gmt>2008-12-16 19:44:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Where's part 2?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>PHP Parallel Web Scraper</title>
		<link>http://blog.perplexedlabs.com/2008/12/17/php-parallel-web-scraper/</link>
		<pubDate>Wed, 17 Dec 2008 20:56:00 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=90</guid>
		<description></description>
		<content:encoded><![CDATA[Data is the most fundamental component of today's web applications.  Scraping and combining data from multiple sources to enhance, re-calculate, and re-display is an everyday occurance.

Scraping a list of URLs asynchronously is just about the slowest possible way to do it.  Fortunately, PHP 5.2+, via its cURL multi_* functions, gives us a way of downloading the data in parallel.  These functions are poorly documented compared to much of the PHP standard library, however, the process is still fairly straightforward.

What I attempted to do was abstract away the fundamental aspects of grouping and retrieving a large list of URLs to scrape.  The usage is simple:

[sourcecode language='php']
$list = array('MSFT', 'GOOG', 'YHOO', 'INTC', 'AAPL', 
    'CSCO', 'C', 'CEDC', 'IBM', 'ORCL', 'SAP', 'CA');

function urlFunc($data) {
   return 'http://finance.yahoo.com/q/ks?s='.$data;
}

function processFunc($k, $data) {
   echo 'processing html for '.$k."\n";
}

function dbFunc($k, $data) {
   echo 'storing scraped data to db for '.$k."\n";
}

Scraper::scrape($list, 4, 'urlFunc', 'processFunc', 'dbFunc');
[/sourcecode]

Note: the argument list, after the 3rd parameter, is dynamic... ie. you can add any number of functions to otherwise process, manipulate, or store the data.  They will be called sequentially and passed the return value of the previous call.

Here is the class listing:

[sourcecode language='php']
class Scraper
{
	private $curlOptions = null;
	
	/**
	 * Wrapper to scrape a generic list of items, in groups, in parallel
	 *
	 * Argument list is dynamic, functions are called sequentially...
	 * ie. $urlList is divided into groups of $groupSize urls, each url is passed to
	 * the first function specificed in the dynamic arguments.  The data returned is then
	 * passed to the next function specified, and so on...
	 *
	 * @access public
	 * @param array $list array of data
	 * @param int $groupSize size of chunk to process in parallel
	 * @return bool whether the operation was successful
	 */
	static public function scrape($list, $groupSize = 10, $urlFunc = null)
	{
		$args = func_get_args();
		$funcs = array_slice($args, 3);
		
		if(!is_array($list) || !count($list) || empty($groupSize)) {
			return false;
		}
		
		$group = array();
		$c = 0;
		$i = 0;
		$total = count($list);
		foreach($list as $k => $v) {
			if(!empty($urlFunc) &amp;amp;&amp;amp; is_callable($urlFunc)) {
				$v = call_user_func_array($urlFunc, array($v));
			}
			$group[$k] = $v;
			$c++;
			$i++;
			if(($c == $groupSize) || ($i == $total)) {
				self::getMulti($group, $funcs);
				$c = 0;
				$group = array();
			}
		}
		
		return true;
	}
	
	/**
	 * Performs the parallel retrieval of an arbitrary list of urls
	 *
	 * Passed funcs are called sequentially, as requests complete and 
	 * data is available, with the return value of the previous
	 * function call...
	 *
	 * @access private
	 * @param array $urls array of URLs
	 * @param array $funcs array of functions to call as data returns
	 */
	static private function getMulti($urls, $funcs = array())
	{
		$curl = array();
		$multi = curl_multi_init();
		foreach($urls as $k => $v) {
			$curl[$k] = curl_init();
			
			curl_setopt($curl[$k], CURLOPT_URL, $v);
			curl_setopt($curl[$k], CURLOPT_RETURNTRANSFER, true);
		
			if(!empty(self::$curlOptions)) {
				curl_setopt_array($curl[$k], self::$curlOptions);
			}
			
			curl_multi_add_handle($multi, $curl[$k]);
		}
		
		$running = null;
		do {
			curl_multi_exec($multi, $running);
			while(($info = curl_multi_info_read($multi)) !== false) {
				$key = array_search($info['handle'], $curl, true);
				$return = curl_multi_getcontent($info['handle']);
				curl_multi_remove_handle($multi, $info['handle']);
				foreach($funcs as $func) {
					$return = call_user_func_array($func, array($key, $return));
				}
			}
		} while($running > 0);

		curl_multi_close($multi);
	}
}
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date>2008-12-17 15:56:00</wp:post_date>
		<wp:post_date_gmt>2008-12-17 20:56:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-parallel-web-scraper</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="curl"><![CDATA[curl]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="parallel"><![CDATA[parallel]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="scrape"><![CDATA[scrape]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399989]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>417</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>69.123.244.37</wp:comment_author_IP>
			<wp:comment_date>2008-12-18 14:22:47</wp:comment_date>
			<wp:comment_date_gmt>2008-12-18 19:22:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Kyle,

I'm not sure of the internal implementation of cURL, I'd have to investigate further, but from my testing it absolutely does retrieve URLs residing on the same server in parallel.

Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>416</wp:comment_id>
			<wp:comment_author><![CDATA[KyleC]]></wp:comment_author>
			<wp:comment_author_email>kyle.cronin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>72.95.111.123</wp:comment_author_IP>
			<wp:comment_date>2008-12-18 14:17:36</wp:comment_date>
			<wp:comment_date_gmt>2008-12-18 19:17:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Does this support HTTP pipelining? I've been looking for a way to efficiently retrieve several pages from the same sever simultaneously, and from what I've read pipelining is the best way to go; I just don't know if it's possible in PHP.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3751</wp:comment_id>
			<wp:comment_author><![CDATA[Bob]]></wp:comment_author>
			<wp:comment_author_email>nobody@example.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-03-13 14:41:00</wp:comment_date>
			<wp:comment_date_gmt>2011-03-13 14:41:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It looks like a great class though I'm having problems on xampp.
[code]
line 32: --&amp;gt; if(!empty($urlFunc) &amp;amp;amp;amp;&amp;amp;amp;amp; is_callable($urlFunc)) {
[/code]
is throwing up a Parse error: syntax error, unexpected ';' in C:xampp 

any work around? I tried escaping though with no success. :( ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title> 13 Years On The Web - A Retrospective, Part II</title>
		<link>http://blog.perplexedlabs.com/2008/12/19/13-years-on-the-web-a-retrospective-part-ii/</link>
		<pubDate>Fri, 19 Dec 2008 16:45:34 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=96</guid>
		<description></description>
		<content:encoded><![CDATA[In <a href="http://www.perplexedlabs.com/2008/11/20/13-years-on-the-web-a-retrospective-part-i/">Part I</a>, I detailed the formative phases of our web development careers.  A providential encounter with a magazine article, tons of free time, inherent curiosity, youthful ambition were the perfect storm that threw us into the world of programming.

At this time, Matt was admittedly more of a programmer than I was.  While our web "programming" skills were roughly equal, Matt was also into C/C++ programming.  He wrote an Asteroids-like game to teach his brother math, and he would dissect gaming engines like the one used in Doom.  At one point we even thought of developing our own first person shooter based on our neighborhood and school, the premise being, we had to rescue everyone from zombies and aliens.  Again, youthful ambition, and not a bit of naivety.  Sometime in 1995 or 1996 we registered our first domain name, perplexed.com, with a $100 investment from my grandmother.  The name "perplexed" represented everything about us at the time: young and curious, but sometimes confused about the state of the world we were in.  Why did people do certain (illogical) things?  What were we going to do with our lives when we got to college?  Will the Knicks ever beat the Bulls in the playoffs?  It is my contention that perplexed.com is the greatest domain name ever registered, and I cannot articulate how angry we are with ourselves that we didn't renew it. More on that later

<img style="padding: 2px !important; margin: 0px !important; border: 1px solid #D6D6D6;" title="title" src="http://www.perplexedlabs.com/wp-content/uploads/2008/12/title.jpg" alt="title" width="350" height="150" align="right" />We decided perplexed.com would host two different sites: Matt's Game Programming MegaSite, and my VB Programming MegaSite.  This arrangement allowed us both to build sites related to our interests.  We tried to keep the layouts the same so we'd have a consistent design across the domain; two frames, the left being the menu, the right being the content.  The color scheme was black background with white text.  We tried to make all our images using PhotoShop.  They came out ok in a cheesy way, as you'd expect from two programmers.  GPMega would focus on all aspects of game programming, especially engine design and DirectX.  Matt had a ton of C/C++ code up, as well as tutorials, links, software, and even a MIDI player so you can listen to a MIDI version of Van Halen's "Panama" while you browsed.  VBMega was concerned with Visual Basic programming, and the main focus was on programs that you could use to manipulate earlier versions of AOL.  For example, posting ASCII art in chat rooms, knocking people offline, pinging the service every few minutes so you wouldn't get knocked off, as well as other more nefarious features.  I ran this portion of the site, which allowed me to learn VB programming while at the same time piss off my friends by booting them off AOL over IM.  Everyone was a winner!

We made money the old-fashioned way, by selling ad space.  We signed up for various banner exchanges before settling with 24/7.  They had a different name back then, I just can't remember what it was.  In any case, the sites both grew very quickly, and the checks were arriving.  The first few months we made $150, then $200, then $300.  At the high point we were pulling in $1500 a month, strictly through ads.  When you're 15 years old in high school and you're walking around with that kind of money in your pocket, you feel on top of the world.  While the rest of our classmates ate the cafeteria food, we walked over to the deli across the street and treated ourselves to bacon egg and cheese sandwiches.  Going to the mall was fun: your girl wants some lunch?  No problem.  New shirt?  Done.  New programming book?  Buy two!  One month, perplexed.com accounted for a little more than 1% of the total ad impressions for every site that advertised with 24/7.  We were experiencing impressive growth.  Perhaps the most stunning thing to happen to us during this time was one day when we were in CompUSA.  Matt was leafing through a book, <a href="http://books.google.com/books?id=lRUj-nhQRu8C&amp;pg=PP25&amp;lpg=PP25&amp;dq=game+programming+megasite&amp;source=web&amp;ots=7vBe3xL25D&amp;sig=g5P08vACy_GZkHJfP1Cy6pKFb-4&amp;hl=en&amp;sa=X&amp;oi=book_result&amp;resnum=4&amp;ct=result">Tricks Of the Windows Game Programming Gurus</a>, when he saw GPMega mentioned!  We didn't even know the author had referenced us.  It was shocking; we were open-mouthed.

Unfortunately, all good things must come to an end.  In retrospect, the way Perplexed ended is sad indeed, and the only way I can explain it is stupidity.  In October of 1998, my family and I moved to another town, which was only 15 minutes away from where Matt lived, but to two kids with no cars who would now be going to different schools, it might as well have been a million miles.  We kept in touch and continued to hang out, but it was hard to run the sites at the time.  So many of our ideas came from lunchtime brainstorming, playing ball after school, or Friday night coding sessions.  Now that we weren't seeing each other on a day to day basis, the importance of the sites and the partnership that created them began to fall.  It sounds insane in this age of telecommuting, but back then we didn't know any better.  And priorities changed as we got older.  When you get a new car and you're hanging out with your girlfriend, and doing whatever high school kids do, who wants to be up at 3am on a Friday writing HTML and answering emails?  The nail in the coffin was the failure to renew the domain name.  To this day I don't know why we didn't do it.  I can't explain it; it was a stupid decision and one of the biggest regrets of my youth.

At this point, Matt and I are seniors in different high schools, preparing to attend different colleges.  We're still great friends but the lack of face time has meant that our priorities diverged a bit.  It's worth mentioning that my grades were better in high school and college after I moved away.  I failed out of Advanced Math in seventh grade, but got A's in Calc I, II, and III in college.  Go figure!  In all seriousness, the fact that Perplexed.com is now part of an ad farm is a huge source of pain and regret.  But all is not lost.  Stay tuned for Part III, where I will bring the story up to the present time, and offer my reflections on the business and pleasure of web programming.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date>2008-12-19 11:45:34</wp:post_date>
		<wp:post_date_gmt>2008-12-19 16:45:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>13-years-on-the-web-a-retrospective-part-ii</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="aol"><![CDATA[aol]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="game-programming"><![CDATA[game programming]]></category>
		<category domain="post_tag" nicename="perplexed"><![CDATA[perplexed]]></category>
		<category domain="category" nicename="random"><![CDATA[Random]]></category>
		<category domain="post_tag" nicename="vb"><![CDATA[vb]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399990]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP Sessions on localhost</title>
		<link>http://blog.perplexedlabs.com/2008/12/21/php-sessions-on-localhost/</link>
		<pubDate>Sun, 21 Dec 2008 19:08:21 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=116</guid>
		<description></description>
		<content:encoded><![CDATA[Trying to setup a sandbox development environment on my laptop before traveling for the holidays.  Found <a title="WAMP" href="http://www.wampserver.com/en/" target="_blank">WAMP</a> which was a breeze to setup and get running.

Anyway, I ran into a problem where basic session code that my servers handled fine wasn't working as expected when accessed via localhost.   This is how I got things working:

Set ALL session configuration parameters BEFORE calling session_name() (which, additionally, should ALWAYS be called before session_start(), fyi).  This includes, most importantly, session cookie parameters.  The following is one example that would work for either localhost or operating on a production server:

[sourcecode language='php']
function domainName()
{
	$serverName = $_SERVER['SERVER_NAME'];
	$serverNameParts = explode('.', $serverName);
	if(count($serverNameParts) < 2) {
		return $serverName;
	} else {
		return $serverNameParts[count($serverNameParts) - 2].'.'.
			$serverNameParts[count($serverNameParts) - 1];
	}
}

function cookieDomainName()
{
	$domain = domainName();
		
	// if we're operating on localhost, provide a blank domain
	// otherwise cookies won't be set
	return ($domain == 'localhost') ? '' : '.'.$domain;
}

session_set_cookie_params(0, '/', cookieDomainName());
session_name('mySessionName');
session_start();
[/sourcecode]

Hope this helps!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2008-12-21 14:08:21</wp:post_date>
		<wp:post_date_gmt>2008-12-21 19:08:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-sessions-on-localhost</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="localhost"><![CDATA[localhost]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="sessions"><![CDATA[sessions]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399991]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>473</wp:comment_id>
			<wp:comment_author><![CDATA[KMB]]></wp:comment_author>
			<wp:comment_author_email>webmaster@germagic.de</wp:comment_author_email>
			<wp:comment_author_url>http://www.inpromtu.de</wp:comment_author_url>
			<wp:comment_author_IP>80.139.221.228</wp:comment_author_IP>
			<wp:comment_date>2008-12-30 06:15:07</wp:comment_date>
			<wp:comment_date_gmt>2008-12-30 11:15:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It must be the time of love and joy and setting up a nice little localhost-sandbox ;-)

I did the same and your code worked like a charm. Thank you for that!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2705</wp:comment_id>
			<wp:comment_author><![CDATA[mbriedis]]></wp:comment_author>
			<wp:comment_author_email>briedis6152@inbox.lv</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.30.130.46</wp:comment_author_IP>
			<wp:comment_date>2009-11-05 07:05:42</wp:comment_date>
			<wp:comment_date_gmt>2009-11-05 12:05:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I use XAMPP, never had problems with sessions on localhost, very easy to setup too...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2738</wp:comment_id>
			<wp:comment_author><![CDATA[mbriedis]]></wp:comment_author>
			<wp:comment_author_email>briedis6152@inbox.lv</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.30.130.46</wp:comment_author_IP>
			<wp:comment_date>2009-11-05 12:05:42</wp:comment_date>
			<wp:comment_date_gmt>2009-11-05 17:05:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I use XAMPP, never had problems with sessions on localhost, very easy to setup too...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2749</wp:comment_id>
			<wp:comment_author><![CDATA[friendproject]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/friendproject</wp:comment_author_url>
			<wp:comment_author_IP>72.189.223.180</wp:comment_author_IP>
			<wp:comment_date>2010-01-15 21:25:27</wp:comment_date>
			<wp:comment_date_gmt>2010-01-16 02:25:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have never had the issues you are talking about, was this with PHP 5?  I am just wondering when this would be useful for me or if it is for older versions or something?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3255</wp:comment_id>
			<wp:comment_author><![CDATA[Mohammed Feroz Shaik]]></wp:comment_author>
			<wp:comment_author_email>ferozasi@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>59.93.72.215</wp:comment_author_IP>
			<wp:comment_date>2010-08-13 20:57:45</wp:comment_date>
			<wp:comment_date_gmt>2010-08-14 01:57:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks a lot gr8 script for session, you are my code saver!!!!!! :)<br><br>GR8 <br><br>Please Keep posting.........THANKS A LOT]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>jQuery 1.3 Beta Testing</title>
		<link>http://blog.perplexedlabs.com/2008/12/22/jquery-13-beta-testing/</link>
		<pubDate>Mon, 22 Dec 2008 18:11:17 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=118</guid>
		<description></description>
		<content:encoded><![CDATA[The <a href="http://blog.jquery.com/2008/12/22/help-test-jquery-13-beta-1/" target="_blank">official jQuery blog</a> has announced the availability of jQuery 1.3b1.  They're asking for testers to iron out remaining bugs - looking to release on January 14th.

Major changes include:
<ul>
	<li>Selector Engine - The selector code has undergone a complete rewrite - it’s likely that some edge cases still exist here.</li>
	<li>DOM Manipulation (append/prepend/before/after) - This code has also undergone a large rewrite along with some of the logic for executing inline script elements.</li>
	<li>.offset() - Another method that has been completely rewritten.</li>
	<li>Event Namespaces - The logic for handling namespaced events has been completely rewritten.</li>
	<li>Event Triggering - When triggering an event the event now bubbles up the DOM - this is likely to cause some problems.</li>
</ul>
Go lend a hand!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>118</wp:post_id>
		<wp:post_date>2008-12-22 13:11:17</wp:post_date>
		<wp:post_date_gmt>2008-12-22 18:11:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jquery-13-beta-testing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399992]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Installing Ruby Enterprise Edition with Phusion Passenger</title>
		<link>http://blog.perplexedlabs.com/2009/01/13/installing-ruby-enterprise-edition-with-phusion-passenger/</link>
		<pubDate>Tue, 13 Jan 2009 15:00:18 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[I've been using <a href="http://www.modrails.com/">Phusion Passenger</a> for a few months now and I'm really pleased with it.  The performace vs. Mongrel is better, but what makes it so useful is the ease of deployment.  Being able to setup a vhost in Apache just like you would for a PHP application was very appealing to me.  Having previously worked with the Apache/Rails/Mongrel/mod_proxy stack in an "enterprise" environment for over a year, I have experienced pretty much every nightmare deployment scenario possible.  I recently decided to install Phusion's <a href="http://www.rubyenterpriseedition.com/">Ruby Enterprise Edition</a>, which promises up to a 33% savings in memory usage.

Before you do anything, and to save you trouble down the road, I recommend generating a list of all the gems currently installed.  You'll need this later because you'll have to reinstall all of them in Ruby Enterprise Edition.
<blockquote>$ gem list

*** LOCAL GEMS ***

actionmailer (2.0.2)
actionpack (2.0.2)
activerecord (2.0.2)
activeresource (2.0.2)
activesupport (2.0.2)
acts_as_taggable (2.0.2)
amazon-ecs (0.5.3)
cgi_multipart_eof_fix (2.5.0)
daemons (1.0.10)
fastthread (1.0.1)
gem_plugin (0.2.3)
hpricot (0.6)
mongrel (1.1.4)
mysql (2.7)
passenger (1.0.1)
rails (2.0.2)
rake (0.8.1)
rspec (1.1.3)
will_paginate (2.2.2)
xml-simple (1.0.11)</blockquote>
Copy your list and save it somewhere.  Next, we download and extract the current version of Ruby Enterprise Edition.  The latest version number can be found at the <a href="http://www.rubyenterpriseedition.com/download.html">download page</a>.
<blockquote>$ wget http://rubyforge.org/frs/download.php/48623/ruby-enterprise-1.8.6-20081215.tar.gz
$ tar xzvf ruby-enterprise-1.8.6-20081215.tar.gz</blockquote>
And run the installer
<blockquote>$ ./ruby-enterprise-1.8.6-20081215/installer</blockquote>
As the installation proceeds, you'll be prompted for an installation directory.  I went with the default.  When the installation is over, you should see a message like this:
<blockquote>Ruby Enterprise Edition is successfully installed!
If want to use Phusion Passenger (http://www.modrails.com) in combination
with Ruby Enterprise Edition, then you must reinstall Phusion Passenger against
Ruby Enterprise Edition, as follows:

/opt/ruby-enterprise-1.8.6-20081215/bin/passenger-install-apache2-module

Make sure you don't forget to paste the Apache configuration directives that
the installer gives you.

If you ever want to uninstall Ruby Enterprise Edition, simply remove this
directory:

/opt/ruby-enterprise-1.8.6-20081215

If you have any questions, feel free to visit our website:

http://www.rubyenterpriseedition.com

Enjoy Ruby Enterprise Edition, a product of Phusion (www.phusion.nl)</blockquote>
I do want to use Ruby Enterprise Edition and Apache, so I immediately installed the Apache module.
<blockquote>$ /opt/ruby-enterprise-1.8.6-20081215/bin/passenger-install-apache2-module</blockquote>
You need to pay attention to the Apache directives that this installation generates, since you'll have to put them into your httpd.conf:
<blockquote>The Apache 2 module was successfully installed.

Please edit your Apache configuration file, and add these lines:

LoadModule passenger_module /opt/ruby-enterprise-1.8.6-20081215/lib/ruby/gems/1.8/gems/passenger-2.0.6/ext/apache2/mod_passenger.so
PassengerRoot /opt/ruby-enterprise-1.8.6-20081215/lib/ruby/gems/1.8/gems/passenger-2.0.6
PassengerRuby /opt/ruby-enterprise-1.8.6-20081215/bin/ruby</blockquote>
What that message doesn't explain is that, if you previously installed Passenger <strong>without</strong> Ruby Enterprise Edition, you need to comment out any old directives attached to that previous setup.  I made that mistake the first time around.

Next you have to reinstall all the gems that you were using with old Ruby, including Rails:
<blockquote>/opt/ruby-enterprise-1.8.6-20081215/bin/ruby /opt/ruby-enterprise-1.8.6-20081215/bin/gem install rails --version 2.0.2</blockquote>
Just to prove my point, if you listed all of Enterprise Ruby's gems at this point, the list would look something like this:
<blockquote>$ /opt/ruby-enterprise-1.8.6-20081215/bin/ruby /opt/ruby-enterprise-1.8.6-20081215/bin/gem list

*** LOCAL GEMS ***

actionmailer (2.2.2, 2.0.2)
actionpack (2.2.2, 2.0.2)
activerecord (2.2.2, 2.0.2)
activeresource (2.2.2, 2.0.2)
activesupport (2.2.2, 2.0.2)
fastthread (1.0.1)
mysql (2.7)
passenger (2.0.6)
rack (0.9.1)
rails (2.2.2, 2.0.2)
rake (0.8.3)</blockquote>
None of my old gems are installed.  Once Rails is installed, you need to reinstall your old gems:
<blockquote>$ /opt/ruby-enterprise-1.8.6-20081215/bin/ruby /opt/ruby-enterprise-1.8.6-20081215/bin/gem install will_paginate
$ /opt/ruby-enterprise-1.8.6-20081215/bin/ruby /opt/ruby-enterprise-1.8.6-20081215/bin/gem install xml-simple
$ /opt/ruby-enterprise-1.8.6-20081215/bin/ruby /opt/ruby-enterprise-1.8.6-20081215/bin/gem install hpricot
$ /opt/ruby-enterprise-1.8.6-20081215/bin/ruby /opt/ruby-enterprise-1.8.6-20081215/bin/gem install rmagick</blockquote>
And on and on.  If you haven't used Passenger before, check out the <a href="http://www.modrails.com/documentation/Users%20guide.html#_deploying_a_ruby_on_rails_application">Deployment Guide</a>.  If you have used Passenger and your Rails apps are already set up in Apache to take advantage of it's deployment procedures, simply restart Apache.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2009-01-13 10:00:18</wp:post_date>
		<wp:post_date_gmt>2009-01-13 15:00:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>installing-ruby-enterprise-edition-with-phusion-passenger</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apache"><![CDATA[apache]]></category>
		<category domain="post_tag" nicename="deployment"><![CDATA[deployment]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="post_tag" nicename="passenger"><![CDATA[passenger]]></category>
		<category domain="post_tag" nicename="phusion"><![CDATA[phusion]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="ruby-enterprise-edition"><![CDATA[ruby enterprise edition]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<category domain="post_tag" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a3171cca397b0b3a5e957daa5516f1ee</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_60d3af0d237e7f33433373e739b7bb74</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a3171cca397b0b3a5e957daa5516f1ee</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>541</wp:comment_id>
			<wp:comment_author><![CDATA[Pmarsh]]></wp:comment_author>
			<wp:comment_author_email>paul.marsh@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://paulmarsh.net</wp:comment_author_url>
			<wp:comment_author_IP>66.220.1.190</wp:comment_author_IP>
			<wp:comment_date>2009-01-13 14:16:03</wp:comment_date>
			<wp:comment_date_gmt>2009-01-13 19:16:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I create a symlink from /opt/ruby-enterprise to whatever version of REE I just compiled.

Just saves the step of having to edit your Apache config.

Good write up!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>542</wp:comment_id>
			<wp:comment_author><![CDATA[Eric]]></wp:comment_author>
			<wp:comment_author_email>speric@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.speric.net</wp:comment_author_url>
			<wp:comment_author_IP>67.153.84.90</wp:comment_author_IP>
			<wp:comment_date>2009-01-13 14:24:12</wp:comment_date>
			<wp:comment_date_gmt>2009-01-13 19:24:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's a good point, and something I will do.  For my purpose here, I thought leaving it as it was installed would make the fact that there are now multiple Ruby instances installed a little more vivid, pointing out the need to reinstall gems, etc.

Thanks for your comment.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>540</wp:comment_id>
			<wp:comment_author><![CDATA[Eric Farkas - The Collected Works - Installing Ruby Enterprise Edition with Phusion Passenger]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.speric.net/?p=211</wp:comment_author_url>
			<wp:comment_author_IP>67.207.135.47</wp:comment_author_IP>
			<wp:comment_date>2009-01-13 10:13:32</wp:comment_date>
			<wp:comment_date_gmt>2009-01-13 15:13:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] posted a new article over at Perplexed Labs.  I wish someone had written this when I tried installing Enterprise [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1408</wp:comment_id>
			<wp:comment_author><![CDATA[Joeri]]></wp:comment_author>
			<wp:comment_author_email>spam@lookatrails.be</wp:comment_author_email>
			<wp:comment_author_url>http://www.lookatrails.be</wp:comment_author_url>
			<wp:comment_author_IP>94.224.108.81</wp:comment_author_IP>
			<wp:comment_date>2009-04-04 04:29:27</wp:comment_date>
			<wp:comment_date_gmt>2009-04-04 09:29:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great post, many many thanks.

I just installed Centos 5 on my VPS with Plesk 9.0.1.
Had some issues installing PHP 5.2.6 and ruby 1.8.6.

Well with this post i managed to get it all up and running in no time PHP 5 running on Apache 2.0.46 and Rails smoothly side by side.

Thx again.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>jQuery 1.3.1 Go For Launch</title>
		<link>http://blog.perplexedlabs.com/2009/01/24/jquery-131-go-for-launch/</link>
		<pubDate>Sat, 24 Jan 2009 18:05:32 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=128</guid>
		<description></description>
		<content:encoded><![CDATA[Just a quick note.

I waited for the <a href="http://blog.jquery.com/2009/01/21/jquery-131-released/">1.3.1 release of jQuery</a> to make sure all major bugs had been resolved (brand new selector engine).  This weekend I decided to go for the upgrade.  Flawless.  Even the plugins all worked as expected.

Fantastic job.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date>2009-01-24 13:05:32</wp:post_date>
		<wp:post_date_gmt>2009-01-24 18:05:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jquery-131-go-for-launch</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399996]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ad Revenue as a Business Model - Eat Dinner First</title>
		<link>http://blog.perplexedlabs.com/2009/02/03/ad-revenue-as-a-business-model-eat-dinner-first/</link>
		<pubDate>Tue, 03 Feb 2009 18:19:04 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=133</guid>
		<description></description>
		<content:encoded><![CDATA[If you're building a startup and your revenue is all ad based, it's like eating dessert before eating the full meal.  Yes, it might taste good at first, but sooner or later you'll be on the toilet...and uncomfortable.

Over the past few weeks I've read a lot of articles like <a href="http://www.masshightech.com/stories/2009/01/26/weekly17-VCs-nixing-social-networking-startup-investments.html">this one</a>, which reiterate how hopeless it is to build a startup around ad revenue that can survive a downturn.  I was going to say "to build a startup with an ad-based business model", but really, is ad revenue a business model?  It might be a "revenue model", but is what you are doing a business if you derive all of your income from advertising?  I wouldn't say so.  A true business produces something, or provides a service that improves the lives of the customer.  Your "MySpace of pet owners who visit the library every Thursday" or "Digg for horitculturalists" might be a good web application, it might be a nice way for you to show the world your programming prowess, but honestly, is it a business?

This is not to say that ad revenue is useless.  Far from it.  If I had a product site (Basecamp?), or a social site where money was exchanged for some service or premium features (Flickr?), I would definitely supplement whatever money I made from the main product (dinner) with some ads (dessert).  That's a no brainer.  But building a business based on ad revenue leaves you exposed to downturns like this.

If you're struggling with developing a business model, there have been some good articles written recently that might help you on your way: <a href="http://startuplessonslearned.blogspot.com/2009/01/three-freemium-strategies.html">Three Freemium Strategies</a> and <a href="http://www.sachinrekhi.com/blog/2009/01/25/make-something-people-will-buy">Make Something People Will Buy</a> among others.  I also found <a href="http://www.scribd.com/doc/11482768/JPMorgan-Nothing-but-Net-1509">JPMorgan's Internet Market Research Report</a> to be particularly insightful.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>133</wp:post_id>
		<wp:post_date>2009-02-03 13:19:04</wp:post_date>
		<wp:post_date_gmt>2009-02-03 18:19:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ad-revenue-as-a-business-model-eat-dinner-first</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ads"><![CDATA[ads]]></category>
		<category domain="post_tag" nicename="businessmodel"><![CDATA[businessmodel]]></category>
		<category domain="category" nicename="random"><![CDATA[Random]]></category>
		<category domain="post_tag" nicename="revenue"><![CDATA[revenue]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399997]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP Dynamic JavaScript SCRIPT Insertion for Embedding</title>
		<link>http://blog.perplexedlabs.com/2009/02/05/dynamic-javascript-script-insertion-for-embedding/</link>
		<pubDate>Thu, 05 Feb 2009 20:21:34 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[For an internal project I've been working on I have to provide embeddable versions of internal tools for deployment on remote partner sites.

I achieved this in my framework through, what I call, output format filters.  Let's say you have an action "cloud" in a controller "markets".  The URL to access this resource in its full glory would be:

<blockquote>
http://www.domainname.com/markets/cloud
</blockquote>

Pretty standard stuff.  Let's say we want to offer an embeddable version of this resource.  I can append an "output format filter" on this resource:

<blockquote>
http://www.domainname.com/markets/cloud/embed
</blockquote>

Alright, again, pretty standard stuff.  How on earth does this relate to dynamic javascript SCRIPT insertion?

On the remote partner site, I ask them to place the following HTML fragment in the desired location they want the resource to appear:

[sourcecode language="html"]
<script language="javascript" type="text/javscript" src="http://www.domainname.com/markets/cloud/embed"></script>
[/sourcecode]

One line of HTML.

How does this work under the hood?  It simply takes the view's content and prepares it as a valid javascript document.write.  It also specifies certain HTML headers, notably:

<blockquote><strong>Content-Type: application/x-javascript</strong></blockquote>

[sourcecode language="php"]
function prepJS($js)
{
	// prepare the output as valid javascript
	$js = str_replace("\\", "\\\\", $js);
	$js = preg_replace("/[\r\n]+/", '\n', $js);
	$js = str_replace('"', '\"', $js);
	$js = preg_replace("/<script/i", '<scr"+"ipt', $js);
	$js = preg_replace("/<\/script/i", '</scr"+"ipt', $js);
	
	return $js;
}
[/sourcecode]

[sourcecode language="javascript"]
document.write("<?php echo prepJS($viewContent); ?>");
[/sourcecode]

It should be fairly obvious what the function does.  It escapes double quotes, adds slashes, and replaces newlines and carriage returns with their inline equivalent.  Additionally and VERY important, it splits SCRIPT tag elements (if your view had inline SCRIPT's) into SCR"+"IPT so that the browser treats these as pure strings and doesn't cause JavaScript parsing errors.

What if the resource you are embedding depends upon the availability of certain JavaScript libraries or external source files?  The first response usually is, myself included, to simply document.write more SCRIPT tags!

[sourcecode language="javascript"]
document.write("
<?php prepJS('<script type="text/javascript" language="javascript" src="http://www.domainname.com/path/to/jquery.js"></script>'); ?>
");
document.write("
<?php prepJS('<script type="text/javascript" language="javascript" src="http://www.domainname.com/path/to/morejs.js"></script>'); ?>
");
document.write("<?php echo prepJS($viewContent); ?>");
[/sourcecode]

The problem is of course that in IE, <a href="http://stackoverflow.com/questions/94141/javascripts-document-write-inline-script-execution-order">there's no telling what order those SCRIPT tags will get executed</a>.  Furthermore, if your resource depends on them, they need to be executed <strong>before</strong> you document.write the content.

My solution to this problem was two-fold.  For other reasons not worth going into here, it's generally a good idea to concatenate all your JavaScript source files into one larger file, minify (if desired), cache, and serve the result.  Taking advantage of this we can reduce the above to a single additional SCRIPT insertion.  Tack this snippet onto the end of that file:

[sourcecode language="javascript"]
if(typeof(embedReady) != 'undefined') {
	embedReady();
}
[/sourcecode]

And we come up with this:

[sourcecode language="javascript"]
document.write("
<?php prepJS('<script type="text/javascript" language="javascript" src="http://www.domainname.com/path/to/cached_combined_js.js"></script>'); ?>
");
var embedReady = function() {
    document.write("<?php echo prepJS($viewContent); ?>");
}
[/sourcecode]

Now we're only concerned with a single SCRIPT load.  We've safely placed our document.write of content inside a function that's called at the end of our dependency SCRIPT.  In an elegant, browser agnostic fashion our resource will have it's dependencies loaded before it executes.

Yay?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date>2009-02-05 15:21:34</wp:post_date>
		<wp:post_date_gmt>2009-02-05 20:21:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dynamic-javascript-script-insertion-for-embedding</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="embed"><![CDATA[embed]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="script"><![CDATA[SCRIPT]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b17a01749b5e9576f4a7a15bf38af675</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_cbfb39502c443718ee9cce08d16b94c4</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a1e7d325d67ae082f583d3b2d6927d9b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a1e7d325d67ae082f583d3b2d6927d9b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8448dd74c45c0cfc81885c58b21e3a78</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8448dd74c45c0cfc81885c58b21e3a78</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17399998]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScript roundTo Nearest Thousandth, Hundredth, Tenth, *</title>
		<link>http://blog.perplexedlabs.com/2009/02/06/javascript-roundto-nearest-thousandth-hundredth-tenth/</link>
		<pubDate>Fri, 06 Feb 2009 18:53:42 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=153</guid>
		<description></description>
		<content:encoded><![CDATA[This very simple function does exactly what the title suggests, it allows you to round to any specified accuracy.

[sourcecode language="javascript"]
function roundTo(number, to) {
	return Math.round(number * to) / to;
}

alert(roundTo(1532, 100)); // 1500
alert(roundTo(26, 10)); // 30
[/sourcecode]

If you want to get fancy, you could also modify the Number prototype for a more "integrated" solution.

[sourcecode language="javascript"]
Number.prototype.roundTo = function(to) {
	return Math.round(this * to) / to;
}
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date>2009-02-06 13:53:42</wp:post_date>
		<wp:post_date_gmt>2009-02-06 18:53:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript-roundto-nearest-thousandth-hundredth-tenth</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="prototype"><![CDATA[prototype]]></category>
		<category domain="post_tag" nicename="round"><![CDATA[round]]></category>
		<category domain="post_tag" nicename="rounding"><![CDATA[rounding]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17400000]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3169</wp:comment_id>
			<wp:comment_author><![CDATA[a2thek26]]></wp:comment_author>
			<wp:comment_author_email>adamkelsven@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>207.88.53.162</wp:comment_author_IP>
			<wp:comment_date>2010-07-29 19:38:34</wp:comment_date>
			<wp:comment_date_gmt>2010-07-30 00:38:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[just to be clear, your function is backwards...<br><br>should be...<br>Math.round(number / to) * to;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3954</wp:comment_id>
			<wp:comment_author><![CDATA[Math]]></wp:comment_author>
			<wp:comment_author_email>math@mailinator.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-06-30 00:01:00</wp:comment_date>
			<wp:comment_date_gmt>2011-06-30 00:01:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[a2thek26 - you're wrong. Try it with a decimal and you'll see, the original post is right.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3169</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4264</wp:comment_id>
			<wp:comment_author><![CDATA[Nick]]></wp:comment_author>
			<wp:comment_author_email>nick@seowarp.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-09 01:53:00</wp:comment_date>
			<wp:comment_date_gmt>2012-02-09 01:53:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeah, but you're ignoring the fact that one of the inputs is getting rounded.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2291</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Getting Started with Django and Python - First Impressions</title>
		<link>http://blog.perplexedlabs.com/2009/02/08/getting-started-with-django-and-python-first-impressions/</link>
		<pubDate>Mon, 09 Feb 2009 04:15:58 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=155</guid>
		<description></description>
		<content:encoded><![CDATA[I decided to spend the weekend getting more comfortable working and developing in Django (and coincidentally this MacBook Pro).  I've learned a lot already and I think this post might help some coming from other web development architectures to Django.

In a previous post I discussed <a href="http://www.perplexedlabs.com/2008/11/10/setup-python-25-mod_wsgi-and-django-10-on-centos-5-cpanel/">installing Django and getting it to play nice with Apache 2 on a CentOS 5/cPanel server</a>.  Updating to <del datetime="2009-02-10T02:20:49+00:00">Django 1.02</del> the latest Django codebase is easy if you followed my previous post, simply do an <strong>svn up</strong> in your django-trunk directory.

The first item that makes sense to tweak is Django's settings.  Editing your <strong>settings.py</strong> file in your project's root directory is fairly straightforward.  Fill in your database settings, adjust your time zone - all that good stuff.  Also, if you followed my previous post, you'll want to make a modification to your <strong>ADMIN_MEDIA_PREFIX</strong>:

[sourcecode language='python']
ADMIN_MEDIA_PREFIX = '/admin_media/'
[/sourcecode]

Initially, you'll also want to use the (excellent) built in administrative interface.  Add it to your <strong>INSTALLED_APPS</strong> tuple at the bottom of <strong>settings.py</strong>:

[sourcecode language='python']
INSTALLED_APPS = (
    #...
    'django.contrib.admin'
)
[/sourcecode]

To test your database connectivity and have Django setup tables required by the default apps that are placed in <strong>INSTALLED_APPS</strong> (including the admin app you just added) run the <strong>manage.py syncdb</strong> command:

<blockquote>
python manage.py syncdb
</blockquote>

This brings up an issue I came across.  On my server I have a 2nd Python installation (v2.5 for Django development purposes).  You'd like to be able to give +x permissions to manage.py and simply do:

<blockquote>
./manage.py syncdb
</blockquote>

Internally, the <em>shebang</em> of Django's Python files is <strong>#!/usr/bin/env python</strong>.  The developers, knowing that a Python installation could be anywhere on a given system, obviously went the reliable route and utilize /usr/bin/env (which is essentially guaranteed to exist in that location) to search for a Python interpreter in the system's path.  However, on a system where your desired Python installation won't be found ahead of the system's default (perhaps, required) installation, running the script directly will cause it to be executed by the wrong Python interpreter.

The composition of a Django web application (site) is: <em>a site is composed of projects which are composed of apps</em>.  Apps can be completely decoupled and can be re-used on other projects (and therefor sites).  Apps seem to be the functional equivalent of Rails plugins.

Creating your first app is as simple as executing the <strong>python manage.py startapp appname</strong> command and adding it to your list of <strong>INSTALLED_APPS</strong>.  Personally, the fact that you have to add <em>anything</em> to a list seems cumbersome.  Is it not possible to have them placed in a directory by convention that would automatically load them?  Perhaps this is due to the fact that you may want to take advantage of certain Django bundled apps, such as auth, admin, etc.  In which case it wouldn't make sense to copy them into an "apps" directory under your project root.

After you've created your first app you then create your models.  If you have an familiarity with an <strong>O</strong>bject <strong>R</strong>elation <strong>M</strong>apper (ORM) Django's won't come as any surprise.  Your models extend Django's built in <strong>models.Model</strong> class and define both the database fields as properties and the actions as methods.

As the official Django tutorial suggests, it's helpful to overwrite some base model methods with your own custom methods to implement some important functionality.  In particular <strong>__unicode__()</strong>.  Internally <strong>__str__()</strong> calls <strong>__unicode__()</strong>, so whereas in Python your classes would implement <strong>__str__()</strong>, in Django you implement <strong>__unicode__()</strong>.  This provides a human readable representation of your object when dealing with the built-in Django admin interface, or the Django shell.

<em>Edit below: It was late when I wrote this, sorry!</em>
<del datetime="2009-02-09T14:25:05+00:00">It's also worth noting that it was somewhat surprising to me that certain files were created automatically for you with the <strong>manage.py startapp</strong> command while others weren't (such as models.py).  This certainly isn't something awful, just seemed a bit inconsistent.</del>  This extends to setting up templates.  Again, it's a manual process.  You first create the templates directory and then specify it in your project's <strong>settings.py</strong> file.  Couldn't some of this have been automated?  If you want to modify Django's built-in admin interface template you have to copy the desired file into your templates directory, manually.  Perhaps this just takes some getting used to.  Fair enough.

One issue the official Django tutorial didn't touch upon is setting up your projects "home" view (accessing / ).  It's simple, your <em>project</em> can define it's own views that can be added to your <strong>urls.py</strong> file.

[sourcecode language='python']
urlpatterns = patterns('',
    (r'^$', 'myproject.views.index'),
    (r'^admin/(.*)', admin.site.root),
)
[/sourcecode]

And in your <em>project's</em> <strong>views.py</strong> file:

[sourcecode language='python']
from django.http import HttpResponse

def index(request):
        return HttpResponse('Hello, World!')
[/sourcecode]

It also occurred to me that if apps are meant to be decoupled and packageable, and there is only one template directory (all apps template files go in this directory).  What IS the process for packaging and deploying an app into another project?  MORE manual copying?

SHRUG

That's all for now, I'm sure I'll have plenty more to comment about as I experiment.  I do like what I see though and I'm sure I have TONS to learn.  Also - please, correct me if I'm mistaken about anything above.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>155</wp:post_id>
		<wp:post_date>2009-02-08 23:15:58</wp:post_date>
		<wp:post_date_gmt>2009-02-09 04:15:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-started-with-django-and-python-first-impressions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="centos"><![CDATA[centos]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17400001]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>679</wp:comment_id>
			<wp:comment_author><![CDATA[Luke Plant]]></wp:comment_author>
			<wp:comment_author_email>L.Plant.98@cantab.net</wp:comment_author_email>
			<wp:comment_author_url>http://lukeplant.me.uk/</wp:comment_author_url>
			<wp:comment_author_IP>78.148.35.101</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 18:11:05</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 23:11:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Doing "svn up" in a Django trunk checkout won't get you Django 1.0.2 -- you want a checkout of "branches/releases/1.0.X" for that.

Django trunk is for development.  That means that it is (momentarily) identical to Django 1.0.0, 1.1.0, 1.2.0 as they come into existence.  But 1.0.2 etc contains bug fixes backported from trunk.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>677</wp:comment_id>
			<wp:comment_author><![CDATA[Carl Meyer]]></wp:comment_author>
			<wp:comment_author_email>carl@dirtcircle.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.249.231.107</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 08:32:50</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 13:32:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good article.  I'm confused about "it was somewhat surprising to me that certain files were created automatically for you with the manage.py startapp command while others weren't (such as models.py)." manage.py startapp _does_ create both models.py (the only file an app must have) and views.py.  In a trunk version of Django I believe it now also creates tests.py.

You're correct about the reason for needing INSTALLED_APPS.  Not only might you want to include Django contrib apps, Django is also designed to encourage you to write your own reusable apps.  You can just put those in a global location on your Python path and reuse them in as many projects as you want, without copying them into each one.

Django apps are _kind of_ like Rails plugins, but they include their own models, which I don't believe plugins are able to do?  Been awhile, so I'm not sure on that.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>678</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>69.123.231.66</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 09:31:11</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 14:31:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for pointing that out, crossed out that portion.  I was editing files directly on my server, must not have realized that they existed already.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>683</wp:comment_id>
			<wp:comment_author><![CDATA[Emily Ingram &raquo; links for 2009-02-10]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.emilyingram.com/2009/02/links-for-2009-02-10/</wp:comment_author_url>
			<wp:comment_author_IP>208.109.181.90</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 10:18:17</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 15:18:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Getting Started with Django and Python - First Impressions | Perplexed Labs (tags: django tips programming) [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>669</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>matt@eatsleeprepeat.net</wp:comment_author_email>
			<wp:comment_author_url>http://eatsleeprepeat.net</wp:comment_author_url>
			<wp:comment_author_IP>202.72.134.105</wp:comment_author_IP>
			<wp:comment_date>2009-02-08 23:32:38</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 04:32:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You can actually have a tuple or list of directories within TEMPLATE_DIRS in settings.py.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>670</wp:comment_id>
			<wp:comment_author><![CDATA[James Bennett]]></wp:comment_author>
			<wp:comment_author_email>james@b-list.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.b-list.org/</wp:comment_author_url>
			<wp:comment_author_IP>24.124.117.123</wp:comment_author_IP>
			<wp:comment_date>2009-02-08 23:49:52</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 04:49:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You can specify multiple template directories; TEMPLATE_DIRS is a tuple. But generally the more useful thing to do is take advantage of template loaders, which tell Django where and how to find your template. The most important built-in loader is "django.template.loaders.app_directories.load_template_source", which looks inside each installed application to find templates, thus allowing application to ship their own templates which will be used no matter what.

(also, in my experience, reusing templates across installations tends to be pretty difficult; there's usually not enough overlap in the HTML document structure of different sites to make this sort of thing feasible)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>671</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>69.123.231.66</wp:comment_author_IP>
			<wp:comment_date>2009-02-08 23:57:11</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 04:57:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks. This makes sense.  I guess it should be obvious that TEMPLATE_DIRS is a tuple (hindsight is 20/20).  Your description of "template loaders" makes even more sense.  Perfect.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1139</wp:comment_id>
			<wp:comment_author><![CDATA[Django and Python First Impressions - Part II | Perplexed Labs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.perplexedlabs.com/2009/03/20/django-and-python-first-impressions-part-ii/</wp:comment_author_url>
			<wp:comment_author_IP>69.9.189.223</wp:comment_author_IP>
			<wp:comment_date>2009-03-20 12:37:45</wp:comment_date>
			<wp:comment_date_gmt>2009-03-20 17:37:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] spent more time with Django the past couple days. Read my installation guide and my first impressions to get caught up. I wanted to address a couple issues I came across as I was exposed to certain [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2658</wp:comment_id>
			<wp:comment_author><![CDATA[Adventures in Django and Python &#8211; Part III | Perplexed Labs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com/2009/08/13/adventures-in-django-and-python-part-iii/</wp:comment_author_url>
			<wp:comment_author_IP>69.9.189.223</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 09:11:05</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 14:11:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] my previous two posts on Django and Python - Part I and Part [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2678</wp:comment_id>
			<wp:comment_author><![CDATA[Joe Devon]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/joedevon</wp:comment_author_url>
			<wp:comment_author_IP>68.4.139.229</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 11:52:29</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 16:52:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Your posts have been helpful. Still trying to figure out what directory to put that views.py in? I tried to edit it under pages, but that didn&#39;t do anything.<br><br>Also, nothing works if Debug is False, which is annoying because it&#39;s kind of a security hole. But how do you debug what&#39;s wrong when turning it on makes it work.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2679</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 12:04:01</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 17:04:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Joe,<br><br>Thanks for your comment.<br><br>views.py can go in your project root (if you have project specific views) and it can go in any apps directory (where __init__.py is) that you have in your installed apps setting.<br><br>Check your apache error_log to see why Django is crashing when you have Debug = false.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2678</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2729</wp:comment_id>
			<wp:comment_author><![CDATA[Joe Devon]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/joedevon</wp:comment_author_url>
			<wp:comment_author_IP>68.4.139.229</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 15:52:29</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 20:52:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Your posts have been helpful. Still trying to figure out what directory to put that views.py in? I tried to edit it under pages, but that didn&#39;t do anything.<br><br>Also, nothing works if Debug is False, which is annoying because it&#39;s kind of a security hole. But how do you debug what&#39;s wrong when turning it on makes it work.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2730</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 16:04:01</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 21:04:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Joe,<br><br>Thanks for your comment.<br><br>views.py can go in your project root (if you have project specific views) and it can go in any apps directory (where __init__.py is) that you have in your installed apps setting.<br><br>Check your apache error_log to see why Django is crashing when you have Debug = false.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Automated Backups - A 5 Minute Script To Safer Data</title>
		<link>http://blog.perplexedlabs.com/2009/02/09/automated-backups-a-5-minute-script-to-safer-data/</link>
		<pubDate>Mon, 09 Feb 2009 20:16:24 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=178</guid>
		<description></description>
		<content:encoded><![CDATA[Sometimes, taking a few minutes to do a simple thing will save you a headache down the road.  Like changing the oil in your car, or brushing your teeth every night, or automatically backing up your databases.

The development server that I mess around on has recently accumulated a lot of data that I really don't want to lose, so I whipped up a small script that will help to ensure this never happens.
<blockquote>#!/bin/bash
rm -f /path/to/backups/tmp/*
mysqldump --opt --host=localhost --user=USERNAME --password=PASSWORD --all-databases &gt; /path/to/backups/tmp/dbBackup.sql
tar -czvf /path/to/backups/database/mysql.`date '+%Y%m%d%H%M%S'`.tar.gz /backups/tmp
service httpd restart</blockquote>
Line by line, what's happening here is:
<ul>
	<li>delete the .sql file generated by the previous backup</li>
	<li>dump every MySQL table to a file called dbBackup.sql.  You don't have to go this far; check out <a href="http://dev.mysql.com/doc/refman/5.1/en/mysqldump.html">MySQL's documentation on mysqldump</a> for all the options</li>
	<li>tar up the dbBackup.sql file, include a timestamp in the filename</li>
	<li>restart Apache</li>
</ul>
I want this script to run every night at 1am, so I added it to the crontab:
<blockquote>0 1 * * * /path/to/backup.daily.cron</blockquote>
Obviously this is a very simple script that can grow in complexity fairly quickly.  For example, you can clear out old logs (a must for some Rails apps), and do other housekeeping functions.  A good idea would also be to have a syncing program grab that .tar and upload it to your home machine, or even an S3 bucket.

When your MySQL instance gets corrupted or otherwise obliterated, you'll thank yourself for taking 5 minutes to set this up.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date>2009-02-09 15:16:24</wp:post_date>
		<wp:post_date_gmt>2009-02-09 20:16:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>automated-backups-a-5-minute-script-to-safer-data</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="backup"><![CDATA[backup]]></category>
		<category domain="post_tag" nicename="cron"><![CDATA[cron]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="post_tag" nicename="logs"><![CDATA[logs]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="mysqldump"><![CDATA[mysqldump]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>684</wp:comment_id>
			<wp:comment_author><![CDATA[Mattias Geniar]]></wp:comment_author>
			<wp:comment_author_email>mattias.geniar@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://mattiasgeniar.be</wp:comment_author_url>
			<wp:comment_author_IP>83.101.8.56</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 14:03:24</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 19:03:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Why would you stop Apache? The mysqldump allows you to lock tables it's currently back-ing up, so insert/updates won't cause corrupt and out-of-sync data. But normal read requests are still possible through a website.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>685</wp:comment_id>
			<wp:comment_author><![CDATA[Eric]]></wp:comment_author>
			<wp:comment_author_email>speric@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.speric.net</wp:comment_author_url>
			<wp:comment_author_IP>67.153.84.90</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 14:26:04</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 19:26:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There are some other housekeeping things I do in this script, related to Rails, that I didn't include for various reasons, which make restarting the server a good idea.  But you're right, for strictly backing up a DB, you don't *have* to stop Apache.  There's not a ton of activity on this box at 1am anyway.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1294</wp:comment_id>
			<wp:comment_author><![CDATA[jb]]></wp:comment_author>
			<wp:comment_author_email>lunarnet76@msn.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.97.172.56</wp:comment_author_IP>
			<wp:comment_date>2009-03-29 19:00:24</wp:comment_date>
			<wp:comment_date_gmt>2009-03-30 00:00:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[just a small thing but ... you should first rename the backup file and then erase it when it is finished^^
In case you are very very very unlucky!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2120</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-04-22 12:49:24</wp:comment_date>
			<wp:comment_date_gmt>2009-04-22 17:49:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@william this would only apply to InnoDB tables]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2118</wp:comment_id>
			<wp:comment_author><![CDATA[William]]></wp:comment_author>
			<wp:comment_author_email>wstearns@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://wstearns.com/blog</wp:comment_author_url>
			<wp:comment_author_IP>82.196.58.36</wp:comment_author_IP>
			<wp:comment_date>2009-04-22 12:14:41</wp:comment_date>
			<wp:comment_date_gmt>2009-04-22 17:14:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If you want to do a live data dump without locking your database, just add a --single-transaction on your mysqldump line.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1614</wp:comment_id>
			<wp:comment_author><![CDATA[arslan]]></wp:comment_author>
			<wp:comment_author_email>marslan.ali@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>202.59.80.152</wp:comment_author_IP>
			<wp:comment_date>2009-04-09 01:37:44</wp:comment_date>
			<wp:comment_date_gmt>2009-04-09 06:37:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How can i backup, if i am using windows platform ?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2716</wp:comment_id>
			<wp:comment_author><![CDATA[Shai]]></wp:comment_author>
			<wp:comment_author_email>shai@content2zero.com</wp:comment_author_email>
			<wp:comment_author_url>http://content2zero.com</wp:comment_author_url>
			<wp:comment_author_IP>68.39.4.228</wp:comment_author_IP>
			<wp:comment_date>2009-11-25 13:08:39</wp:comment_date>
			<wp:comment_date_gmt>2009-11-25 18:08:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is great. Since I&#39;m new at this kind of stuff, I just need a couple more details. <br><br>In your example... does the script live in a file named "backup.daily.cron"?<br><br>What does the comment "/bin/bash" mean. Is that the directory you stored the file in? Does it matter what directory you store the file in?<br><br>Thanks much.<br><br>Shai Gluskin]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2731</wp:comment_id>
			<wp:comment_author><![CDATA[Shai]]></wp:comment_author>
			<wp:comment_author_email>shai@content2zero.com</wp:comment_author_email>
			<wp:comment_author_url>http://content2zero.com</wp:comment_author_url>
			<wp:comment_author_IP>68.39.4.228</wp:comment_author_IP>
			<wp:comment_date>2009-11-25 18:08:39</wp:comment_date>
			<wp:comment_date_gmt>2009-11-25 23:08:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is great. Since I&#39;m new at this kind of stuff, I just need a couple more details. <br><br>In your example... does the script live in a file named "backup.daily.cron"?<br><br>What does the comment "/bin/bash" mean. Is that the directory you stored the file in? Does it matter what directory you store the file in?<br><br>Thanks much.<br><br>Shai Gluskin]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Tumblelogs, Image Manipulation, and You</title>
		<link>http://blog.perplexedlabs.com/2009/02/12/tumblelogs-image-manipulation-and-you/</link>
		<pubDate>Thu, 12 Feb 2009 19:49:17 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=185</guid>
		<description></description>
		<content:encoded><![CDATA[After trying for many years to maintain a personal blog, with many starts and stop, I have given up.  I realized I don't *want* to write personal thoughts on the web.  Instead, I've been messing around with my own custom tumblelog scripts.  I use delicious, Flickr, last.fm, and other services that I want to aggregate in one place.  I know there are services out there that do this already, but I thought rolling my own would be a good excuse to dust off my PHP skills.

One feature I wanted to have was the ability to grab images from other sites, re-size them, and copy them to my local server.    Nothing special, but very useful.
[sourcecode language="php"]$remote_image = "some_img_url";

$ch = curl_init();
curl_setopt ($ch, CURLOPT_URL, $remote_image);
curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, 0);

$file_as_string = curl_exec($ch);
$new_file_name =  substr(strrchr($remote_image, "/"), 1);
$path_to_img = '/path/to/image/folder/'.$new_file_name;

resizeImage($file_as_string, 600, $path_to_img);

curl_close($ch);

function resizeImage($img_as_string, $max_width, $dst){
   $image = imagecreatefromstring($img_as_string);
   $orig_width = imagesx($image);
   $orig_height = imagesy($image);

   $width = $orig_width;
   $height = $orig_height;

   if ($orig_width > $max_width){
      $height = ($orig_height * $max_width) / $orig_width;
      $width = $max_width;
   }			

   $image_p = imagecreatetruecolor($width, $height);

   imagecopyresampled($image_p, $image, 0, 0, 0, 0, $width, $height, $orig_width, $orig_height);

   imagejpeg($image_p, $dst, 100);
}[/sourcecode]
What this script does is:
<ul>
	<li>using curl, grab the image remotely (as a string)</li>
	<li>parse the name of the image, create a string that represents the server path to copy the image to</li>
	<li>proportionally resize the image if it's wider than 600 pixels</li>
	<li>save it</li>
</ul>
This code can be easily modified to resize the image if it's taller than x pixels.  I made a very simple form, so now I can supply the script with the image url, and it takes care of the rest.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>185</wp:post_id>
		<wp:post_date>2009-02-12 14:49:17</wp:post_date>
		<wp:post_date_gmt>2009-02-12 19:49:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tumblelogs-image-manipulation-and-you</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="curl"><![CDATA[curl]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="images"><![CDATA[images]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="resize"><![CDATA[resize]]></category>
		<category domain="post_tag" nicename="tumbelog"><![CDATA[tumbelog]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17400004]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Django and Python First Impressions - Part II</title>
		<link>http://blog.perplexedlabs.com/2009/03/20/django-and-python-first-impressions-part-ii/</link>
		<pubDate>Fri, 20 Mar 2009 15:05:51 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[I've spent more time with Django the past couple days.  Read my <a href="http://www.perplexedlabs.com/2008/11/10/setup-python-25-mod_wsgi-and-django-10-on-centos-5-cpanel/">installation guide</a> and my <a href="http://www.perplexedlabs.com/2009/02/08/getting-started-with-django-and-python-first-impressions/">first impressions</a> to get caught up.  I wanted to address a couple issues I came across as I was exposed to certain architectural designs of Django.

It might be helpful to note which books available today cover Django 1.0.  I do realize that the "official" Django book covering 1.0 is in the works, but, in the meantime I recommend <a href="http://www.amazon.com/gp/product/0132356139?ie=UTF8&tag=perplabs-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0132356139">Python Web Development with Django (Developer's Library)</a><img src="http://www.assoc-amazon.com/e/ir?t=perplabs-20&l=as2&o=1&a=0132356139" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> and <a href="http://www.amazon.com/gp/product/1430210478?ie=UTF8&tag=perplabs-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=1430210478">Pro Django (Expert's Voice in Web Development)</a><img src="http://www.assoc-amazon.com/e/ir?t=perplabs-20&l=as2&o=1&a=1430210478" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />.

Lets start with the template system.  While Django's template system is powerful, I'm sure, it's basically a free for all of file names and directory structures.  You could conceivably create a single 'templates' directory and place all of a projects template files in that directory (naming the files as you please) for any and all the apps that compose the project.  While it's not recommended you actually do that, Django would support it because it doesn't seem to really dictate or enforce any particular convention.  I feel like Rails, comparatively speaking, provides solid conventions for a developer to follow in terms of file naming, directory naming, and directory structure.

I was also surprised at the fact that Django does NOT bundle a pluralization library.  Even simple cases (ending in <strong>y</strong> to <strong>ies</strong>) aren't handled automatically.  A model named 'Category' appears as 'Categorys'.  It does provide support for explicitly specifying plural names for Models via the <strong>verbose_name_plural</strong> Meta property:

[sourcecode language="python"]
class Category(models.Model):
    name = models.CharField(max_length=128)
    class Meta:
        verbose_name_plural = 'categories'
[/sourcecode]

Coming from a world of a custom built PHP framework - it's REALLY nice to have features like the command line sandbox to be able to play with Models and interact with the project's codebase.  It's also great that Django bundles a development webserver for a quick and easy create-test-edit cycle.  It recognizes changes to your code while it's running - there's no need to restart manually.

The effects are immeasurable with respect to the fact that Python functions are first-class.  Django uses this extensively (such as your URL configuration or default values for Models).  It's extremely intuitive to be able to do the following in your Model definition:

[sourcecode language="python"]
class Post(models.model)
    stamp = models.DateTimeField(default=datetime.now)
[/sourcecode]

Notice this wasn't written as <strong>datetime.now()</strong>.  That would actually execute the function when the class is declared and all entries would receive an identical stamp.  Instead we're passing a <em>reference</em> to the function.  Django detects this and calls the function when the Model is instantiated.

I'm also excited about the way the Django framework handles requests and responses.  The concept of the view receiving an HttpRequest object, giving context, and returning an HttpResponse object just makes sense.  It's very much in line with the way HTTP works.  It's simple, powerful, and elegant.

I've read about (<a href="http://www.youtube.com/watch?v=i6Fr65PFqfk">and watched video of</a>) some issues that people have with Django.  These usually refer to difficulties one <em>may</em> have scaling it.  Lack of built-in support for multiple databases and sharding are cited, among other reasons.  I think, for what it's able to do right out of the box, it's fantastic.  Scaling (in general) isn't always straightforward.  In many cases it requires specific tools and solutions for the task at hand.  These issues should in no way prevent you from using Django for a project!

More soon.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date>2009-03-20 10:05:51</wp:post_date>
		<wp:post_date_gmt>2009-03-20 15:05:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>django-and-python-first-impressions-part-ii</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17400007]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1136</wp:comment_id>
			<wp:comment_author><![CDATA[Joel Bernstein]]></wp:comment_author>
			<wp:comment_author_email>bergamot@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.dazethesea.net/</wp:comment_author_url>
			<wp:comment_author_IP>66.206.92.54</wp:comment_author_IP>
			<wp:comment_date>2009-03-20 11:40:23</wp:comment_date>
			<wp:comment_date_gmt>2009-03-20 16:40:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Django does have pluralization:

http://docs.djangoproject.com/en/dev/topics/i18n/#pluralization

Unfortunately, it's an extremely difficult problem to solve globally, because the rules change from language to language. Polish is often mentioned as a worst-case because they have something like five forms of a noun for various quantities.

So really, you can either write a globally-correct system that works with all known languages but is massively overkill for simple English uses, or you can write a provincial singular/plural function that annoys translators.

I've never used Rails, so I have no idea what they offer, but I suspect it's the latter.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1137</wp:comment_id>
			<wp:comment_author><![CDATA[Jason Christa]]></wp:comment_author>
			<wp:comment_author_email>megaman821@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.202.253.126</wp:comment_author_IP>
			<wp:comment_date>2009-03-20 11:47:40</wp:comment_date>
			<wp:comment_date_gmt>2009-03-20 16:47:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree with you that Django should have better model pluralization. There is a great BSD library, http://www.bermi.org/inflector/download, that they could roll into Django one day or you can use it yourself.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1138</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-03-20 12:34:06</wp:comment_date>
			<wp:comment_date_gmt>2009-03-20 17:34:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You know, I think it's about the common cases.  I understand how difficult solving the problem for every nuance of a given set of the world's major languages might be - why not provide built-in automatic pluralization for the most commonly used cases?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1140</wp:comment_id>
			<wp:comment_author><![CDATA[rates]]></wp:comment_author>
			<wp:comment_author_email>sean@appoil.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.exchangerates24.com</wp:comment_author_url>
			<wp:comment_author_IP>58.38.73.246</wp:comment_author_IP>
			<wp:comment_date>2009-03-20 12:40:31</wp:comment_date>
			<wp:comment_date_gmt>2009-03-20 17:40:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Welcome to the world of Django!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1144</wp:comment_id>
			<wp:comment_author><![CDATA[huxley]]></wp:comment_author>
			<wp:comment_author_email>poisonkitchen@mac.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>142.177.172.47</wp:comment_author_IP>
			<wp:comment_date>2009-03-20 17:11:49</wp:comment_date>
			<wp:comment_date_gmt>2009-03-20 22:11:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[For something that is so easy to set up manually in Django it seems a bit wasteful to use up cycles each time you display a model in the Admin.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1147</wp:comment_id>
			<wp:comment_author><![CDATA[Adrian Holovaty]]></wp:comment_author>
			<wp:comment_author_email>adrian@holovaty.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.holovaty.com/</wp:comment_author_url>
			<wp:comment_author_IP>66.93.206.98</wp:comment_author_IP>
			<wp:comment_date>2009-03-20 20:52:51</wp:comment_date>
			<wp:comment_date_gmt>2009-03-21 01:52:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There is absolutely no good reason, whatsoever, that a Web framework should know that the proper pluralization of "octopus" is "octopi."

Spend the five seconds defining "verbose_name_plural."]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1156</wp:comment_id>
			<wp:comment_author><![CDATA[Frank Wiles]]></wp:comment_author>
			<wp:comment_author_email>frank@revsys.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.revsys.com</wp:comment_author_url>
			<wp:comment_author_IP>24.124.28.6</wp:comment_author_IP>
			<wp:comment_date>2009-03-21 13:12:38</wp:comment_date>
			<wp:comment_date_gmt>2009-03-21 18:12:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Also, while what you have does work the more traditional Django way of doing the timestamp would be to just define the field as models.DateTimeField(auto_now_add=True) which accomplishes the same thing.  See http://docs.djangoproject.com/en/dev/ref/models/fields/#datefield for more info on it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2664</wp:comment_id>
			<wp:comment_author><![CDATA[Adventures in Django and Python &#8211; Part III | Perplexed Labs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com/2009/08/13/adventures-in-django-and-python-part-iii/</wp:comment_author_url>
			<wp:comment_author_IP>69.9.189.223</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 10:24:00</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 15:24:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Read my previous two posts on Django and Python - Part I and Part II [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>PHP libmemcached via memcached and igbinary</title>
		<link>http://blog.perplexedlabs.com/2009/05/04/php-libmemcached-via-memcached-and-igbinary/</link>
		<pubDate>Mon, 04 May 2009 15:00:41 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=215</guid>
		<description></description>
		<content:encoded><![CDATA[Found some great PHP resources that I'd like to share.  I haven't seen much talk of these so I'm hoping I can help spread the word.

First off <strong><a href="http://tangent.org/552/libmemcached.html">libmemcached</a></strong>.  

Most PHP folks are familiar with the <strong><a href="http://pecl.php.net/package/memcache">memcache</a></strong> (note the lack of a 'd' in the name) PECL extension.  This extension exposes a simple API for PHP apps to interact with memcache instances.  It works - it's simple, stable, and has been available since 2004.  Nothing special.

On the other hand, <strong><a href="http://tangent.org/552/libmemcached.html">libmemcached</a></strong> "is a small, thread-safe client library for the memcached protocol. The code has all been written with an eye to allow for both web and embedded usage."  - "It has been designed to be light on memory usage, thread safe, and provide full access to server side methods."  And, fortunately, there's a new PECL extension that wraps libmemcached in a client library for PHP called <strong><a href="http://www.pecl.php.net/package/memcached">memcached</a></strong> (note the 'd').  It was released in late January and is still considered "beta" however in my testing it has been stable.  This extension provides a rich interface to your memcache instances including the new check and set (cas), replace, and append operations.  As libmemcached becomes more widely adopted and its development continues, it makes sense to unify support behind a common library.

Lastly, <strong><a href="http://opensource.dynamoid.com/">igbinary</a></strong>.  This is a PHP extension which provides <em>binary</em> serialization for PHP objects and data.  It's a drop in replacement for PHP's built in serializer.  Why is this important?  When storing data in memcache it is first serialized (this is done automatically by the client library, such as memcached).  Conversely when retrieving data from memcache the data is unserialized.  The default PHP serializer uses a textual representation of data and objects.  This is a waste of memory.   Also, as objects increase in size and complexity the time it takes to (un)serialize increases significantly.  Igbinary stores data in a compact binary format which reduces the memory footprint and performs operations faster.  Most importantly memcached has built in support to take advantage of igbinary as its default serializer, yet another reason to use it as your memcache client library.

Check these resources out and let me know how they work for you!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>215</wp:post_id>
		<wp:post_date>2009-05-04 10:00:41</wp:post_date>
		<wp:post_date_gmt>2009-05-04 15:00:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-libmemcached-via-memcached-and-igbinary</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="igbinary"><![CDATA[igbinary]]></category>
		<category domain="post_tag" nicename="libmemcached"><![CDATA[libmemcached]]></category>
		<category domain="post_tag" nicename="memcache"><![CDATA[memcache]]></category>
		<category domain="post_tag" nicename="pecl"><![CDATA[pecl]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2723</wp:comment_id>
			<wp:comment_author><![CDATA[Oliver Nassar]]></wp:comment_author>
			<wp:comment_author_email>onassar@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olivernassar.com/</wp:comment_author_url>
			<wp:comment_author_IP>71.139.16.68</wp:comment_author_IP>
			<wp:comment_date>2009-12-19 01:47:34</wp:comment_date>
			<wp:comment_date_gmt>2009-12-19 06:47:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice summary. People are generally unaware of the difference between the two extensions (I was until recently; it&#39;s a weird difference and naming convention, so no blame to be cast).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2734</wp:comment_id>
			<wp:comment_author><![CDATA[Oliver Nassar]]></wp:comment_author>
			<wp:comment_author_email>onassar@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.olivernassar.com/</wp:comment_author_url>
			<wp:comment_author_IP>71.139.16.68</wp:comment_author_IP>
			<wp:comment_date>2009-12-19 06:47:34</wp:comment_date>
			<wp:comment_date_gmt>2009-12-19 11:47:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice summary. People are generally unaware of the difference between the two extensions (I was until recently; it&#39;s a weird difference and naming convention, so no blame to be cast).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4120</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>zjcli@sohu.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-10-29 10:05:00</wp:comment_date>
			<wp:comment_date_gmt>2011-10-29 10:05:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Do you mean that I don't need to add igbinary extension for my php app server.(My server has memcache support,and via phpinfo method ,I've seen that extension infomation).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4055</wp:comment_id>
			<wp:comment_author><![CDATA[PHP Memcache vs. Memcached | BLACKBELT]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blackbe.lt/php-memcache-vs-memcached/</wp:comment_author_url>
			<wp:comment_author_IP>173.230.130.33</wp:comment_author_IP>
			<wp:comment_date>2011-08-22 11:10:16</wp:comment_date>
			<wp:comment_date_gmt>2011-08-22 16:10:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] install of the memcached module. The primary reason for this would be it&#8217;s use of the igbinary PHP extension; a drop in replacement for PHP&#8217;s serializer. There is currently a 2.0 beta [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3844</wp:comment_id>
			<wp:comment_author><![CDATA[Guest]]></wp:comment_author>
			<wp:comment_author_email>kolhe_sanket@rediffmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-05-30 10:20:00</wp:comment_date>
			<wp:comment_date_gmt>2011-05-30 10:20:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Php-memcached client also has capability of creating namespace.

http://www.lampdeveloperworld.in/ ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3759</wp:comment_id>
			<wp:comment_author><![CDATA[JQueryin | PHP Memcache vs. Memcached]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.jqueryin.com/2011/04/19/php-memcache-vs-memcached/</wp:comment_author_url>
			<wp:comment_author_IP>74.207.235.96</wp:comment_author_IP>
			<wp:comment_date>2011-04-19 20:34:14</wp:comment_date>
			<wp:comment_date_gmt>2011-04-20 01:34:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] install of the memcached module. The primary reason for this would be it&#8217;s use of the igbinary PHP extension; a drop in replacement for PHP&#8217;s serializer. There is currently a 2.0 beta [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>PHP jQuery AJAX Javascript Long Polling</title>
		<link>http://blog.perplexedlabs.com/2009/05/04/php-jquery-ajax-javascript-long-polling/</link>
		<pubDate>Mon, 04 May 2009 14:00:14 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=217</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Background</h3>

"Long polling" is the name used to describe a technique which:

<ul>
<li>An AJAX request is made (utilizing a javascript framework such as jQuery)
<li>The server waits for the data requested to be available, loops, and sleeps (your server-side PHP script)
<li>This loop repeats after data is returned to the client and processed (usually in your AJAX request's onComplete callback function)
</ul>

This essentially simulates a continuous real-time stream from the client to the server.  It can be more efficient than a regular polling technique because of the reduction in HTTP requests.  You're not asking over and over and over again for new data - you ask once and wait for an answer.  In most cases this reduces the latency in which data becomes available to your application.

There are a variety of use cases in which this technique can be handy.  At the top of the list are real-time web-based chat applications.  Each client executes a long polling loop for chat and user events (sign on/sign off/new message).  <a href="http://www.meebo.com">Meebo</a> is perhaps the greatest example of this.

It's important to note some of the server side technical limitations of long polling.  Because connections remain open for considerably longer time than a typical HTTP request/response cycle you want your web server to be able to handle a large number of simultaneous connections.  Apache isn't the best candidate for this type of situation.  <a href="http://nginx.net/">nginx</a> and <a href="http://www.lighttpd.net/">lighttpd</a> are two lightweight web servers built from the ground up to handle a high volume of simultaneous connections.  Both support the FastCGI interface and as such can be configured to support PHP.  Again, Meebo uses lighttpd.

For similar reasons - it's also a good idea to choose a different sub-domain to handle long polling traffic.  Because of client side browser limitations you don't want long polling connections interfering with regular HTTP traffic delivering page and media resources for your application.

<h3>Implementation</h3>

<a href="http://www.jquery.com">jQuery</a> makes implementation a breeze.

[sourcecode language="javascript"]
var lpOnComplete = function(response) {
	alert(response);
	// do more processing
	lpStart();
};

var lpStart = function() {
	$.post('/path/to/script', {}, lpOnComplete, 'json');
};

$(document).ready(lpStart);
[/sourcecode]

Straightforward.  When the document is ready the loop begins.  Each iteration the returned data is processed and the loop is restarted.

On the server side - just like we discussed earlier:

[sourcecode language="php"]
$time = time();
while((time() - $time) &lt; 30) {
	// query memcache, database, etc. for new data
	$data = $datasource-&gt;getLatest();
	
	// if we have new data return it
	if(!empty($data)) {
		echo json_encode($data);
		break;
	}
	
	usleep(25000);
}
[/sourcecode]

Actually, a couple points of interest here.  We don't actually loop <em>infinitely</em> server side.  You may have noticed the logic for the while loop - if we've executed for more than 30 seconds we discontinue the loop and return nothing.  This nearly eliminates the possibility of substantial memory leaks.  Also, if we didn't put a cap on execution time we would need to print a "space" character and flush output buffers every iteration of the loop to keep PHP abreast to the status of this process/connection.  <strong>Without output being sent PHP cannot determine if the connection was lost via connection_status() or connection_aborted()</strong>.  As a result this could lead to a situation where there are an increasing number of "ghost" processes eating up server resources.  Not good!

That pretty much sums it up!  Not that difficult, right?

As always, questions/comments are welcome, hope this helps!

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date>2009-05-04 09:00:14</wp:post_date>
		<wp:post_date_gmt>2009-05-04 14:00:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-jquery-ajax-javascript-long-polling</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[ajax]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="lighttpd"><![CDATA[lighttpd]]></category>
		<category domain="post_tag" nicename="long-polling"><![CDATA[long polling]]></category>
		<category domain="post_tag" nicename="nginx"><![CDATA[nginx]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2578</wp:comment_id>
			<wp:comment_author><![CDATA[Rowan]]></wp:comment_author>
			<wp:comment_author_email>rowan@rowanhenderson.com</wp:comment_author_email>
			<wp:comment_author_url>http://rowanhenderson.com</wp:comment_author_url>
			<wp:comment_author_IP>206.223.222.216</wp:comment_author_IP>
			<wp:comment_date>2009-05-05 04:56:16</wp:comment_date>
			<wp:comment_date_gmt>2009-05-05 09:56:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello. This is the best source of info I have found on this technique using jQuery, but I have a quick question. what would be a good example to use for $data = $datasource-&gt;getLatest();

currently when i make getLast() output anything, it will just make the loop go extremely fast and output all the data, even if I make it statically output the number 4, it will still loop it, even though the data is the same... does this make sense?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2615</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-06-09 12:09:20</wp:comment_date>
			<wp:comment_date_gmt>2009-06-09 17:09:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dave,<br><br>No, using FastCGI as an interface for PHP and Apache wouldn&#39;t help.  It&#39;s Apache itself thats the problem.  It isn&#39;t a web server meant for a high-volume of simultaneously open connections.<br><br>It isn&#39;t that difficult to get up and running with lighttpd on a cPanel box.<br><br>-Matt]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2614</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2616</wp:comment_id>
			<wp:comment_author><![CDATA[Dave]]></wp:comment_author>
			<wp:comment_author_email>d.reade@readesresidential.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.105.168.59</wp:comment_author_IP>
			<wp:comment_date>2009-06-09 18:19:35</wp:comment_date>
			<wp:comment_date_gmt>2009-06-09 23:19:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What about LiteSpeed with FastCGI support? Any known issues with that or does it fall under the same category as Lighttpd and nginx?<br><br>Thanks,<br><br>Dave]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2615</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2617</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-06-09 19:16:40</wp:comment_date>
			<wp:comment_date_gmt>2009-06-10 00:16:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dave,<br><br>I think you&#39;re thinking about this wrong.  You don&#39;t need FastCGI in order to scale an app that uses this technique.  FastCGI just happens to be a common interface of servers that are able to scale with an app using this technique.<br><br>Lighttpd would be my suggested choice given that it&#39;s easy to get PHP up and running on it and is fairly easy to install.<br><br>-Matt]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2616</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2618</wp:comment_id>
			<wp:comment_author><![CDATA[Dave]]></wp:comment_author>
			<wp:comment_author_email>d.reade@readesresidential.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.105.174.167</wp:comment_author_IP>
			<wp:comment_date>2009-06-10 04:32:11</wp:comment_date>
			<wp:comment_date_gmt>2009-06-10 09:32:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[OK, thanks Matt, much appreciated.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2617</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2614</wp:comment_id>
			<wp:comment_author><![CDATA[Dave]]></wp:comment_author>
			<wp:comment_author_email>d.reade@readesresidential.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.105.174.167</wp:comment_author_IP>
			<wp:comment_date>2009-06-09 11:31:47</wp:comment_date>
			<wp:comment_date_gmt>2009-06-09 16:31:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for writing this, it&#39;s pretty much what I&#39;ll be working on over the next few weeks. One question I have though is we&#39;re running Apache 2.2.11 and PHP 5.2.9 on a cPanel box. I don&#39;t want to switch to another web server if I can help it, though cPanel does allow you to install FastCGI. Initially HTTP requests to/from the server will be low, but we have a fast enough box to support the load. Would FastCGI help us out in this instance?<br><br>Thanks in advance,<br><br>Dave]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2596</wp:comment_id>
			<wp:comment_author><![CDATA[John]]></wp:comment_author>
			<wp:comment_author_email>q123dog@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>202.63.36.97</wp:comment_author_IP>
			<wp:comment_date>2009-05-16 07:19:42</wp:comment_date>
			<wp:comment_date_gmt>2009-05-16 12:19:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks promising, is it possible to expand this out a bit? Perhaps offer some demos/examples? I&#39;m trying to learn long polling, and I reckon this would help me crack it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2597</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-05-16 09:47:51</wp:comment_date>
			<wp:comment_date_gmt>2009-05-16 14:47:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[John,<br><br>Are you having trouble tailoring the example code I provided to your domain?  What are you trying to accomplish?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2596</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2601</wp:comment_id>
			<wp:comment_author><![CDATA[adrien]]></wp:comment_author>
			<wp:comment_author_email>adrien@naptiv.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>85.201.129.222</wp:comment_author_IP>
			<wp:comment_date>2009-05-29 18:12:53</wp:comment_date>
			<wp:comment_date_gmt>2009-05-29 23:12:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting but what happen if you implement this technique on a page that have other AJAX features ?<br><br>ajax requests will be queued until no response received from lpStart :x]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2602</wp:comment_id>
			<wp:comment_author><![CDATA[adrien]]></wp:comment_author>
			<wp:comment_author_email>adrien@naptiv.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>85.201.129.222</wp:comment_author_IP>
			<wp:comment_date>2009-05-29 18:24:26</wp:comment_date>
			<wp:comment_date_gmt>2009-05-29 23:24:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[mmmh that&#39;s maybe why sub-domain is a good idea, I&#39;ll try =)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2601</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2603</wp:comment_id>
			<wp:comment_author><![CDATA[Way]]></wp:comment_author>
			<wp:comment_author_email>this.vey@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>91.37.88.183</wp:comment_author_IP>
			<wp:comment_date>2009-06-01 06:31:11</wp:comment_date>
			<wp:comment_date_gmt>2009-06-01 11:31:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I&#39;m working for a couple of weeks with that kind of ajax techniques. At the moment I&#39;m standing before a big problem. Let me explain:<br>As in this implementation above I use an while-loop on server side. Before i start this while, I start the session and check, if the current user is logged in.<br>So here is my problem. I find out that the session is the reason for my problem. Cause if I break the client request via hitting F5 to refresh the page and my script loads again, it have to wait until the server leaves the while-loop.<br>For example, i poll the server and my while looks exactly like that above and runs 30 seconds.<br>If I refresh my page and make a new request to server after 5 seconds, my client has to wait for the rest of 25 seconds until the server recognize the new request and starts the while again.<br><br>This is quite not that what I want. Have anyone an idea or solution?<br>I&#39;ve tried things like "ignore_user_abort(false)" but that&#39;s not the answer of my problem.<br><br>btw. I&#39;m from Germany so sorry for my very own version of English ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2606</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-06-01 14:55:47</wp:comment_date>
			<wp:comment_date_gmt>2009-06-01 19:55:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Way,<br><br>I believe this has to do with PHP Sessions using the default "files" save_handler.  In order to prevent race conditions with data inside the $_SESSION variable PHP locks the file its storing the data in.  A second request that tries to initiate a session tries to access this same file and waits for it to become available.<br><br>If you use a custom session save_handler (like memcache or your database) and implement variable level locking (instead of session level locking) you can circumvent this problem.<br><br>Perhaps this is a good blog post, I&#39;ll write something up.<br><br>Thanks,<br><br>-Matt]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2603</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2607</wp:comment_id>
			<wp:comment_author><![CDATA[Way]]></wp:comment_author>
			<wp:comment_author_email>this.vey@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>91.37.67.102</wp:comment_author_IP>
			<wp:comment_date>2009-06-01 19:26:19</wp:comment_date>
			<wp:comment_date_gmt>2009-06-02 00:26:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you very much Matt,<br><br>I&#39;ve suspected that. Actually I try to work with comet and an iframe-technique. But i think there is that problem too. So I will definitely need a custom session handler.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2606</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2589</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-05-05 08:36:24</wp:comment_date>
			<wp:comment_date_gmt>2009-05-05 13:36:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Rowan

The purpose of that line of code would be where you would check a datasource (memcache, mysql db, etc.) for new data.  In a chat application your app will receive events from chat clients (new msgs, status updates, etc.).  You would need to do some logic in this method to check to make sure you aren't sending the same data over and over again.

You only want to output something (and break execution of the "infinite" loop) if theres something that NEEDS to be output.  Notice the "break;" within the if.  Essentially its only going to echo output and break the loop if the data returned from the getLatest() call isn't empty (as in, "we have new events").

I think the reason why your loop is going really fast is exactly because you're returning a constant like the number 4, which ISNT empty.  The loop echo's, break's and jQuery restarts it.

Does this help?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2620</wp:comment_id>
			<wp:comment_author><![CDATA[PHP jQuery AJAX Javascript Long Polling | Perplexed Labs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://devezine.com/php-jquery-ajax-javascript-long-polling-perplexed-labs/</wp:comment_author_url>
			<wp:comment_author_IP>75.119.200.5</wp:comment_author_IP>
			<wp:comment_date>2009-06-25 07:22:29</wp:comment_date>
			<wp:comment_date_gmt>2009-06-25 12:22:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the original here: PHP jQuery AJAX Javascript Long Polling | Perplexed Labs   Share and [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2621</wp:comment_id>
			<wp:comment_author><![CDATA[Az]]></wp:comment_author>
			<wp:comment_author_email>jeerums@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>84.50.207.125</wp:comment_author_IP>
			<wp:comment_date>2009-06-25 12:02:13</wp:comment_date>
			<wp:comment_date_gmt>2009-06-25 17:02:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Try session_write_close(); I wasted 2 weeks of my life to get rid of it, But session_write_close() helped me. Problem was exactly the same.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2603</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2690</wp:comment_id>
			<wp:comment_author><![CDATA[imwoodie]]></wp:comment_author>
			<wp:comment_author_email>widiwoodpecker@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>118.96.121.83</wp:comment_author_IP>
			<wp:comment_date>2009-09-10 03:37:59</wp:comment_date>
			<wp:comment_date_gmt>2009-09-10 08:37:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, I&#39;m using jquery-1.3.2.. I try to implement your code and is running well in FF, safari, and opera. but it doesn&#39;t work in IE.. would you like to give me a clue.. thank you]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2687</wp:comment_id>
			<wp:comment_author><![CDATA[d1Mm]]></wp:comment_author>
			<wp:comment_author_email>test995@mail.ru</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.181.236.241</wp:comment_author_IP>
			<wp:comment_date>2009-09-03 10:39:36</wp:comment_date>
			<wp:comment_date_gmt>2009-09-03 15:39:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt; sleep(25000);<br>it&#39;s about 7 hours ;)<br>may be usleep(25000) ?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2691</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>63.208.173.195</wp:comment_author_IP>
			<wp:comment_date>2009-09-11 13:11:55</wp:comment_date>
			<wp:comment_date_gmt>2009-09-11 18:11:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[have you tried enabling script debugging to see what line of code is causing the problem?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2690</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2692</wp:comment_id>
			<wp:comment_author><![CDATA[imwoodie]]></wp:comment_author>
			<wp:comment_author_email>widiwoodpecker@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>202.70.61.14</wp:comment_author_IP>
			<wp:comment_date>2009-09-12 13:02:26</wp:comment_date>
			<wp:comment_date_gmt>2009-09-12 18:02:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[thanks for reply matt.. appreciate.<br><br>well there&#39;s no error code in I.E, I&#39;m not using jason but xml as a data..<br>here are code that I try to implement :<br><br><code><br>	var lpOnComplete = function(response) {<br>		$(response).find(&#39;id&#39;).each(function(){<br>			var id = $(this); <br>			bidid = id.attr("id");<br>			alert(&#39;bidid&#39;);<br>		// do more processing<br>		});<br>		<br>		lpStart();<br>	};<br>	<br>	var lpStart = function() {<br>		//$.ajaxSetup({ cache: false });<br>		$.get(&#39;proc.php&#39;,  { }, lpOnComplete, &#39;XML&#39;);<br>	};<br>	<br>	$(document).ready(lpStart);<br><code><br><br>This is <em>proc.php</em>, I&#39;m using memcache<br><br><code><br>&lt;?php<br>$time = time();<br>while((time() - $time) &lt; 30) {<br><br>	// query memcache, database, etc. for new data<br>	$memcache_obj = memcache_connect(&#39;127.0.0.1&#39;, 11211);<br>	$data = "&lt;?xml version=&#39;1.0&#39; encoding=&#39;iso-8859-1&#39;?&gt;<br>		  &lt;data&gt;" . memcache_get($memcache_obj, &#39;bid&#39;) . "&lt;/data&gt;"; <br><br>	// data is always new<br>	if(!empty($data)) {<br>		Header("Content-Type: text/xml");<br>		echo $data;<br>		break;<br>	}<br>	usleep(2500);<br>	flush();<br>}<br>?&gt;<br></code><br><br>It doesn&#39;t work in I.E<br><br>Thanks again matt</code></code>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2691</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2693</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>71.58.208.198</wp:comment_author_IP>
			<wp:comment_date>2009-09-12 14:26:01</wp:comment_date>
			<wp:comment_date_gmt>2009-09-12 19:26:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A couple things.<br><br>You should move your memcache connection line outside the while loop - you don&#39;t want to reconnect every iteration.<br><br>$data, the way you have it written, can never be empty so the loop will always only run one iteration.<br><br>If there are no script errors being reported, is an empty alert box being displayed?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2692</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2694</wp:comment_id>
			<wp:comment_author><![CDATA[imwoodie]]></wp:comment_author>
			<wp:comment_author_email>widiwoodpecker@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>202.70.61.14</wp:comment_author_IP>
			<wp:comment_date>2009-09-12 21:23:08</wp:comment_date>
			<wp:comment_date_gmt>2009-09-13 02:23:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[thanks for correction in memcache matt..<br><br>sorry, the code above was alert(bidid) not alert(&#39;bidid&#39;);<br>the alert box is displayed well with returned data from xml<br>it works in all browser except in I.E all version<br>in I.E the alert box is not displayed.. that&#39;s the problem<br><br>is there any special code for I.E?<br>how to make it works in all brower matt with no exceptiom, <br>I&#39;m getting stuck with it.<br><br>Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2693</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2695</wp:comment_id>
			<wp:comment_author><![CDATA[Marko Jovanovic]]></wp:comment_author>
			<wp:comment_author_email>okram666@sbb.rs</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>188.2.208.23</wp:comment_author_IP>
			<wp:comment_date>2009-09-15 15:51:53</wp:comment_date>
			<wp:comment_date_gmt>2009-09-15 20:51:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you... Thank you...Hey did i say THANK YOU!<br>You probably saved 2 weeks of my life :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2621</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2713</wp:comment_id>
			<wp:comment_author><![CDATA[Resources for PHP Webmail &laquo; David Woodfield]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://davidwoodfield.wordpress.com/2009/11/24/resources-for-php-webmail/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.246.66</wp:comment_author_IP>
			<wp:comment_date>2009-11-24 11:55:23</wp:comment_date>
			<wp:comment_date_gmt>2009-11-24 16:55:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://blog.perplexedlabs.com/2009/05/04/php-jquery-ajax-javascript-long-polling/ [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2719</wp:comment_id>
			<wp:comment_author><![CDATA[TJ Mapes]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/people/TJ-Mapes/16913244</wp:comment_author_url>
			<wp:comment_author_IP>38.98.151.10</wp:comment_author_IP>
			<wp:comment_date>2009-12-01 16:37:28</wp:comment_date>
			<wp:comment_date_gmt>2009-12-01 21:37:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow great post, does this FB Work?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2732</wp:comment_id>
			<wp:comment_author><![CDATA[TJ Mapes]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/people/TJ-Mapes/16913244</wp:comment_author_url>
			<wp:comment_author_IP>38.98.151.10</wp:comment_author_IP>
			<wp:comment_date>2009-12-01 21:37:28</wp:comment_date>
			<wp:comment_date_gmt>2009-12-02 02:37:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow great post, does this FB Work?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2780</wp:comment_id>
			<wp:comment_author><![CDATA[mtthwkfmn]]></wp:comment_author>
			<wp:comment_author_email>matt@mtthwkfmn.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.65.205.15</wp:comment_author_IP>
			<wp:comment_date>2010-03-28 06:41:33</wp:comment_date>
			<wp:comment_date_gmt>2010-03-28 11:41:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello,<br><br>Awesome post on jQuery and PHP implementation!<br><br>I like the 30 second handler implementation...really simple and good idea to handle it there...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2830</wp:comment_id>
			<wp:comment_author><![CDATA[Mirgorod Vadym]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/Mirgorodo</wp:comment_author_url>
			<wp:comment_author_IP>92.112.216.211</wp:comment_author_IP>
			<wp:comment_date>2010-05-16 19:48:07</wp:comment_date>
			<wp:comment_date_gmt>2010-05-17 00:48:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It is very nice. I&#39;ll try this tommorow. Thanks to author :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3756</wp:comment_id>
			<wp:comment_author><![CDATA[Vdecaux83]]></wp:comment_author>
			<wp:comment_author_email>vdecaux83@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-04-01 14:12:00</wp:comment_date>
			<wp:comment_date_gmt>2011-04-01 14:12:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice article, but can we make an other ajax-call ? While the ajax-long-polling is running ?

I don't think so, so we block any ajax actions ? Or I am wrong, I have just tried, and I've got this error.
Thanks !]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3757</wp:comment_id>
			<wp:comment_author><![CDATA[NoICE]]></wp:comment_author>
			<wp:comment_author_email>noice@centrum.cz</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-04-04 22:45:00</wp:comment_date>
			<wp:comment_date_gmt>2011-04-04 22:45:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You need to add "async:true" to config options for the main ajax request]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2602</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3986</wp:comment_id>
			<wp:comment_author><![CDATA[Facebook-Like Shoutbox (Miscellaneous) || Reviews : Graphics, Code, Video ,Audio, 3d Downloads]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://files.tipsor.com/files/facebook-like-shoutbox-miscellaneous.html</wp:comment_author_url>
			<wp:comment_author_IP>74.81.74.81</wp:comment_author_IP>
			<wp:comment_date>2011-07-18 09:01:39</wp:comment_date>
			<wp:comment_date_gmt>2011-07-18 14:01:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] than a regular polling technique because of the reduction in HTTP requests&#8221; (learn more at : http://blog.perplexedlabs.com/2009/05/04/php-jquery-ajax-javascript-long-polling/ ). Obviously, this method delivers a very high refresh rate of the shoutbox messages ! (Note that [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4043</wp:comment_id>
			<wp:comment_author><![CDATA[Kal]]></wp:comment_author>
			<wp:comment_author_email>kal_1983uk@yahoo.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-08-19 08:53:00</wp:comment_date>
			<wp:comment_date_gmt>2011-08-19 08:53:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, I have successfully implemented the above solution however if i have multiple tabs open then each tab will have a polling process. Is there a way to get around this as really I only want to poll on one tab.

Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4040</wp:comment_id>
			<wp:comment_author><![CDATA[Kal]]></wp:comment_author>
			<wp:comment_author_email>kal_1983uk@yahoo.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-08-18 09:38:00</wp:comment_date>
			<wp:comment_date_gmt>2011-08-18 09:38:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great stuff!

I have successfully implemented this solution. However if I have multiple tabs open the notifications to duplicated. Is there any way to prevent this?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4110</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasonplum@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-10-16 04:46:00</wp:comment_date>
			<wp:comment_date_gmt>2011-10-16 04:46:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is possible to refactor this to use shorter code and pure JavaScript. Not sure which is best to accomplish <a href="http://techoctave.com/c7/posts/60-advanced-polling-with-jquery" rel="nofollow">simple long polling JavaScript</a> example, but I think I found it on that blog. Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10185</wp:comment_id>
			<wp:comment_author><![CDATA[Make AJAX call wait for event in php - PHP Solutions - Developers Q &amp; A]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.ggkf.com/php/make-ajax-call-wait-for-event-in-php</wp:comment_author_url>
			<wp:comment_author_IP>61.135.186.10</wp:comment_author_IP>
			<wp:comment_date>2013-10-05 22:25:56</wp:comment_date>
			<wp:comment_date_gmt>2013-10-06 03:25:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://blog.perplexedlabs.com/2009/05/04/php-jquery-ajax-javascript-long-polling/ [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4277</wp:comment_id>
			<wp:comment_author><![CDATA[Matttieu]]></wp:comment_author>
			<wp:comment_author_email>matttieu@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-05-15 19:51:00</wp:comment_date>
			<wp:comment_date_gmt>2012-05-15 19:51:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[+1]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2695</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4265</wp:comment_id>
			<wp:comment_author><![CDATA[Matt Skelton]]></wp:comment_author>
			<wp:comment_author_email>waterloomatt@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-15 17:28:00</wp:comment_date>
			<wp:comment_date_gmt>2012-02-15 17:28:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[2 years later and still a good article. Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4267</wp:comment_id>
			<wp:comment_author><![CDATA[Gaylord]]></wp:comment_author>
			<wp:comment_author_email>gaylord@100days.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-03-08 11:46:00</wp:comment_date>
			<wp:comment_date_gmt>2012-03-08 11:46:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am not sure if NginX and fastcgi help so much here. You have one running PHP process per connection, right? And that process actively polls backend resources like DB or memcache for new information. That limits your number of connections much more than apache would ever do. How about XMPP, CometD or STOMP with a queue server behind them? Then you dont have such a hard limit on concurrent connections.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>37Signals and PHP?</title>
		<link>http://blog.perplexedlabs.com/2009/04/21/37signals-and-php/</link>
		<pubDate>Tue, 21 Apr 2009 16:39:31 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=219</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.perplexedlabs.com/wp-content/uploads/2009/04/37signals_php.png"><img src="http://www.perplexedlabs.com/wp-content/uploads/2009/04/37signals_php-300x244.png" alt="37signals_php" title="37signals_php" width="300" height="244" class="aligncenter size-medium wp-image-220" /></a>

What exactly are they using it for?  Front-end?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date>2009-04-21 11:39:31</wp:post_date>
		<wp:post_date_gmt>2009-04-21 16:39:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>37signals-and-php</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="37signals"><![CDATA[37signals]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<category domain="post_tag" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17400009]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Django URL Parameter Passing and Python Strings</title>
		<link>http://blog.perplexedlabs.com/2009/04/22/django-url-parameter-passing-and-python-strings/</link>
		<pubDate>Wed, 22 Apr 2009 16:18:01 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=224</guid>
		<description></description>
		<content:encoded><![CDATA[This post is simply stating the obvious.  Sometimes even obvious things, in the wee hours of the morning, aren't so.

When you specify parameters in your URLconf like:

[sourcecode language='python']
urlpatterns = patterns('',
    url(r'^mark/(?P<id>\d+)/(?P<complete>\d+)/$', views.mark, name='mark'),
)
[/sourcecode]

Keep in mind that each captured argument is a Python string.  Even if the regex only captures integers - 'complete' is still passed as a Python string to your 'mark' view.

So if you intended to pass a 0 for false and 1 for true you must make sure to convert to an integer because only a string of length 0 is False.  ('0' == True)

[sourcecode language='python']
def mark(request, id, complete):
    todo = get_object_or_404(pk=id)
    todo.complete = int(complete)
    todo.save()
    return HttpResponse()
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>224</wp:post_id>
		<wp:post_date>2009-04-22 11:18:01</wp:post_date>
		<wp:post_date_gmt>2009-04-22 16:18:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>django-url-parameter-passing-and-python-strings</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="string"><![CDATA[string]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17400011]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2136</wp:comment_id>
			<wp:comment_author><![CDATA[Andre]]></wp:comment_author>
			<wp:comment_author_email>abossard@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>193.134.170.35</wp:comment_author_IP>
			<wp:comment_date>2009-04-23 03:57:38</wp:comment_date>
			<wp:comment_date_gmt>2009-04-23 08:57:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If complete can only be True or False, I'd recommend to change the regex to:

'^mark/(?P\d+)/(?P[01])/$'

or, I prefer:

'^mark/(?P\d+)/(?P(true|false))/$'

And then

todo.complete = (complete=="true")

....]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>PHP Named Parameters</title>
		<link>http://blog.perplexedlabs.com/2009/04/22/php-named-parameters/</link>
		<pubDate>Wed, 22 Apr 2009 20:39:14 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=227</guid>
		<description></description>
		<content:encoded><![CDATA[I'm not sure why I haven't posted this yet.  The following code block is (one way) of simulating named parameters in PHP for class method calls.  It utilizes PHP's magic method <strong>__call</strong> and takes advantage of PHP 5's Reflection API for determining default values of parameters not passed.

Parameters can be passed two ways:

[sourcecode language="php"]
$obj-&gt;method(array('key' =&gt; 'value', 'key2' =&gt; 'value2'));
[/sourcecode]

[sourcecode language="php"]
$obj-&gt;method(':key = value', ':key2 = value2');
[/sourcecode]

Also, if using the latter (preferred) method of parameter passing you can define one parameter as an array in your method declaration and this will intelligently handle that as well.  The TestClass below is an example of this.

[sourcecode language="php"]
$tc = new TestClass;
$tc-&gt;test(':a = testing', ':b = true', array('p', 'h', 'p'));

class TestClass extends NamedParameters
{
	public function _test($a = 'test', $b = false, $c = array())
	{
		echo '$a = '.$a.&quot;\n&quot;;
		echo '$b = '.($b ? 'true' : 'false').' ('.gettype($b).&quot;)\n&quot;;
		echo &quot;\$c:\n&quot;;
		foreach($c as $k =&gt; $v) {
			echo '   '.$k.' = '.$v.&quot;\n&quot;;
		}
	}
}
[/sourcecode]

And finally, here's the implementation:

[sourcecode language="php"]
class NamedParameters
{
	/**
	 * Implementation of PHP's magic method __call to support named parameters
	 *
	 * Actual helper method names that want to use named parameters are 
	 * prefixed with _ so calls are redirected through this method. It
	 * uses PHP's reflection api to simulate named parameters.
	 *
	 * Named parameters can be passed in one of two ways.
	 * 		$obj-&gt;method(array('key' =&gt; 'value', 'key2' =&gt; 'value2'));
	 * or
	 *		$obj-&gt;method(':key = value', ':key2 = value2');
	 *
	 * @param string $n name of method application actually called
	 * @param array $a parameters passed to method
	 * @return mixed output of method call
	 * @access public
	 */
	public function __call($n, $a)
	{
		if(method_exists($this, '_'.$n)) {
			$methodParams = array();
			$passedParams = array();
			
			$reflectMethod = new ReflectionMethod(get_class($this), '_'.$n);
			if(isset($a[0]) &amp;&amp; is_array($a[0])) {
				// first parameter passed is an array, so we assume all parameters are in this array
				$passedParams = $a[0];
			} else {
				// passing parameters as strings using named parameter syntax
				foreach($a as $v) {
					if(is_string($v)) {
						// format is ':parameterName = parameterValue'
						if(preg_match(&quot;/^:([a-z0-9]+)\s*=\s*(.+)$/isD&quot;, $v, $out)) {
							$passedParams[$out[1]] = $out[2];
						}
					} elseif(is_array($v)) {
						// technique allows one parameter to be an &quot;array&quot; parameter
						$passedParams['__array__'] = $v;
					}
				}
			}
			
			// loop through the parameters of the function being called
			foreach($reflectMethod-&gt;getParameters() as $i =&gt; $param) {
				$defaultAvailable = $param-&gt;isDefaultValueAvailable();
				$parameterName = $param-&gt;getName();
				if($defaultAvailable) {
					$default = $param-&gt;getDefaultValue();
					if(($paramType = gettype($default)) == 'array') {
						// match this parameter of the function being called to the array 
						// that was passed, if any (see above)
						$parameterName = '__array__';
					}
				}
				
			
				if(array_key_exists($parameterName, $passedParams)) {
					// this parameter of the function being called was passed in the named parameters
					$val = $passedParams[$parameterName];
					if($defaultAvailable &amp;&amp; is_string($val)) {
						// if the function being called specified default values for this parameter
						// we can type cast
						switch($paramType) {
							case 'boolean':
								$val = (strtolower($val) == 'true') ? true : false;
								break;
							case 'integer':
								$val = intval($val);
								break;
							case 'double':
								$val = floatval($val);
								break;
							default:
								break;
						}
					}
					$methodParams[] = $val;
				} elseif($defaultAvailable) {
					// parameter was not passed, assign a default value
					$methodParams[] = $default;
				} else {
					// parameter was not passed and no default value exists, trigger an error
					trigger_error(&quot;Beast __call to '&quot;.get_class($this).&quot;::&quot;.$n.&quot;' missing parameter #&quot;.($i+1).&quot; (&quot;.$parameterName.&quot;)&quot;, E_USER_ERROR);
					return null;
				}
			}
			
			// call the function and direct output through handler
			return $this-&gt;output(call_user_func_array(array(&amp;$this, '_'.$n), $methodParams), isset($passedParams['return']) ? $passedParams['return'] : false);
		} else {
			// method doesn't exist, trigger an error
			trigger_error('Beast __call to a non-existant method '.get_class($this).'::'.$n, E_USER_ERROR);
			return null;
		}
	}
}
[/sourcecode]

Hope you find this useful!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date>2009-04-22 15:39:14</wp:post_date>
		<wp:post_date_gmt>2009-04-22 20:39:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-named-parameters</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="named-parameters"><![CDATA[named parameters]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[17400013]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2123</wp:comment_id>
			<wp:comment_author><![CDATA[david g.]]></wp:comment_author>
			<wp:comment_author_email>me@davidgurba.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>128.111.138.69</wp:comment_author_IP>
			<wp:comment_date>2009-04-22 16:35:06</wp:comment_date>
			<wp:comment_date_gmt>2009-04-22 21:35:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[in the switch at line 64 -- how do I pass in parameters whose type are Object? It appears to be only testing for simple types (strings, bools, numbers ...) which are known.

how is this clearer than just making every function in your object have a signature such as:

function foo($opts=array()) { return $blah; }

yes, you get some default named parameter value handling from some boilerplate code ... but it appears you're limiting what kinds of parameters you are able to pass around ... imho this looks like over-engineering that'll lead to coding yourself into a corner.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2124</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-04-22 16:43:16</wp:comment_date>
			<wp:comment_date_gmt>2009-04-22 21:43:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@david

Because PHP doesn't natively support true named parameter passing this is mostly a "hack".

Also, because PHP is loosely typed and you can't specify that a certain method parameter only accept an Object, I can't think of any way to handle that special case.

I wouldn't suggest this solution be adopted for general programming in PHP however there are some specific cases where this can be very useful.  One of them would be in the creation of Rails like helper methods for a view (which is where I'm using it now in my own projects).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2466</wp:comment_id>
			<wp:comment_author><![CDATA[iongion]]></wp:comment_author>
			<wp:comment_author_email>iongion@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://gion.ro</wp:comment_author_url>
			<wp:comment_author_IP>89.165.143.46</wp:comment_author_IP>
			<wp:comment_date>2009-05-02 18:57:54</wp:comment_date>
			<wp:comment_date_gmt>2009-05-02 23:57:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Why wouldn't array solution just fit your needs ? just because you have to type in "array" construct ?

This is not python, it is PHP, get used to it having his own ways(most of them bad ways)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2471</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email>snakes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-05-02 21:33:17</wp:comment_date>
			<wp:comment_date_gmt>2009-05-03 02:33:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The array solution makes code more difficult to read - this is more succint.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2747</wp:comment_id>
			<wp:comment_author><![CDATA[Jaimie Sirovich]]></wp:comment_author>
			<wp:comment_author_email>jaimie@seoegghead.com</wp:comment_author_email>
			<wp:comment_author_url>http://seoegghead.com/</wp:comment_author_url>
			<wp:comment_author_IP>24.89.167.66</wp:comment_author_IP>
			<wp:comment_date>2010-01-08 01:26:09</wp:comment_date>
			<wp:comment_date_gmt>2010-01-08 06:26:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is similar to what we&#39;ve done, but we used different elbow-grease.  See -- <br><br><a href="http://www.seoegghead.com/software/downloads/php-parameter-skipping-and-named-parameters.php" rel="nofollow">http://www.seoegghead.com/software/downloads/ph...</a><br><br>We hijack the parameter list via an include.  It&#39;s a hack, but it&#39;s elegant, and it&#39;s always the same cut-and-pasted include.  The overhead is minimal, and zero string parsing needed.<br><br>Then we can do this:<br><br>getUsers(_, _, $username);<br><br>-or-<br><br>getUsers(PAR(&#39;username&#39;, $username));<br><br>I think our implementation is a little more correct (at the expense of being a little more annoying), but there is definitely some parallel thinking here.<br><br>I wish people like @hylje would stop being snarky.  The world would be a better place.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>PHP Drinks Java</title>
		<link>http://blog.perplexedlabs.com/2009/05/18/php-drinks-java/</link>
		<pubDate>Mon, 18 May 2009 16:46:39 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=267</guid>
		<description></description>
		<content:encoded><![CDATA[<strong><a href="http://www.travisswicegood.com/index.php/2009/05/13/magic-is-to-python-as-java-is-to-php">This</a></strong> post got me thinking about exactly why it is that PHP developers dislike Java?

While researching I stumbled upon <strong><a href="http://phpadvent.org/2008/php-is-not-java-by-luke-welling">this</a></strong> post which attempts to explain why you shouldn't treat PHP as if it were Java.  The example singleton code looks nearly identical in both PHP and Java.  The author suggests that an "experienced" PHP developer wouldn't attempt to think in terms of Java and would instead choose to implement this concept in PHP with the use of a global variable.  This is ridiculous.  It's crap like this that gives PHP a bad rap.

No, <strong>PHP isn't Java</strong> and shouldn't be treated as such.  Nor should you abandon all logic and reason and disregard features of the language that make it <em>appear</em> Java-like.

PHP's object model borrows heavily from Java.  This is fact.  Its property and method visibility, single inheritance, interfaces, final classes, and abstractions are all very Java-like.  Not to mention exceptions and garbage collection.  I'll be damned if that doesn't cover a large portion of the features that developers use to write software in both PHP and Java.  Are all of these concepts exclusive to Java?  No, they're not.  It just seems that the PHP team felt that Java made some good decisions and decided to emulate them.

I'll bet that lots of PHP code is unknowingly written Java-like.  Is this because a PHP developer is "thinking in Java"?  Perhaps it's because the foundational toolset which a PHP developer was given was designed with Java in mind.  I'm not sure it makes sense to decide to use PHP to solve a problem and then fight with/ignore/don't take advantage of the features of the language.  I think that would be a good reason to choose another language, no?

How could a language (obviously) borrow so heavily from another language and simultaneously shun the mention of that language?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date>2009-05-18 11:46:39</wp:post_date>
		<wp:post_date_gmt>2009-05-18 16:46:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-drinks-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2600</wp:comment_id>
			<wp:comment_author><![CDATA[Evan Byrne]]></wp:comment_author>
			<wp:comment_author_email>evantbyrne@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.evanbot.com/</wp:comment_author_url>
			<wp:comment_author_IP>216.25.191.62</wp:comment_author_IP>
			<wp:comment_date>2009-05-28 16:57:40</wp:comment_date>
			<wp:comment_date_gmt>2009-05-28 21:57:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great post! I must say I was shocked at the similarity of the Java and PHP code examples.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2619</wp:comment_id>
			<wp:comment_author><![CDATA[Hermann Snoering]]></wp:comment_author>
			<wp:comment_author_email>snoering@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>170.252.64.1</wp:comment_author_IP>
			<wp:comment_date>2009-06-18 08:52:07</wp:comment_date>
			<wp:comment_date_gmt>2009-06-18 13:52:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[When I hear the someone say PHP, I reach for my Lueger]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2684</wp:comment_id>
			<wp:comment_author><![CDATA[Jinah Adam]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/jinahadam</wp:comment_author_url>
			<wp:comment_author_IP>121.121.191.105</wp:comment_author_IP>
			<wp:comment_date>2009-08-25 04:18:44</wp:comment_date>
			<wp:comment_date_gmt>2009-08-25 09:18:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[im a php developer who loves java. /java developer who loves php :P<br><br>thanks for all the posts. very useful]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2733</wp:comment_id>
			<wp:comment_author><![CDATA[Jinah Adam]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/jinahadam</wp:comment_author_url>
			<wp:comment_author_IP>121.121.191.105</wp:comment_author_IP>
			<wp:comment_date>2009-08-25 08:18:44</wp:comment_date>
			<wp:comment_date_gmt>2009-08-25 13:18:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[im a php developer who loves java. /java developer who loves php :P<br><br>thanks for all the posts. very useful]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Be Language Agnostic - Solve the Problem!</title>
		<link>http://blog.perplexedlabs.com/2009/06/01/be-language-agnostic-solve-the-problem/</link>
		<pubDate>Mon, 01 Jun 2009 14:15:28 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=280</guid>
		<description></description>
		<content:encoded><![CDATA[I like Python.  I like Ruby.  I like C, C++, and Objective-C.  I like Java.  I also (actually) like PHP.  I like programming - get it?  Use whatever gets the job done and done well.  Use whatever achieves the performance and scalability you require for a given task.  Use what makes sense given a specific problem's domain.  <del datetime="2009-06-09T13:43:01+00:00">Use whatever aligns itself with the way your mind works</del>.  Don't be a one trick pony (that isn't a Django reference).  Learn multiple languages, their strengths, and their weaknesses.  Understand when a language's strengths will allow you to solve a problem faster, easier, better.  Don't force a square peg through a round hole.

Watch <strong><a href="http://www.itworld.com/video?bcpid=1578108607&bclid=1588003312&bctid=23220283001">this</a></strong> video.  It's excellent food for thought and drives home the importance, as a programmer, of learning new, different, languages to expand your ability to solve problems in a variety of ways.  The video mentions the <a href="http://en.wikipedia.org/wiki/Sapir%E2%80%93Whorf_hypothesis">Sapir–Whorf hypothesis</a> which suggests that a particular language influences how a person understands and interacts with the world.  This makes a lot of sense.

<strong>A programmer who thinks only in terms of a single language will attempt to solve every problem with that language.  You need more than one tool on your belt because not every problem is a nail.</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date>2009-06-01 09:15:28</wp:post_date>
		<wp:post_date_gmt>2009-06-01 14:15:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>be-language-agnostic-solve-the-problem</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby-development"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<category domain="post_tag" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2613</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.103.25.96</wp:comment_author_IP>
			<wp:comment_date>2009-06-09 09:41:31</wp:comment_date>
			<wp:comment_date_gmt>2009-06-09 14:41:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for your feedback.  I agree with your points with regards to the line you quoted.  In hindsight it doesn&#39;t jive with the rest of the points I&#39;m making in that paragraph.<br><br>With respect to Sapir-whorf.  My understanding is that what it suggests is fundamentally different than the point you&#39;re making.  It supposes that a language affects how you think.  <br><br>This does make sense to me.  Take Python - you think "pythonic".  A functional programming language would encourage you to think functionally.  C encourages you to think procedurally.  Etc.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2612</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2611</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.103.25.96</wp:comment_author_IP>
			<wp:comment_date>2009-06-08 09:13:11</wp:comment_date>
			<wp:comment_date_gmt>2009-06-08 14:13:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Olivier,<br><br>I&#39;m confused as to what exactly you disagree with.  You&#39;re making the same points as the post... ie use the language with the features/performance/etc. required for the job.<br><br>Am I missing something?<br><br>-Matt]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2610</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2612</wp:comment_id>
			<wp:comment_author><![CDATA[Olivier]]></wp:comment_author>
			<wp:comment_author_email>chtito@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>130.235.3.37</wp:comment_author_IP>
			<wp:comment_date>2009-06-09 06:15:33</wp:comment_date>
			<wp:comment_date_gmt>2009-06-09 11:15:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I&#39;m quoting your post: "Use whatever aligns itself with the way your mind works".<br><br>I utterly disagree with that, and I explained my point. It&#39;s only a matter of *features* of the languages, not a matter of how your mind works. Python has most of those required features, so I end up programming in python 99% of the time. On some rare occasion something else is needed. This is not because of how my mind would work differently with another language, but simply because python doesn&#39;t have that feature that is needed to solve the problem.<br><br>Also, you make a doubtful comparison with human languages, which is not relevant because all human languages have the same features, so you need only one human language to express yourself.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2611</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2604</wp:comment_id>
			<wp:comment_author><![CDATA[Orestis Markou]]></wp:comment_author>
			<wp:comment_author_email>orestis@orestis.gr</wp:comment_author_email>
			<wp:comment_author_url>http://orestis.gr/</wp:comment_author_url>
			<wp:comment_author_IP>85.75.74.206</wp:comment_author_IP>
			<wp:comment_date>2009-06-01 14:39:58</wp:comment_date>
			<wp:comment_date_gmt>2009-06-01 19:39:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The Sapir-Whorf hypothesis has been thoroughly shot down for human languages ([citation needed], I know), but I guess it&#39;s accurate for programming languages, given that learning a programming language is a prerequisite for learning programming in the first place.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2605</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-06-01 14:48:50</wp:comment_date>
			<wp:comment_date_gmt>2009-06-01 19:48:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Orestis,<br><br>I would be interested in reading more about that if you can find a link.<br><br>Truth be told it was the first time I had heard about it.  I can&#39;t speak much for its validity with respect to human language but, I agree, it makes a lot of sense in the realm of computer programming languages.<br><br>Thanks,<br><br>-Matt]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2604</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2609</wp:comment_id>
			<wp:comment_author><![CDATA[Max Battcher]]></wp:comment_author>
			<wp:comment_author_email>me@worldmaker.net</wp:comment_author_email>
			<wp:comment_author_url>http://worldmaker.net/</wp:comment_author_url>
			<wp:comment_author_IP>69.109.79.65</wp:comment_author_IP>
			<wp:comment_date>2009-06-04 02:03:23</wp:comment_date>
			<wp:comment_date_gmt>2009-06-04 07:03:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[My reading of it was that rather than disproving Sapir-Whorf, the counter-research has mostly just emphasized the universality of most human languages. (The human languages all are "Thought-complete" in a way that most programming languages are "Turing-complete".) I wouldn&#39;t describe that as "thoroughly shot down", particularly because that&#39;s not what the Sapir-Whorf hypothesis is ultimately about depending upon your interpretation of the hypothesis. On the other hand, there is interesting evidence in the relative differences between languages and their effect on typical discussion patterns. As with nearly any aspect of psychology I think that it is very hard to conclusively say that a hypothesis is proven or not.<br><br>The section "Cognitive Linguistics" from the referenced Wikipedia article has a paragraph summarizing some of George Lakoff&#39;s points that many people arguing for or against the hypothesis often don&#39;t even agree on the same interpretation of the hypothesis.<br><br>I am not a linguist, but I do find it fascinating. There is a lot of great reading on the Sapir-Whorf hypothesis on both sides of the court. I personally feel that the hypothesis is "true", but have not found enough evidence to know exactly "how true", if you know what I mean. I absolutely believe it is accurate for programming languages.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2604</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2610</wp:comment_id>
			<wp:comment_author><![CDATA[Olivier]]></wp:comment_author>
			<wp:comment_author_email>chtito@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>83.227.93.216</wp:comment_author_IP>
			<wp:comment_date>2009-06-07 11:36:06</wp:comment_date>
			<wp:comment_date_gmt>2009-06-07 16:36:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I beg to differ. Different programming languages have different features. Python is the most featured of languages I can think of. It doesn&#39;t mean that it should beat all other languages, because, sometimes, the feature "compiled" (C++, ObjC) or "template language" (Php) are more important.<br><br>I know the same languages as you do and I don&#39;t feel at all that I program in a different way in different languages. However, when more feature are available (as in python) I tend, over the years, to use those features more and more intensively (generators, meta classes and the like).<br><br>I think that most of the work may be done with one script language (say python). Then, for specific tasks one might need one compiled language for speed (say C or C++), possibly one "template" language (php/LaTeX). I don&#39;t think that you need much more than that. Most of all, it&#39;s the different features of the languages that make them useful. If python was both interpreted, compiled (see cython...) and template, I would only use python for the rest of my life.<br><br>The comparison with human languages is completely irrelevant. All human languages have more or less the same features and you can express whatever you want in any human language. This is why languages exist in the first place! I speak 5 languages and I really can&#39;t imagine which would be better for what.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2660</wp:comment_id>
			<wp:comment_author><![CDATA[Traveller_Adventure]]></wp:comment_author>
			<wp:comment_author_email>agenyesta@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://modestadventurer.com</wp:comment_author_url>
			<wp:comment_author_IP>203.82.91.104</wp:comment_author_IP>
			<wp:comment_date>2009-08-02 00:28:42</wp:comment_date>
			<wp:comment_date_gmt>2009-08-02 05:28:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great post, really help me alot. Thanks.<br><br>Cheers,<br><a href="http://the-review.info/" rel="nofollow">Blog Review</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2707</wp:comment_id>
			<wp:comment_author><![CDATA[acai]]></wp:comment_author>
			<wp:comment_author_email>sarareid28@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.vitabits.co.uk/antioxidant</wp:comment_author_url>
			<wp:comment_author_IP>121.247.93.131</wp:comment_author_IP>
			<wp:comment_date>2009-11-15 01:43:01</wp:comment_date>
			<wp:comment_date_gmt>2009-11-15 06:43:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[According to me, you need to decide first what you want to do. What is the field of your interest first decide clearly. ? There is an opportunities in all fields. Would you like to go for specialization or generalization ? Choice is depend on you. You can solve your problem easily my own decision.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>PHP Custom MySQL Session Handler</title>
		<link>http://blog.perplexedlabs.com/2009/10/05/php-custom-session-handler/</link>
		<pubDate>Mon, 05 Oct 2009 14:00:30 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=302</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>The Problem</h3>
I'm sure many have used PHP's default session handling capabilities.  By default, PHP uses the filesystem to store session data naming files with their session id # and putting them in /tmp.

This is done for the sake of simplicity.  On a single-server, low load website, this particular setup works fine.  It's when you start having multiple simultaneous requests from a single client (identified by a session) that the problems begin to show their ugly heads.  Utilizing AJAX multiple simultaneous requests might be the norm, even for a low load website.

Essentially, in order to prevent <a href="http://en.wikipedia.org/wiki/Race_condition">race conditions</a> PHP internally uses a lock to maintain exclusive access to the file containing the session data for the client connection.  This means that as soon as a single request acquires exclusive access to that session file, no other request can access the file until the original request completes.  What happens when that second request asks to start the session?  It waits.
<h3>The Solution</h3>
Fortunately there's a solution to all this.  Implementing your own custom session handler and moving your session storage backend to another technology (such as a MySQL database or memcache) affords you the ability to handle simultaneous requests in a thread-safe manner.  Remember, it's a good thing that PHP prevents race conditions by locking the session file.  What we're looking to do is increase the granularity of the lock to the level of individual session data key =&gt; value pairs.

For this post we're going to stick to storing sessions in the database with our own custom session save handler.  Perhaps in another post I'll talk about doing the same in memcache.  It's the theory we're concerned about, not necessarily the exact storage mechanism implementation.

Implementing your own custom session handler is simply a matter of calling session_set_save_handler() with the appropriate callback methods for handling the following scenarios:
<ul>
	<li><strong>open</strong>
Open function, this works like a constructor in classes and is executed when the session is being opened. The open function expects two parameters, where the first is the save path and the second is the session name.</li>
	<li><strong>close</strong>
Close function, this works like a destructor in classes and is executed when the session operation is done.</li>
	<li><strong>read</strong>
Read function must return string value always to make save handler work as expected. Return empty string if there is no data to read. Return values from other handlers are converted to boolean expression. TRUE for success, FALSE for failure.</li>
	<li><strong>write</strong>
The "write" handler is not executed until after the output stream is closed.</li>
	<li><strong>destroy</strong>
The destroy handler, this is executed when a session is destroyed with session_destroy() and takes the session id as its only parameter.</li>
	<li><strong>gc</strong>
The garbage collector, this is executed when the session garbage collector is executed and takes the max session lifetime as its only parameter.</li>
</ul>

There's a well known trick for situations like this that allow you to pass a class method (static or instance) for callbacks.  Let's take a look at a simple example.  This correctly implements the required methods but obviously doesn't do much:

[sourcecode language="php"]
class MySession
{
	public function __construct()
	{
		session_set_save_handler(
						array('MySession', 'sess_open'), 
						array('MySession', 'sess_close'),
						array('MySession', 'sess_read'),
						array('MySession', 'sess_write'),
						array('MySession', 'sess_destroy'),
						array('MySession', 'sess_gc')
						);
		
		ini_set('session.auto_start',					0);
		ini_set('session.gc_probability',				1);
		ini_set('session.gc_divisor',					100);
		ini_set('session.gc_maxlifetime',				604800);
		ini_set('session.referer_check',				'');
		ini_set('session.entropy_file',					'/dev/urandom');
		ini_set('session.entropy_length',				16);
		ini_set('session.use_cookies',					1);
		ini_set('session.use_only_cookies',				1);
		ini_set('session.use_trans_sid',				0);
		ini_set('session.hash_function',				1);
		ini_seT('session.hash_bits_per_character',		5);
		
		session_cache_limiter('nocache');
		session_set_cookie_params(0, '/', '.mydomainname.com');
		session_name('mySessionName');
		session_start();
	}

	public static function sess_open($save_path, $session_name)
	{
		return true;
	}

	public static function sess_close()
	{
		return true;
	}

	public static function sess_read($id)
	{
		return '';
	}

	public static function sess_write($id, $sess_data)
	{
		return true;
	}

	public static function sess_destroy($id)
	{
		return true;
	}

	public static function sess_gc($maxlifetime)
	{
		return true;
	}
}
[/sourcecode]

<h3>SPL and Storing Session Data In MySQL</h3>

Adding support for MySQL to this class is fairly trivial.  Let's start off by creating a table to store our session data:

[sourcecode language="sql"]
CREATE TABLE `sessions` (
  `sesskey` char(32) NOT NULL,
  `timestamp` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,
  `varkey` varchar(128) NOT NULL,
  `varval` longtext NOT NULL,
  PRIMARY KEY  (`sesskey`,`varkey`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
[/sourcecode]

<a href="http://us3.php.net/spl">PHP's SPL</a> provides the ability to create objects that behave as though they were arrays.  You can make objects that iterate, respond to accessing them via array notation ($object['key']), and lots of other interesting things.

We're going to enhance the MySession class with a couple SPL interfaces that will allow the object, when instantiated, to behave like an array.   We can then override the $_SESSION superglobal with an instance of our new MySession class.  It will provide an identical interface to access session data while internally storing session data to the database.  Also, internally it will use methods for row-level locking via MySQL's advisory locks (GET_LOCK() and RELEASE_LOCK()).

The next step is to implement the required methods for the interfaces we're using.  These methods allow the object to behave as though it's an array.

[sourcecode language="php"]
class MySession implements Countable, ArrayAccess, Iterator
{
	private $index;
	private $curElement;
	private $locks = array();
	private $sessionName = 'sessionId';
	private $serialize = 'serialize';
	private $unserialize = 'unserialize';
	private $session_id = null;

	public function __construct()
	{
		session_set_save_handler(
						array('MySession', 'sess_open'), 
						array('MySession', 'sess_close'),
						array('MySession', 'sess_read'),
						array('MySession', 'sess_write'),
						array('MySession', 'sess_destroy'),
						array('MySession', 'sess_gc')
						);
		
		ini_set('session.auto_start',					0);
		ini_set('session.gc_probability',				1);
		ini_set('session.gc_divisor',					100);
		ini_set('session.gc_maxlifetime',				604800);
		ini_set('session.referer_check',				'');
		ini_set('session.entropy_file',					'/dev/urandom');
		ini_set('session.entropy_length',				16);
		ini_set('session.use_cookies',					1);
		ini_set('session.use_only_cookies',				1);
		ini_set('session.use_trans_sid',				0);
		ini_set('session.hash_function',				1);
		ini_seT('session.hash_bits_per_character',		5);
		
		session_cache_limiter('nocache');
		session_set_cookie_params(0, '/', '.mydomainname.com');
		session_name('mySessionName');
		session_start();
	}

	public function destroy()
	{
		$sessionName = session_name();
		$cookieInfo = session_get_cookie_params();
		$cookieExpires = time() - 3600;
		if((empty($cookieInfo['domain'])) &amp;&amp; (empty($cookieInfo['secure']))) {
			setcookie($sessionName, '', $cookieExpires, $cookieInfo['path']);
		} elseif(empty($cookieInfo['secure'])) {
			setcookie($sessionName, '', $cookieExpires, $cookieInfo['path'], $cookieInfo['domain']);
		} else {
			setcookie($sessionName, '', $cookieExpires, $cookieInfo['path'], $cookieInfo['domain'], $cookieInfo['secure']);
		}
		unset($_COOKIE[$sessionName]);
		
		$dbo = DBO::getInstance();
		$q = &quot;DELETE FROM `sessions` WHERE `sesskey` = '&quot;.$this-&gt;session_id.&quot;'&quot;;
		$dbo-&gt;query($q);
		
		session_destroy();
	}

	private function lockName($k)
	{
		return 'sesslock'.$this-&gt;session_id.$k;
	}

	public function locked($k)
	{
		$k = $this-&gt;lockName($k);
		
		return isset($this-&gt;locks[$k]);
	}

	public function acquire($k, $timeout = 0)
	{
		$k = $this-&gt;lockName($k);
		
		if(!isset($this-&gt;locks[$k])) {
			$dbo = DBO::getInstance();
			$q = &quot;SELECT GET_LOCK('&quot;.$k.&quot;', &quot;.$timeout.&quot;)&quot;;
			$rs = $dbo-&gt;query($q);
			$this-&gt;locks[$k] = $dbo-&gt;result($rs, 0);
			$dbo-&gt;fr($rs);
			
			return $this-&gt;locks[$k];
		}
		
		return false;
	}

	public function release($k)
	{
		$k = $this-&gt;lockName($k);
		
		unset($this-&gt;locks[$k]);
		
		$dbo = DBO::getInstance();
		$q = &quot;SELECT RELEASE_LOCK('&quot;.$k.&quot;')&quot;;
		$rs = $dbo-&gt;query($q);
		$ret = $dbo-&gt;fetch($rs);
		$dbo-&gt;fr($rs);

		return true;
	}

	public function count()
	{
		$dbo = DBO::getInstance();
		$q = &quot;SELECT COUNT(*) FROM `sessions` WHERE `sesskey` = '&quot;.$this-&gt;session_id.&quot;'&quot;;
		$rs = $dbo-&gt;query($q);
		$ret = $dbo-&gt;result($rs, 0);
		$dbo-&gt;fr($rs);
		
		return $ret;
	}

	public function rewind()
	{
		$this-&gt;index = 0;
		$this-&gt;getCurElement();
	}

	private function getCurElement()
	{
		$dbo = DBO::getInstance();
		$q = &quot;SELECT `varkey`, `varval` FROM `sessions` WHERE `sesskey` = '&quot;.$this-&gt;session_id.&quot;' LIMIT &quot;.$this-&gt;index.&quot;,1&quot;;
		$rs = $dbo-&gt;query($q);
		$row = $dbo-&gt;fetch($rs);
		$dbo-&gt;fr($rs);
		if(is_array($row) &amp;&amp; (count($row) == 2)) {
			$this-&gt;curElement = $row;
		} else {
			$this-&gt;curElement = array(null, null);
		}
	}

	public function key()
	{
		return $this-&gt;curElement[0];
	}

	public function current()
	{
		return call_user_func($this-&gt;unserialize, $this-&gt;curElement[1]);
	}

	public function next()
	{
		$this-&gt;index++;
		$this-&gt;getCurElement();
	}

	public function valid()
	{
		return ($this-&gt;curElement[0] !== null);
	}

	public function offsetSet($k, $v)
	{
		$dbo = DBO::getInstance();
		$q = &quot;REPLACE INTO `sessions` (`sesskey`, `varkey`, `varval`) VALUES ('&quot;.$this-&gt;session_id.&quot;', '&quot;.$k.&quot;', '&quot;.$dbo-&gt;sanitize(call_user_func($this-&gt;serialize, $v)).&quot;')&quot;;
		$dbo-&gt;query($q);
	}

	public function offsetGet($k)
	{
		$dbo = DBO::getInstance();
		$q = &quot;SELECT `varval` FROM `sessions` WHERE `sesskey` = '&quot;.$this-&gt;session_id.&quot;' AND `varkey` = '&quot;.$k.&quot;'&quot;;
		$rs = $dbo-&gt;query($q);
		if($ret = $dbo-&gt;result($rs, 0)) {
			$ret = call_user_func($this-&gt;unserialize, $ret);
		}
		$dbo-&gt;fr($rs);
		
		return $ret;
	}

	public function offsetUnset($k)
	{
		$dbo = DBO::getInstance();
		$q = &quot;DELETE FROM `sessions` WHERE `sesskey` = '&quot;.$this-&gt;session_id.&quot;' AND `varkey` = '&quot;.$k.&quot;'&quot;;
		$dbo-&gt;query($q);
	}

	public function offsetExists($k)
	{
		$dbo = DBO::getInstance();
		$q = &quot;SELECT `varval` FROM `sessions` WHERE `sesskey` = '&quot;.$this-&gt;session_id.&quot;' AND `varkey` = '&quot;.$k.&quot;'&quot;;
		$rs = $dbo-&gt;query($q);
		$ret = $dbo-&gt;result($rs, 0);
		$dbo-&gt;fr($rs);

		return (bool)$ret;
	}

	public static function sess_open($save_path, $session_name)
	{
		return true;
	}

	public static function sess_close()
	{
		return true;
	}

	public static function sess_read($id)
	{
		return '';
	}

	public static function sess_write($id, $sess_data)
	{
		return true;
	}

	public static function sess_destroy($id)
	{
		return true;
	}

	public static function sess_gc($maxlifetime)
	{
		$dbo = DBO::getInstance();
		$q = &quot;DELETE FROM `sessions` WHERE `timestamp` &lt; '&quot;.date('Y-m-d H:i:s', time() - $maxlifetime).&quot;'&quot;;
		$dbo-&gt;query($q);
		
		return $dbo-&gt;query($q);
	}
}
[/sourcecode]

The $dbo object is just an example of an interface to the database through the use of a singleton.  Replace the $dbo object with your preferred mysql database interface and you'll be set to go!

Starting your session is now as simple as:

[sourcecode language="php"]
$_SESSION = new MySession;
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>302</wp:post_id>
		<wp:post_date>2009-10-05 09:00:30</wp:post_date>
		<wp:post_date_gmt>2009-10-05 14:00:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-custom-session-handler</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="post_tag" nicename="memcache"><![CDATA[memcache]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="session"><![CDATA[session]]></category>
		<category domain="post_tag" nicename="session-handler"><![CDATA[session handler]]></category>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[37854153]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3453</wp:comment_id>
			<wp:comment_author><![CDATA[Eelko]]></wp:comment_author>
			<wp:comment_author_email>eelko76@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>89.250.187.198</wp:comment_author_IP>
			<wp:comment_date>2010-10-13 15:06:59</wp:comment_date>
			<wp:comment_date_gmt>2010-10-13 20:06:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[- you do not set session_id... Like so: $this-&gt;session_id = session_id() // after session_start (#38), otherwise the session ID is not saved in the DB!<br><br>- error line # 33, ini_set...(not ini_seT ;)).<br><br>- no support for array&#39;s ex; $_SESSION[&#39;array&#39;][&#39;key&#39;] = $val does not work... That&#39;s the biggest disappointment!<br><br>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>PHP 5.3.0 Released and Firefox 3.5</title>
		<link>http://blog.perplexedlabs.com/2009/06/30/php-5-3-0-released-and-firefox-3-5/</link>
		<pubDate>Tue, 30 Jun 2009 17:00:32 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=304</guid>
		<description></description>
		<content:encoded><![CDATA[Pretty major day in the world of the web, eh?

The PHP development team announced the <a href="http://php.net/releases/5_3_0.php">release of version 5.3.0</a>.  This is a <strong>major</strong> milestone.  Here's what I'm most excited about:

<ul>
	<li>Lambda Functions and Closures</li>
	<li>ternary short cut "?:"</li>
	<li>Optional garbage collection for cyclic references</li>
</ul>

I'm excited about support for namespaces, but not the particular syntactical implementation chosen.

Also, the Mozilla team announced the official release of <a href="http://download.mozilla.org/?product=firefox-3.5&os=win&lang=en-US">Firefox 3.5</a>.  Firefox is my browser of choice thanks to the great web development plugins available for it such as:

<ul>
	<li><a href="http://getfirebug.com/">Firebug</a></li>
	<li><a href="http://code.google.com/p/httpfox/">HttpFox</a></li>
	<li><a href="http://chrispederick.com/work/web-developer/">Web Developer Toolbar</a>
</ul>

Version 3.5 looks to make an already excellent browser even faster.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date>2009-06-30 12:00:32</wp:post_date>
		<wp:post_date_gmt>2009-06-30 17:00:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-5-3-0-released-and-firefox-3-5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="firefox"><![CDATA[firefox]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="category" nicename="random"><![CDATA[Random]]></category>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Adventures in Django and Python - Part III</title>
		<link>http://blog.perplexedlabs.com/2009/08/13/adventures-in-django-and-python-part-iii/</link>
		<pubDate>Thu, 13 Aug 2009 14:00:38 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=307</guid>
		<description></description>
		<content:encoded><![CDATA[<em>Read my previous two posts on Django and Python - <a href="http://blog.perplexedlabs.com/2009/02/08/getting-started-with-django-and-python-first-impressions/">Part I</a> and <a href="http://blog.perplexedlabs.com/2009/03/20/django-and-python-first-impressions-part-ii/">Part II</a></em>

I've been working on a project management tool suite in Django.  It's been a great side project to really experiment with Django in real-world scenarios.

<h3>Forms</h3>

At times I feel like I fight with newforms.  In particular, it lacks the ability to specify basic class or style attributes for a given form field from within the template.  I'd like to be able to more finely tune the display of the field, directly within the template, with a style attribute or a class.  Is it suggested you write your own custom form field widget for a single element?  I've been getting around this by doing the following:

[sourcecode language="python"]
&lt;input type=&quot;text&quot; name=&quot;{{ todo_form.item.name }}&quot; style=&quot;width: 720px;&quot;/&gt;
[/sourcecode]

This gets more complicated if you want to set a style attribute for a form field that's a select box (for a ForeignKey model field, for example).  

[sourcecode language="python"]
&lt;label for=&quot;category&quot;&gt;Category:&lt;/label&gt; &lt;select name=&quot;{{ category_form.project.name }}&quot; style=&quot;width: 221px;&quot;&gt;
{% for choice_val, choice_label in category_form.project.field.choices %}
	&lt;option value=&quot;{{ choice_val }}&quot;&gt;{{ choice_label }}&lt;/option&gt;
{% endfor %}
[/sourcecode]

Is this a good use case for template tags?  I feel like I'm missing something here.

On the positive side, it was an absolute pleasure to work with multiple forms on a single page submitted to and processed by a single view.  This is primarily thanks to prefixes.  Excellent, that's how easy it should be.

<h3>Ternary Operator</h3>

<strong>Update:</strong> <em>It's been pointed out in comments (thanks!) that Python 2.5 introduced a ternary operator.  It's syntax is as follows:</em>

[sourcecode language="python"]
label = &quot;true&quot; if booleanVariable else &quot;false&quot;
[/sourcecode]

I also ran into a minor Python syntax issue.  I love the ternary operator in languages that offer it.  It's a concise, one-line, syntax for an if-else clause.  Consider the following PHP code:

[sourcecode language="php"]
$label = $booleanVariable ? 'true' : 'false';

// the above is identical to the following block:
if($booleanVariable) {
   $label = 'true';
} else {
   $label = 'false';
}
[/sourcecode]

Python unfortunately lacks this syntactic sugar.  Fortunately, however, you can effectively accomplish the same thing by doing this:

[sourcecode language="python"]
label = (booleanVariable and 'true' or 'false')

# the above is equivalent to the following block:
if booleanVariable:
   label = 'true'
else:
   label = 'false'
[/sourcecode]

<h3>Sessions</h3>

Django has built in support for sessions.  By default, sessions last longer than the lifecycle of the user's browser.  I personally think it should be the other way around.  It's easily changed though (in your settings.py):

[sourcecode language="python"]
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
[/sourcecode]

<h3>Views</h3>

In one of my views I wanted to test whether a filtered result set was empty or not.  I was curious whether this was the "pythonic" way to accomplish this:

[sourcecode language="python"]
account = get_object_or_404(Account, pk=account_id)
if account.useraccount_set.filter(user__exact=request.user) != []: 
[/sourcecode]

Also, with respect to views and passing context to the response, sometimes it's an efficient shortcut to use <strong>locals()</strong> instead of explicitly typing out all the variables you'd like to expose.  locals() returns a dictionary of all variables defined within the local scope.

[sourcecode language="python"]
def myview(request, id):
    account = get_object_or_404(Account, pk=id)
    new_account_form = NewAccountForm()

    return render_to_response('myview.html', locals())
[/sourcecode]

More soon!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date>2009-08-13 09:00:38</wp:post_date>
		<wp:post_date_gmt>2009-08-13 14:00:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>adventures-in-django-and-python-part-iii</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="session"><![CDATA[session]]></category>
		<category domain="post_tag" nicename="ternary"><![CDATA[ternary]]></category>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[29484923]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2661</wp:comment_id>
			<wp:comment_author><![CDATA[Jake Boxer]]></wp:comment_author>
			<wp:comment_author_email>jake@powrhouse.net</wp:comment_author_email>
			<wp:comment_author_url>http://powrhouse.net/</wp:comment_author_url>
			<wp:comment_author_IP>161.44.81.75</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 11:10:09</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 16:10:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great post Matt. While I do appreciate the advantages of the forms module over having to do it all manually, I agree that I have to fight with it a lot. Hopefully it&#39;ll be one of the areas that gets improved as Django evolves.<br><br>I just wanted to let you know, Python (2.5 and up I believe) does in fact have a ternary operator; it&#39;s just a slightly different syntax. In your example, I could go:<br><br>label = "true" if booleanVariable else "false"<br><br>Unfortunately, it&#39;s fairly recent, so if you use it and then end up on an old version (&lt; 2.5 I believe), you&#39;ll be in trouble.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2659</wp:comment_id>
			<wp:comment_author><![CDATA[attila]]></wp:comment_author>
			<wp:comment_author_email>forgacs.attila@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>80.98.10.101</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 10:41:53</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 15:41:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There is a ternary operator in python:<br>value_when_true if condition else value_when_false<br>3 if a==2 else 101<br>introduced in v2.5.<br><br>Using the and-or hack you will run into problems, it&#39;s not recommended<br>[] and &#39;true&#39; or false <br>is false for example.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2662</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 11:17:26</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 16:17:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for pointing that out, I&#39;ll update the post.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2659</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2663</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 11:20:04</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 16:20:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Jake.  As usually is the case it&#39;s fantastic for a large number of scenarios but, as you dig deeper and need to finely tune things, you begin to identify potential areas for improvement.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2661</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2665</wp:comment_id>
			<wp:comment_author><![CDATA[megaman821]]></wp:comment_author>
			<wp:comment_author_email>megaman821@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.202.253.126</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 11:50:03</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 16:50:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If don&#39;t plan on using the result of your filter statement, instead of:<br>    if account.useraccount_set.filter(user__exact=request.user) != []:<br>you could try:<br>    if account.useraccount_set.filter(user__exact=request.user).count()<br>or if you do need the result:<br>    try:<br>        user_account = account.useraccount_set.get(user=request.user)<br>        ...<br>    except UserAccount.DoesNotExist:<br>        ....]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2666</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 11:57:29</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 16:57:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting, thanks.<br><br>I suppose using the 2nd method you proposed, count(), would be ideal for performance/memory reasons because you&#39;re not transferring the result-set from the database.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2665</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2667</wp:comment_id>
			<wp:comment_author><![CDATA[jokull]]></wp:comment_author>
			<wp:comment_author_email>jokull@solberg.is</wp:comment_author_email>
			<wp:comment_author_url>http://solberg.is</wp:comment_author_url>
			<wp:comment_author_IP>82.108.140.18</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 13:17:59</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 18:17:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Check out the `attrs` kwarg in form fields. Something like:<br><br>    title = forms.CharField(attrs={&#39;class&#39;: &#39;myclass&#39;})]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2668</wp:comment_id>
			<wp:comment_author><![CDATA[John]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://flyinglizard.myopenid.com/</wp:comment_author_url>
			<wp:comment_author_IP>75.137.116.149</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 14:09:16</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 19:09:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I&#39;ve oft wondered what the best way to set attrs in the template would be,  somewhere in the back of my mind this filter base solution has been floating around.  5 minutes and a real quick test shows it has promise.<br><br><br>@register.filter<br>def with_attrs(value, arg):<br>    args = arg.split(&#39; &#39;)<br>    attrs = {}<br>    for v in args:<br>        v1 = v.split(&#39;=&#39;)<br>        attrs[v1[0]] = v1[1]<br>        <br>    return value.as_widget(attrs=attrs)<br><br>{{ form.name|with_attrs:"maxlength=10" }}]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2669</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 14:20:07</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 19:20:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[John, this is exactly in line with what I&#39;d like to be able to accomplish.  I like where you&#39;re going with this.<br><br>Perhaps splitting on something other than a space?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2668</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2670</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 14:21:17</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 19:21:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I looked up the &#39;attrs&#39; documentation, which is sparse.  I don&#39;t think it&#39;s the responsibility of the view or the Form definition to define template related attributes like style, size, etc.  I think these attributes should elegantly be modified within the template.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2667</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2671</wp:comment_id>
			<wp:comment_author><![CDATA[John]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://flyinglizard.myopenid.com/</wp:comment_author_url>
			<wp:comment_author_IP>75.137.116.149</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 14:28:05</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 19:28:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yea,  like i said this had been floating around for a while..  Space was just the first thing that jumped out at me.  Of course that does not work for style stuff.<br><br>might be better to write it so it can be chained:<br><br>{{ form.name|with_attrs:"size=10"|with_attrs:"style: width: 720px" }}]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2669</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2672</wp:comment_id>
			<wp:comment_author><![CDATA[John]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://flyinglizard.myopenid.com/</wp:comment_author_url>
			<wp:comment_author_IP>75.137.116.149</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 15:00:55</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 20:00:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A quick look at BoundField and it does not appear the chaining of attrs would work.  Maybe a comma: (how do you make this thing keep formatting?)<br><br>@register.filter<br>def with_attrs(value, arg):<br>    attrs = {}<br>    for x in arg.split(&#39;,&#39;):<br>        v = x.strip().split(&#39;=&#39;)<br>        attrs[v[0]] = v[1]<br><br>    return value.as_widget(attrs=attrs)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2671</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2673</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-08-13 15:06:13</wp:comment_date>
			<wp:comment_date_gmt>2009-08-13 20:06:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[try the &lt;pre&gt; HTML tag<br><br>&lt;pre&gt;<br>@register.filter<br>def with_attrs(value, arg):<br>	attrs = {}<br>	for x in arg.split(&#39;,&#39;):<br>		v = x.strip().split(&#39;=&#39;)<br>		attrs[v[0]] = v[1]<br><br>	return value.as_widget(attrs=attrs)<br>&lt;/pre&gt;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2672</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2674</wp:comment_id>
			<wp:comment_author><![CDATA[andybak]]></wp:comment_author>
			<wp:comment_author_email>andy@andybak.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>91.111.84.129</wp:comment_author_IP>
			<wp:comment_date>2009-08-14 05:19:13</wp:comment_date>
			<wp:comment_date_gmt>2009-08-14 10:19:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Shouldn&#39;t those attributes be defined in CSS? Then it&#39;s not quite so unappealing to simply use attrs to modify or append to the class name (even this might not be needed - you can use the id assigned to each form element or just use CSS attribute selectors)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2670</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2675</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.173.7.102</wp:comment_author_IP>
			<wp:comment_date>2009-08-14 09:46:40</wp:comment_date>
			<wp:comment_date_gmt>2009-08-14 14:46:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You have to define those attributes somewhere.  It makes more sense (to me) to do that within the template than in your form definition or in your view.<br><br>Even if you ultimately style the attributes using CSS you have to specify that class somewhere.  I&#39;d like to able to easily do that from within the template.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2674</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2676</wp:comment_id>
			<wp:comment_author><![CDATA[Jonathan Buchanan]]></wp:comment_author>
			<wp:comment_author_email>jonathan.buchanan@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>87.113.118.203</wp:comment_author_IP>
			<wp:comment_date>2009-08-14 12:49:05</wp:comment_date>
			<wp:comment_date_gmt>2009-08-14 17:49:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In addition to letting you easily generate HTML4 from your forms (slash, begone!), the "field" template tag provided by <a href="http://github.com/simonw/django-html/" rel="nofollow">http://github.com/simonw/django-html/</a> lets you specify attributes for rendered form fields:<br><br>{% field form.somefield class="special" %}]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2680</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew Shultz]]></wp:comment_author>
			<wp:comment_author_email>ashultz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://everything-not-nailed-down.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>71.174.37.80</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 17:14:05</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 22:14:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You could do something crazy like subclass the form and give it special processing that will munge some of the fields in ways you approve of.  We did that back on 0.96 to use the automatic model form fields but have some of them hidden (there was no "uneditable" then) or to be able to set the entire form to be uneditable.<br><br>In the process I hacked up the automatic form generation a fair bit - unfortunately not all the required pieces were exposed by newforms at the time, which was very irritating since I don&#39;t expect to have python modules have functions I&#39;m not allowed to get to somehow.  I expect many of the specifics have changed but the basic idea might still work, though not cleanly.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2739</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew Shultz]]></wp:comment_author>
			<wp:comment_author_email>ashultz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://everything-not-nailed-down.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>71.174.37.80</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 21:14:05</wp:comment_date>
			<wp:comment_date_gmt>2009-08-18 02:14:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You could do something crazy like subclass the form and give it special processing that will munge some of the fields in ways you approve of.  We did that back on 0.96 to use the automatic model form fields but have some of them hidden (there was no "uneditable" then) or to be able to set the entire form to be uneditable.<br><br>In the process I hacked up the automatic form generation a fair bit - unfortunately not all the required pieces were exposed by newforms at the time, which was very irritating since I don&#39;t expect to have python modules have functions I&#39;m not allowed to get to somehow.  I expect many of the specifics have changed but the basic idea might still work, though not cleanly.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>XMLRPC Pingbacks Using PHP</title>
		<link>http://blog.perplexedlabs.com/2009/07/15/xmlrpc-pingbacks-using-php/</link>
		<pubDate>Wed, 15 Jul 2009 17:39:46 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=308</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Motivation: </strong>For a side project I am working on, I wanted to be able to send a trackback to WordPress blogs (or any blog with an XMLRPC endpoint), using PHP.   Simple enough.

<strong>Methodology: </strong>I had a few different options.  I could have manually made a POST request to the endpoint, hand-coding the XML (this brute force method).  Or I could stand on the shoulders of giants and leverage the power of open-source libraries.  I chose the latter, in keeping with my new guiding principle of pursuing beauty, truth and goodness.

To brush up on how an XMLRPC pingback works, from a 30,000 foot level, I checked out the <a href="http://hixie.ch/specs/pingback/pingback-1.0">Pingback 1.0 Specification</a>.  As far as the libraries, I settled on <a href="http://phpxmlrpc.sourceforge.net">phpxmlrpc</a>.  First, the documentation existed and second, it was straightforward.  According to the <a href="http://phpxmlrpc.sourceforge.net/doc-1.1/index.html">documentation</a>, the process goes like this:
<ol>
	<li>Create an xmlrpc client</li>
	<li>Set the debug level you think you need (optional)</li>
	<li>Create a new message</li>
	<li>Send the message</li>
	<li>Parse the response</li>
</ol>
<strong>Implementation:</strong> Again, this isn't rocket science, but here's what I did.  Suggestions and critiques are welcome.

[sourcecode language="php"]
$xmlrpc_client = new xmlrpc_client(&quot;xmlrpc.php&quot;, $host_url, 80);
$xmlrpc_client-&gt;setDebug(1); //this will print all the responses as they come back
$xmlrpc_message = new xmlrpcmsg(&quot;pingback.ping&quot;, array(new xmlrpcval($site_linking_from), new xmlrpcval($site_linking_to)));
$xmlrpc_response = $xmlrpc_client-&gt;send($xmlrpc_message);
if($xmlrpc_response-&gt;faultCode() == 0){
echo $xmlrpc_response-&gt;faultString();
}else{
echo &quot;Pingback successful&quot;;
}
[/sourcecode]

A couple of notes.  On line 3, "pingback.ping" is the XMLRPC API method that handles pingbacks.  Also, the order of the sites you send to the call would be your site, and the site you're pinging.  I switched this order around the first time and got some interesting error messages.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date>2009-07-15 12:39:46</wp:post_date>
		<wp:post_date_gmt>2009-07-15 17:39:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xmlrpc-pingbacks-using-php</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="pingback"><![CDATA[pingback]]></category>
		<category domain="post_tag" nicename="xmlrpc"><![CDATA[xmlrpc]]></category>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[25610139]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2686</wp:comment_id>
			<wp:comment_author><![CDATA[sam]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/majic3</wp:comment_author_url>
			<wp:comment_author_IP>79.77.253.53</wp:comment_author_IP>
			<wp:comment_date>2009-08-30 01:53:46</wp:comment_date>
			<wp:comment_date_gmt>2009-08-30 06:53:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[just the spur I was looking for thanks!<br>rocket science is just combustion, twist ,spin &  propulsion;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2735</wp:comment_id>
			<wp:comment_author><![CDATA[sam]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/majic3</wp:comment_author_url>
			<wp:comment_author_IP>79.77.253.53</wp:comment_author_IP>
			<wp:comment_date>2009-08-30 05:53:46</wp:comment_date>
			<wp:comment_date_gmt>2009-08-30 10:53:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[just the spur I was looking for thanks!<br>rocket science is just combustion, twist ,spin &  propulsion;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2748</wp:comment_id>
			<wp:comment_author><![CDATA[dilbertbooks]]></wp:comment_author>
			<wp:comment_author_email>db@dilbertbooks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.110.235.3</wp:comment_author_IP>
			<wp:comment_date>2010-01-13 01:28:24</wp:comment_date>
			<wp:comment_date_gmt>2010-01-13 06:28:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[exactly what i was looking for! no wonder you&#39;re front page on google for &#39;pingback xml-rpc&#39;!<br><br>thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2751</wp:comment_id>
			<wp:comment_author><![CDATA[Aparelho Ortodontico]]></wp:comment_author>
			<wp:comment_author_email>aporto@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.aparelho-ortodontico.com/</wp:comment_author_url>
			<wp:comment_author_IP>189.93.193.205</wp:comment_author_IP>
			<wp:comment_date>2010-01-18 05:44:57</wp:comment_date>
			<wp:comment_date_gmt>2010-01-18 10:44:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, I was in need of that piece of code!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2823</wp:comment_id>
			<wp:comment_author><![CDATA[Creating Pingbacks with PHP | Tim Mahoney]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://timothymahoney.com/2010/04/creating-pingbacks-with-php/</wp:comment_author_url>
			<wp:comment_author_IP>74.52.31.162</wp:comment_author_IP>
			<wp:comment_date>2010-04-28 12:30:57</wp:comment_date>
			<wp:comment_date_gmt>2010-04-28 17:30:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Found this great post about creating the functionality for XMLRPC pingbacks using PHP. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4273</wp:comment_id>
			<wp:comment_author><![CDATA[dinh vi]]></wp:comment_author>
			<wp:comment_author_email>gpsdinh@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://giamsatgps.vn/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-04-21 02:14:00</wp:comment_date>
			<wp:comment_date_gmt>2012-04-21 02:14:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you, it is exactly what I'm looking for using XMLRPC in my website]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4269</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>jimmytucsolo@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-03-29 01:59:00</wp:comment_date>
			<wp:comment_date_gmt>2012-03-29 01:59:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice instruction ! Keep it up ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Book Review: The Passionate Programmer</title>
		<link>http://blog.perplexedlabs.com/2009/07/29/book-review-the-passionate-programmer/</link>
		<pubDate>Wed, 29 Jul 2009 19:41:36 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=312</guid>
		<description></description>
		<content:encoded><![CDATA[I recently picked up a copy of <a href="http://www.amazon.com/gp/product/1934356344?ie=UTF8&tag=perplabs-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=1934356344">The Passionate Programmer: Creating a Remarkable Career in Software Development (Pragmatic Life)</a><img src="http://www.assoc-amazon.com/e/ir?t=perplabs-20&l=as2&o=1&a=1934356344" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />.  I read it over the course of a week and wanted to share some of my thoughts.

<a href="http://chadfowler.com/">Chad Fowler</a> co-authored the book <a href="http://www.amazon.com/gp/product/1934356085?ie=UTF8&tag=perplabs-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1934356085">Programming Ruby 1.9: The Pragmatic Programmers' Guide (Facets of Ruby)</a><img src="http://www.assoc-amazon.com/e/ir?t=perplabs-20&l=as2&o=1&a=1934356085" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> and is a huge advocate of Rails.  The book is a practical guide to growing as a professional software developer and is broken down into many 2-5 page sections focusing on a specific concept related to accomplishing this goal.

Some general themes permeate the entire 200 page text.  One in particular is to embrace the opportunities that exist in a world where many software development roles are being outsourced overseas.  He outlines a number of ways to take advantage of this situation to position yourself in a way where you are more attractive to potential employers, even the ones doing the outsourcing.

He encourages a constant, methodical, evaluation of your skillset in order to target your research and development towards the technologies that will become desirable next.  Stay ahead of the wave instead of being tossed around by it.

Each section ends with an "Act On It!" portion which provides actionable tasks that reinforce the concept you've just read.  Many of these are good suggestions and are easily incorporated into your day to day activities.

Another concept is the idea that your career in software development, essentially yourself, should be treated as a product.  A product which requires constant attention in both R&D and marketing.  Staying stagnant too long and not expanding the tools in your chest is a recipe for opportunity passing you by.  Marketing suggestions include blogging and contributing to open source projects.

If you've lost the passion for software development.  This book may provide just enough insight and food for thought to encourage you to get back on the right track and return to the days where you typed away into the wee hours of the night, not because you were getting paid, but because you loved it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>312</wp:post_id>
		<wp:post_date>2009-07-29 14:41:36</wp:post_date>
		<wp:post_date_gmt>2009-07-29 19:41:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>book-review-the-passionate-programmer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book-reviews"><![CDATA[Book Reviews]]></category>
		<category domain="post_tag" nicename="career"><![CDATA[career]]></category>
		<category domain="post_tag" nicename="consulting"><![CDATA[consulting]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="freelance"><![CDATA[freelance]]></category>
		<category domain="post_tag" nicename="india"><![CDATA[india]]></category>
		<category domain="post_tag" nicename="outsource"><![CDATA[outsource]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2717</wp:comment_id>
			<wp:comment_author><![CDATA[8 Books To Get A Developer For The Holidays | Perplexed Labs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com/2009/11/30/8-books-to-get-a-developer-for-the-holidays/</wp:comment_author_url>
			<wp:comment_author_IP>69.9.189.223</wp:comment_author_IP>
			<wp:comment_date>2009-11-30 08:35:51</wp:comment_date>
			<wp:comment_date_gmt>2009-11-30 13:35:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Highly recommended! Read my full review. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2756</wp:comment_id>
			<wp:comment_author><![CDATA[comforters for girls]]></wp:comment_author>
			<wp:comment_author_email>web@buerr.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.comfortersforteens.net/comforters-for-girls/</wp:comment_author_url>
			<wp:comment_author_IP>92.81.16.222</wp:comment_author_IP>
			<wp:comment_date>2010-02-09 18:32:38</wp:comment_date>
			<wp:comment_date_gmt>2010-02-09 23:32:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Having just finished the book I have to say that it&#39;s already one of my favorite programming books. The pragmatic programmers and Chad thrive on making quality content that is easy to read and contains actionable advice that can be applied immediately with measurable results]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Django 1.0 Template Development: Sample Chapter &quot;Serving Multiple Templates&quot;</title>
		<link>http://blog.perplexedlabs.com/2009/07/28/django-1-0-template-development-sample-chapter-serving-multiple-templates/</link>
		<pubDate>Wed, 29 Jul 2009 01:26:00 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=323</guid>
		<description></description>
		<content:encoded><![CDATA[DISCLOSURE: I was sent this sample chapter by the publisher.  I'm sure some of you folks will find it useful so I'm posting it.  For a review of the <a href="http://www.packtpub.com/django-1.0-template-design-practical-guide/book">book</a> go <a href="http://arthurkoziel.com/2009/07/27/book-review-django-10-template-development/">here</a>.

<a href='http://www.perplexedlabs.com/wp-content/uploads/2009/07/django-1-0-template-development-sample-chapter-6-serving-multiple-templates.pdf'>Download Sample Chapter 6 "Serving Multiple Templates"</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>323</wp:post_id>
		<wp:post_date>2009-07-28 20:26:00</wp:post_date>
		<wp:post_date_gmt>2009-07-29 01:26:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>django-1-0-template-development-sample-chapter-serving-multiple-templates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="templates"><![CDATA[templates]]></category>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2637</wp:comment_id>
			<wp:comment_author><![CDATA[Django 1.0 Template Development: Sample Chapter “Serving Multiple &#8230; | Webmaster Tools]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.netdeluxo.com/blog/facebook/django-1-0-template-development-sample-chapter-%e2%80%9cserving-multiple/</wp:comment_author_url>
			<wp:comment_author_IP>78.47.43.249</wp:comment_author_IP>
			<wp:comment_date>2009-07-28 21:54:13</wp:comment_date>
			<wp:comment_date_gmt>2009-07-29 02:54:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] See original here: Django 1.0 Template Development: Sample Chapter “Serving Multiple &#8230; [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Django 1.1 Released</title>
		<link>http://blog.perplexedlabs.com/2009/07/29/django-1-1-released/</link>
		<pubDate>Wed, 29 Jul 2009 13:18:12 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=327</guid>
		<description></description>
		<content:encoded><![CDATA[The Django project just <a href="http://www.djangoproject.com/weblog/2009/jul/29/1-point-1/">announced</a> that v1.1 is ready!  Go <a href="http://docs.djangoproject.com/en/dev/releases/1.1/">here</a> for the full release notes.

Some notable changes include support for aggregate functions from within the ORM.  This includes COUNT(), MAX(), MIN(), etc.

Also, the concept of "unmanaged" models which allow you to easily support tables that pre-existed or were created by some other means to not be maintained by Django.

Another useful addition is deferred fields.  This is useful in instances where you store large amounts of text or binary data in a table and may not necessarily want to retrieve that data in a query.

Looks like an excellent point release.  Go grab it now!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>327</wp:post_id>
		<wp:post_date>2009-07-29 08:18:12</wp:post_date>
		<wp:post_date_gmt>2009-07-29 13:18:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>django-1-1-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Twitter and SD News</title>
		<link>http://blog.perplexedlabs.com/2009/07/31/twitter-and-sd-news/</link>
		<pubDate>Fri, 31 Jul 2009 17:24:28 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://www.perplexedlabs.com/?p=336</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Motivation:</strong> <a href="http://news.sensusdivinitatis.com">SD News</a> is a "social news site" (basically a Hacker News clone), written in Rails, that I work on as part of my efforts with a Christian publishing company I run with some friends.  As part of the administrative backend, I wanted to be able to send posts to our <a href="http://twitter.com/sdpub">Twitter profile</a>.  The site is still young, and the community still growing, so I wanted the admins to have complete control over what gets sent to Twitter.  I had thought of automating this process based on which items have the most votes in a given time period, but trust is easy to lose and all it would take is 1 or 2 irrelevant, or irreverent. posts to lose that trust.

<strong>Methodology:</strong> I would first need a good Twitter gem for Ruby, and I'd need to decide which URL shortening service I'd use.  <a href="http://twitter.rubyforge.org/">Ruby Twitter</a> seemed to be the simplest gem for Twitter.  For the URL shortening I chose bit.ly, because the <a href="http://github.com/philnash/bitly/tree/master">bitly gem</a> seemed like the easiest, and the documentation was good.  My plan of attack was:
<ol>
	<li>Grab one item from the queue, that has not been Twittered</li>
	<li>Shorten the URL via bitly</li>
	<li>Send the item's title and shortened URL to Twitter</li>
	<li>Save the shortened URL in the database so I could retrieve stats later</li>
</ol>
The script that did this would be run every hour.
<strong>
Implementation: </strong>The two gems made this an almost trivial implementation.

[sourcecode language="ruby"]
require 'twitter'
require 'bitly'

@item = Item.find(:first, :conditions =&gt; &quot;send_to_twitter = 1 and twitterd = 0&quot;, :order =&gt; &quot;posted_on desc&quot;)

if !@item.nil?
   b = Bitly.new(username, password)
   @url = b.shorten(&quot;http://news.sensusdivinitatis.com/item/#{@item.id}&quot;).short_url

   httpauth = Twitter::HTTPAuth.new(username, password)
   base = Twitter::Base.new(httpauth)
   base.update(&quot;#{@item.title[0...110]} - #{@url}&quot;) #shorten the title if it's too long

   Item.update(@item.id, :twitterd =&gt; 1, :bitly_url =&gt; @url) #save the bit.ly url
end
[/sourcecode]

That's pretty much it.  Incidentally, the bitly gem makes it very easy to grab the stats for any URL.  For instance, if you wanted to see how many clicks a given URL has received:

[sourcecode language="ruby"]
require 'twitter'
require 'bitly'

@item = Item.find(id)
b = Bitly.new(username, password)
@clicks = b.stats(i.bitly_url).stats[&quot;clicks&quot;]
[/sourcecode]

Done.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>336</wp:post_id>
		<wp:post_date>2009-07-31 12:24:28</wp:post_date>
		<wp:post_date_gmt>2009-07-31 17:24:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>twitter-and-sd-news</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="hacker-news"><![CDATA[hacker news]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby-development"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<category domain="post_tag" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<category domain="post_tag" nicename="twitter"><![CDATA[twitter]]></category>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Backing Up Subversion Repositories Using svnadmin hotcopy</title>
		<link>http://blog.perplexedlabs.com/2009/09/11/backing-up-subversion-repositories-using-svnadmin-hotcopy/</link>
		<pubDate>Fri, 11 Sep 2009 17:18:02 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=363</guid>
		<description></description>
		<content:encoded><![CDATA[Just wanted to post this quick bash script to iterate over the repositories in a directory, perform an svnadmin hotcopy, and tar/gzip the output.

By using hotcopy this can be performed on a live subversion repository and will produce a pristine backup.

[sourcecode language="bash"]
#!/bin/bash
REPOS_PATH=/var/repos
mkdir -p /backups/weekly
rm -rf /backups/tmp
mkdir -p /backups/tmp/repos
for i in $(ls $REPOS_PATH); do
        /path/to/svnadmin hotcopy $REPOS_PATH/$i /backups/tmp/repos/$i
done
FN=svn.weekly.`date '+%Y%m%d'`.tar.gz
tar -czf /backups/weekly/$FN -C /backups/tmp .
[/sourcecode]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>363</wp:post_id>
		<wp:post_date>2009-09-11 12:18:02</wp:post_date>
		<wp:post_date_gmt>2009-09-11 17:18:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>backing-up-subversion-repositories-using-svnadmin-hotcopy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="backup"><![CDATA[backup]]></category>
		<category domain="post_tag" nicename="bash"><![CDATA[bash]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="hotcopy"><![CDATA[hotcopy]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="post_tag" nicename="subversion"><![CDATA[subversion]]></category>
		<category domain="post_tag" nicename="svn"><![CDATA[svn]]></category>
		<category domain="post_tag" nicename="svnadmin"><![CDATA[svnadmin]]></category>
		<wp:postmeta>
			<wp:meta_key>syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[33833637]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2743</wp:comment_id>
			<wp:comment_author><![CDATA[JeffS]]></wp:comment_author>
			<wp:comment_author_email>jeffsch@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>147.21.16.3</wp:comment_author_IP>
			<wp:comment_date>2009-12-22 21:16:08</wp:comment_date>
			<wp:comment_date_gmt>2009-12-23 02:16:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the very useful and concise snippets...very helpful and time saving.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4023</wp:comment_id>
			<wp:comment_author><![CDATA[Daily incremental backup + weekly full backup - Admins Goodies]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://adminsgoodies.com/daily-incremental-backup-weekly-full-backup/</wp:comment_author_url>
			<wp:comment_author_IP>64.90.55.54</wp:comment_author_IP>
			<wp:comment_date>2011-08-09 02:45:15</wp:comment_date>
			<wp:comment_date_gmt>2011-08-09 07:45:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] in regular files on the filesystem, and you can back them up with rsync, svnadmin hotcopy (sample script here), or whatever other tool you [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Setup Python 2.6.4, mod_wsgi 2.6, and Django 1.1.1 on CentOS 5.3 (cPanel)</title>
		<link>http://blog.perplexedlabs.com/2009/11/15/setup-python-2-6-4-mod_wsgi-2-6-and-django-1-1-1-on-centos-5-3-cpanel/</link>
		<pubDate>Sun, 15 Nov 2009 20:37:38 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=378</guid>
		<description></description>
		<content:encoded><![CDATA[This is an update to my previous how-to <a href="http://blog.perplexedlabs.com/2008/11/10/setup-python-25-mod_wsgi-and-django-10-on-centos-5-cpanel/">Setup Python 2.5, mod_wsgi, and Django 1.0 on CentOS 5 (cPanel)</a>.

The biggest reason why I chose to go with Python 2.5 at the time was because the MySQL Python (MySQLdb) package didn't support Python 2.6.  The 1.2.3c1 release does so that roadblock is lifted.

The instructions are identical - nothing has really changed in that regard.  Just change the references from Python 2.5 to 2.6.  Here are the links to the versions I'm using successfully:

<blockquote>
Python 2.6.4: <a href="http://www.python.org/ftp/python/2.6.4/Python-2.6.4.tgz">http://www.python.org/ftp/python/2.6.4/Python-2.6.4.tgz</a>

setuptools 0.6c11: <a href="http://pypi.python.org/packages/2.6/s/setuptools/setuptools-0.6c11-py2.6.egg#md5=bfa92100bd772d5a213eedd356d64086">http://pypi.python.org/packages/2.6/s/setuptools/setuptools-0.6c11-py2.6.egg#md5=bfa92100bd772d5a213eedd356d64086</a>

MySQLdb 1.2.3c1: <a href="http://sourceforge.net/projects/mysql-python/files/mysql-python-test/1.2.3c1/MySQL-python-1.2.3c1.tar.gz/download">http://sourceforge.net/projects/mysql-python/files/mysql-python-test/1.2.3c1/MySQL-python-1.2.3c1.tar.gz/download</a>

mod_wsgi 2.6: <a href="http://modwsgi.googlecode.com/files/mod_wsgi-2.6.tar.gz">http://modwsgi.googlecode.com/files/mod_wsgi-2.6.tar.gz</a>

Django 1.1.1: <a href="http://www.djangoproject.com/download/1.1.1/tarball/">http://www.djangoproject.com/download/1.1.1/tarball/</a>
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>378</wp:post_id>
		<wp:post_date>2009-11-15 15:37:38</wp:post_date>
		<wp:post_date_gmt>2009-11-15 20:37:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>setup-python-2-6-4-mod_wsgi-2-6-and-django-1-1-1-on-centos-5-3-cpanel</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="centos"><![CDATA[centos]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="mod_wsgi"><![CDATA[mod_wsgi]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="mysql-python"><![CDATA[mysql-python]]></category>
		<category domain="post_tag" nicename="mysqldb"><![CDATA[mysqldb]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="setuptools"><![CDATA[setuptools]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[45785753]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2709</wp:comment_id>
			<wp:comment_author><![CDATA[Setup Python 2.5, mod_wsgi, and Django 1.0 on CentOS 5 (cPanel) | Perplexed Labs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com/2008/11/10/setup-python-25-mod_wsgi-and-django-10-on-centos-5-cpanel/</wp:comment_author_url>
			<wp:comment_author_IP>69.9.189.223</wp:comment_author_IP>
			<wp:comment_date>2009-11-15 15:39:44</wp:comment_date>
			<wp:comment_date_gmt>2009-11-15 20:39:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Please read the update to this article Setup Python 2.6.4, mod_wsgi 2.6, and Django 1.1.1 on CentOS 5.3 (cPanel) [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2715</wp:comment_id>
			<wp:comment_author><![CDATA[chris]]></wp:comment_author>
			<wp:comment_author_email>focodon@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>124.64.64.173</wp:comment_author_IP>
			<wp:comment_date>2009-11-25 10:53:44</wp:comment_date>
			<wp:comment_date_gmt>2009-11-25 15:53:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for your guild.<br>I have a prpblem after I upgrade python to 2.5. I use easy_install(installed for python 2.5) to install lxml. But it ends up telling me " /usr/bin/ld: cannot find -lpython2.5. " <br>I already created the /etc/ld.so.conf.d/opt-python2.5.conf with "/opt/python2.5/lib"<br>Do you have any idea what is wrong with my ld?<br>Thanks for your time]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2745</wp:comment_id>
			<wp:comment_author><![CDATA[Building a deployment server on SliceHost Centos 5.3 &laquo; Black Bag Operations Network]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.blackbagops.net/2010/01/03/building-a-deployment-server-on-slicehost-centos-5-3/</wp:comment_author_url>
			<wp:comment_author_IP>208.115.34.2</wp:comment_author_IP>
			<wp:comment_date>2010-01-03 06:36:11</wp:comment_date>
			<wp:comment_date_gmt>2010-01-03 11:36:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] a modern python and mod_wsgi installed was made easy using this tutorial. But getting mod_wsgi configured with virtualenv took forever, largely because I kept running into [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2724</wp:comment_id>
			<wp:comment_author><![CDATA[chris]]></wp:comment_author>
			<wp:comment_author_email>focodon@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>124.64.64.173</wp:comment_author_IP>
			<wp:comment_date>2009-11-25 15:53:44</wp:comment_date>
			<wp:comment_date_gmt>2009-11-25 20:53:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for your guild.<br>I have a prpblem after I upgrade python to 2.5. I use easy_install(installed for python 2.5) to install lxml. But it ends up telling me " /usr/bin/ld: cannot find -lpython2.5. " <br>I already created the /etc/ld.so.conf.d/opt-python2.5.conf with "/opt/python2.5/lib"<br>Do you have any idea what is wrong with my ld?<br>Thanks for your time]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2758</wp:comment_id>
			<wp:comment_author><![CDATA[Django 101 | KomunitasWeb]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://komunitasweb.com/2010/02/django-101/</wp:comment_author_url>
			<wp:comment_author_IP>209.62.89.10</wp:comment_author_IP>
			<wp:comment_date>2010-02-17 08:51:38</wp:comment_date>
			<wp:comment_date_gmt>2010-02-17 13:51:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Setup Python 2.6.4, mod_wsgi 2.6, and Django 1.1.1 on CentOS 5.3 (cPanel) (November 2009) [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2759</wp:comment_id>
			<wp:comment_author><![CDATA[Venky]]></wp:comment_author>
			<wp:comment_author_email>venky@miglu.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.venkysblog.com/</wp:comment_author_url>
			<wp:comment_author_IP>113.199.159.38</wp:comment_author_IP>
			<wp:comment_date>2010-02-20 05:42:26</wp:comment_date>
			<wp:comment_date_gmt>2010-02-20 10:42:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice Post, I have a similar Post at:<br><br><a href="http://www.venkysblog.com/2009/12/centos-python-wsgi-dango/" rel="nofollow">http://www.venkysblog.com/2009/12/centos-python...</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>8 Books To Get A Developer For The Holidays</title>
		<link>http://blog.perplexedlabs.com/2009/11/30/8-books-to-get-a-developer-for-the-holidays/</link>
		<pubDate>Mon, 30 Nov 2009 13:30:06 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=385</guid>
		<description></description>
		<content:encoded><![CDATA[Send this to your significant other/parent/relative/friend so, instead of that sweater, you get one of these nuggets of awesome this Christmas.

<h3><a href="http://www.amazon.com/gp/product/020161622X?ie=UTF8&tag=perplabs-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=020161622X">The Pragmatic Programmer: From Journeyman to Master</a><img src="http://www.assoc-amazon.com/e/ir?t=perplabs-20&l=as2&o=1&a=020161622X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></h3>

Write better, cleaner, more maintainable code.  Learn how to manage your projects and focus on shipping your product.  With insight that covers the gamut of software development from low level to management 
this one is a must have for anyone involved in this industry.

<h3><a href="http://www.amazon.com/gp/product/1934356344?ie=UTF8&tag=perplabs-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1934356344">The Passionate Programmer: Creating a Remarkable Career in Software Development</a><img src="http://www.assoc-amazon.com/e/ir?t=perplabs-20&l=as2&o=1&a=1934356344" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></h3>

Highly recommended!  <a href="http://blog.perplexedlabs.com/2009/07/29/book-review-the-passionate-programmer/">Read my full review</a>.

<h3><a href="http://www.amazon.com/gp/product/0735619670?ie=UTF8&tag=perplabs-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0735619670">Code Complete: A Practical Handbook of Software Construction</a><img src="http://www.assoc-amazon.com/e/ir?t=perplabs-20&l=as2&o=1&a=0735619670" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></h3>

Another classic "software construction" book.  Sharpen your saw with timeless information that can be applied to any project in any language.  Less bugs, more productivity, more programmer happiness.

<h3><a href="http://www.amazon.com/gp/product/1430219483?ie=UTF8&tag=perplabs-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1430219483">Coders at Work</a><img src="http://www.assoc-amazon.com/e/ir?t=perplabs-20&l=as2&o=1&a=1430219483" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></h3>

This one is different.  Written as a set of interview transcripts with 15 legendary industry giants, this book is a fantastic insight into how some of the great minds think.  It's inspiring to hear it from the source, must have!

<h3><a href="http://www.amazon.com/gp/product/1934356336?ie=UTF8&tag=perplabs-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1934356336">Programming Clojure</a><img src="http://www.assoc-amazon.com/e/ir?t=perplabs-20&l=as2&o=1&a=1934356336" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></h3>

A developer should learn at least one new language a year.  This year that language should be Clojure.  Clojure is a dynamic, general purpose, language targeting the Java virtual machine and designed for multi-threaded use.  It's growing popularity, ability to leverage the Java standard library, and its multi-threaded nature make this a must have.

<h3><a href="http://www.amazon.com/gp/product/0201835959?ie=UTF8&tag=perplabs-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0201835959">The Mythical Man-Month: Essays on Software Engineering</a><img src="http://www.assoc-amazon.com/e/ir?t=perplabs-20&l=as2&o=1&a=0201835959" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></h3>

Another classic.  Primarily discusses project management from the perspective of Fred Brooks and his experiences at IBM.  Brooks' Law states that "adding manpower to a late software project makes it later".

<h3><a href="http://www.amazon.com/gp/product/0321344758?ie=UTF8&tag=perplabs-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0321344758">Don't Make Me Think: A Common Sense Approach to Web Usability</a><img src="http://www.assoc-amazon.com/e/ir?t=perplabs-20&l=as2&o=1&a=0321344758" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></h3>

Web developers should always keep in mind the user of the product their creating.  Usability becomes increasingly important as applications move to the web.  The design and usability of your app can make or break its success.  This classic is a must read.

<h3><a href="http://www.amazon.com/gp/product/0201633612?ie=UTF8&tag=perplabs-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0201633612">Design Patterns: Elements of Reusable Object-Oriented Software</a><img src="http://www.assoc-amazon.com/e/ir?t=perplabs-20&l=as2&o=1&a=0201633612" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></h3>

This classic known most commonly as the "gang of four" book is the definitive reference on design patterns.  Covering all of the most common cases and time and time again serving as an invaluable source of information.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>385</wp:post_id>
		<wp:post_date>2009-11-30 08:30:06</wp:post_date>
		<wp:post_date_gmt>2009-11-30 13:30:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>8-books-to-get-a-developer-for-the-holidays</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="book-review"><![CDATA[book review]]></category>
		<category domain="category" nicename="book-reviews"><![CDATA[Book Reviews]]></category>
		<category domain="post_tag" nicename="clojure"><![CDATA[clojure]]></category>
		<category domain="category" nicename="clojure-development"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="programmer"><![CDATA[programmer]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby-development"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<category domain="post_tag" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[48803212]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Django Up In Your CRON</title>
		<link>http://blog.perplexedlabs.com/2010/03/02/django-up-in-your-cron/</link>
		<pubDate>Tue, 02 Mar 2010 13:00:42 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=354</guid>
		<description></description>
		<content:encoded><![CDATA[For one off scripts for a particular project:

[sourcecode language="python"]
#!/usr/bin/env python

from django.core.management import setup_environ
from myapp import settings
setup_environ(settings)

# do some stuff
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>354</wp:post_id>
		<wp:post_date>2010-03-02 08:00:42</wp:post_date>
		<wp:post_date_gmt>2010-03-02 13:00:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>django-up-in-your-cron</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cron"><![CDATA[cron]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[71592721]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2768</wp:comment_id>
			<wp:comment_author><![CDATA[hvdklauw]]></wp:comment_author>
			<wp:comment_author_email>hvdklauw@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.212.56.27</wp:comment_author_IP>
			<wp:comment_date>2010-03-03 10:43:53</wp:comment_date>
			<wp:comment_date_gmt>2010-03-03 15:43:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I write management commands for that.<br><br>Just /path/to/virtualenv/bin/python /path/to/project/management.py run_some_command --with some --parameters<br><br><br>Works great and you can even implement debugging and testing options so you can do test runs.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2769</wp:comment_id>
			<wp:comment_author><![CDATA[David]]></wp:comment_author>
			<wp:comment_author_email>djfische@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>129.46.77.48</wp:comment_author_IP>
			<wp:comment_date>2010-03-05 00:20:24</wp:comment_date>
			<wp:comment_date_gmt>2010-03-05 05:20:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Agreed. This is exactly what management commands are for.<br><a href="http://docs.djangoproject.com/en/1.1/howto/custom-management-commands/" rel="nofollow">http://docs.djangoproject.com/en/1.1/howto/cust...</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2768</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2772</wp:comment_id>
			<wp:comment_author><![CDATA[Peter]]></wp:comment_author>
			<wp:comment_author_email>peter787@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.146.136.190</wp:comment_author_IP>
			<wp:comment_date>2010-03-11 18:47:02</wp:comment_date>
			<wp:comment_date_gmt>2010-03-11 23:47:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,<br><br>Thanks for the tip.<br><br>Would you mind telling me the name of the font you use in your logo?<br><br>The "labs" part.<br><br>I like it a lot :)<br><br>Thanks,<br><br>Peter]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>PHP Forking to Concurrency with pcntl_fork()</title>
		<link>http://blog.perplexedlabs.com/2010/03/02/php-forking-to-concurrency/</link>
		<pubDate>Tue, 02 Mar 2010 13:00:10 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=376</guid>
		<description></description>
		<content:encoded><![CDATA[I find it interesting and challenging to bend PHP in ways it probably shouldn't be bent.  Almost always I walk away pleasantly surprised at it's ability to solve a variety of problems.

Consider this example.  Let's say you want to take advantage of more than one core for a given process.  Perhaps it performs many intensive computations and on a single core would take an hour to run.  Since a PHP process is single threaded you won't optimally take advantage of the available multi-core resources you may have.

Fortunately, via the Process Control (<a href="http://php.net/manual/en/book.pcntl.php">PCNTL</a>) extension, PHP provides a way to fork new child processes.  Forking is the concept of duplicating a thread of execution from the parent to a new child.  <a href="http://www.php.net/manual/en/function.pcntl-fork.php">pcntl_fork()</a> is the function that does this.

The framework for using this extension is as follows:

[sourcecode language="php"]
$maxChildren = 4;
$numChildren = 0;
foreach($unitsOfWork as $unit) {
	$pids[$numChildren] = pcntl_fork();
	if(!$pids[$numChildren]) {
		// do work
		doWork($unit);
		posix_kill(getmypid(), 9);
	} else {
		$numChildren++;
		if($numChildren == $maxChildren) {
			pcntl_wait($status);
			$numChildren--;
		}
	}
}
[/sourcecode]

When a new child is forked via pcntl_fork() the pid is returned.  The if statement following the fork allows the child and parent to split their flow of execution based on who they are (i.e. the child does the work and kills itself - the parent tests for hitting the max number of children and waits, otherwise it creates another child).  The pcntl_wait() function is called when we hit $maxChildren, it blocks until a child exits.

Remember, if you want use database connections in your children, they each need to initialize their own connection.  Resources such as database connections are not thread safe.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>376</wp:post_id>
		<wp:post_date>2010-03-02 08:00:10</wp:post_date>
		<wp:post_date_gmt>2010-03-02 13:00:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-forking-to-concurrency</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="concurrency"><![CDATA[concurrency]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="fork"><![CDATA[fork]]></category>
		<category domain="post_tag" nicename="parallel"><![CDATA[parallel]]></category>
		<category domain="post_tag" nicename="pcntl"><![CDATA[pcntl]]></category>
		<category domain="post_tag" nicename="pcntl_fork"><![CDATA[pcntl_fork]]></category>
		<category domain="post_tag" nicename="pcntl_wait"><![CDATA[pcntl_wait]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="process"><![CDATA[process]]></category>
		<category domain="post_tag" nicename="thread"><![CDATA[thread]]></category>
		<category domain="post_tag" nicename="unix"><![CDATA[unix]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[71725933]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2767</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>68.173.11.54</wp:comment_author_IP>
			<wp:comment_date>2010-03-03 01:10:11</wp:comment_date>
			<wp:comment_date_gmt>2010-03-03 06:10:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Basically, you want the child to exit without cleaning up.<br><br>Thanks for the comment!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2766</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2766</wp:comment_id>
			<wp:comment_author><![CDATA[Nicolas]]></wp:comment_author>
			<wp:comment_author_email>nsebban@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.nico-live.com/</wp:comment_author_url>
			<wp:comment_author_IP>86.193.25.211</wp:comment_author_IP>
			<wp:comment_date>2010-03-02 22:21:07</wp:comment_date>
			<wp:comment_date_gmt>2010-03-03 03:21:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[PHP CLI has a lot of awesome surprises for people using it wisely :)<br><br>Out of curiosity, why kill the forked process with "posix_kill(getMyPid())" instead of just using the "exit()" function ?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2770</wp:comment_id>
			<wp:comment_author><![CDATA[Procesos concurrentes en PHP | Sentido Web]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://sentidoweb.com/2010/03/11/procesos-concurrentes-en-php.php</wp:comment_author_url>
			<wp:comment_author_IP>208.113.195.28</wp:comment_author_IP>
			<wp:comment_date>2010-03-11 12:52:05</wp:comment_date>
			<wp:comment_date_gmt>2010-03-11 17:52:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] PHP Forking to Concurrency with pcntl_fork() [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2771</wp:comment_id>
			<wp:comment_author><![CDATA[PHP-help &raquo; Perplexed Labs Blog: PHP Forking to Concurrency with pcntl_fork()]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://docs.urtechnology.com/2010/03/perplexed-labs-blog-php-forking-to-concurrency-with-pcntl_fork/</wp:comment_author_url>
			<wp:comment_author_IP>74.55.128.146</wp:comment_author_IP>
			<wp:comment_date>2010-03-11 13:20:23</wp:comment_date>
			<wp:comment_date_gmt>2010-03-11 18:20:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the Perplexed Labs blog there&#8217;s a recent post looking at how to fork processes in PHP with the help of the pcntl_fork function and the process management extension.   Let&#8217;s say [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2774</wp:comment_id>
			<wp:comment_author><![CDATA[[PHP]: Procesos concurrentes | HyperCODE]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.hypercode.net/php-procesos-concurrentes/</wp:comment_author_url>
			<wp:comment_author_IP>82.98.131.174</wp:comment_author_IP>
			<wp:comment_date>2010-03-12 16:11:02</wp:comment_date>
			<wp:comment_date_gmt>2010-03-12 21:11:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Fuente: PHP Forking to Concurrency with pcntl_fork() [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4275</wp:comment_id>
			<wp:comment_author><![CDATA[Stephen M]]></wp:comment_author>
			<wp:comment_author_email>stephen.maeder@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-05-03 17:31:00</wp:comment_date>
			<wp:comment_date_gmt>2012-05-03 17:31:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Drat. That didn't work so well - I haven't used disqus before. Here's what you need at the end of the code:
while ($numChildren &gt; 0) {pcntl_wait($status); $numChildren--;}]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>4274</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3944</wp:comment_id>
			<wp:comment_author><![CDATA[PHP和Jquery的长连接 | 长尾博客]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://mvvv.tk/vk/11.html</wp:comment_author_url>
			<wp:comment_author_IP>184.22.128.82</wp:comment_author_IP>
			<wp:comment_date>2011-06-24 21:44:17</wp:comment_date>
			<wp:comment_date_gmt>2011-06-25 02:44:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] PHP Forking to Concurrency with pcntl_fork() [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4274</wp:comment_id>
			<wp:comment_author><![CDATA[Stephen M]]></wp:comment_author>
			<wp:comment_author_email>stephen.maeder@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-05-03 17:17:00</wp:comment_date>
			<wp:comment_date_gmt>2012-05-03 17:17:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you so much for this!

I fleshed it out a bit more, and added in a while statement at the end so that the parent is sure to wait for all children to finish before exiting.

 0) {	pcntl_wait($status);	$numChildren--;}print "Completed successfully.n";?&gt;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>jQuery 1.4 Alpha 1 Released</title>
		<link>http://blog.perplexedlabs.com/2009/12/05/jquery-1-4-alpha-1-released/</link>
		<pubDate>Sat, 05 Dec 2009 16:57:23 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=398</guid>
		<description></description>
		<content:encoded><![CDATA[Just wanted to mention that <a href="http://blog.jquery.com/2009/12/04/jquery-14-alpha-1-released/">jQuery 1.4 Alpha 1</a> has been released.

Most of the changes seem to revolve around heavy optimization of some core functionality.  Installing this alpha and testing in live applications will help get this release out!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>398</wp:post_id>
		<wp:post_date>2009-12-05 11:57:23</wp:post_date>
		<wp:post_date_gmt>2009-12-05 16:57:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jquery-1-4-alpha-1-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[49980634]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>jQuery 1.4a2 (Alpha 2) Released</title>
		<link>http://blog.perplexedlabs.com/2009/12/19/jquery-1-4a2-alpha-2-released/</link>
		<pubDate>Sat, 19 Dec 2009 16:04:28 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=400</guid>
		<description></description>
		<content:encoded><![CDATA[The wonderful folks over at jQuery have released <a href="http://blog.jquery.com/2009/12/18/jquery-14-alpha-2-released/">Alpha 2</a> of version 1.4 for all those testers out there.

1.4 is slated for official launch on January 14th - how cute :)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>400</wp:post_id>
		<wp:post_date>2009-12-19 11:04:28</wp:post_date>
		<wp:post_date_gmt>2009-12-19 16:04:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jquery-1-4a2-alpha-2-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="1-4"><![CDATA[1.4]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<category domain="post_tag" nicename="jquery-1-4"><![CDATA[jquery 1.4]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[52891050]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>jQuery 1.4 Released</title>
		<link>http://blog.perplexedlabs.com/2010/01/14/jquery-1-4-released/</link>
		<pubDate>Thu, 14 Jan 2010 20:57:24 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=405</guid>
		<description></description>
		<content:encoded><![CDATA[Many (awesome) changes <a href="http://blog.jquery.com/2010/01/14/jquery-14-released/">http://blog.jquery.com/2010/01/14/jquery-14-released/</a>.

View the release notes here: <a href="http://jquery14.com/day-01/jquery-14">http://jquery14.com/day-01/jquery-14</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>405</wp:post_id>
		<wp:post_date>2010-01-14 15:57:24</wp:post_date>
		<wp:post_date_gmt>2010-01-14 20:57:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jquery-1-4-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[ajax]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="framework"><![CDATA[framework]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b17a01749b5e9576f4a7a15bf38af675</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_cbfb39502c443718ee9cce08d16b94c4</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_60d3af0d237e7f33433373e739b7bb74</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[58627358]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2750</wp:comment_id>
			<wp:comment_author><![CDATA[Weekly Digest for January 16th | William Stearns]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.wstearns.com/blog/2010/01/16/weekly-digest-for-january-16th/</wp:comment_author_url>
			<wp:comment_author_IP>205.196.212.5</wp:comment_author_IP>
			<wp:comment_date>2010-01-16 23:11:37</wp:comment_date>
			<wp:comment_date_gmt>2010-01-17 04:11:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Shared Matt Reiferson: jQuery 1.4 Released. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Deployment Using Capistrano / Webistrano via Rails / Phusion Passenger</title>
		<link>http://blog.perplexedlabs.com/2010/02/08/deployment-using-capistrano-and-webistrano-via-rails-and-phusion-passenger/</link>
		<pubDate>Mon, 08 Feb 2010 13:00:32 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=408</guid>
		<description></description>
		<content:encoded><![CDATA[I finally got around to setting up a more sophisticated deployment system for some of my apps.  These apps include some built on a custom PHP framework and others that are Python / Django apps.  I figured I'd share my experience...

Why is a high-level deployment infrastructure important?  Deployment is something that should be simple, accessible, and repeatable.  It should be as close to a "single click" as possible.  Previously, for me, it was a bash script that exported some SVN branches.  While this worked fine, as projects progress, you want some accountability, history, and the ability to roll back mission critical applications when something goes wrong with a deploy.

<a href="http://www.capify.org/">Capistrano</a> is an open source, command line, deployment tool that provides all of these features.  It's written in Ruby.  You leverage a variety of built in "recipes" (Capistrano's term for a deployment script) that execute certain procedures to deploy an app.  Out-of-the-box it's ideally built to deploy a Rails app.  However, after some minor tweaks it can deploy most anything and do it well.  It can restart servers, update symlinks, change permissions - pretty much anything.  It assumes you access your POSIX compliant server via SSH via the same password (or have ssh keys setup).

<a href="http://labs.peritor.com/webistrano">Webistrano</a> is an open source web front-end for Capistrano.  It's a convenience layer that abstracts the command line away and provides an interface to perform the same tasks.  This interface shows history as well as providing a convenient GUI for creating new deployment projects, stages, and recipes.  Highly recommended.

Let's get down to business.  This post makes a few assumptions about things you've already installed and used previously.

<ul>
<li><a href="http://www.ruby-lang.org/en/">Ruby 1.8.5</a>+
<li><a href="http://rubyforge.org/projects/rubygems/">RubyGems</a>
<li><a href="http://www.mysql.com/">MySQL 5.0</a>+
<li><a href="http://www.apache.org/">Apache 2</a>+
<li><a href="http://subversion.tigris.org/">Subversion</a> and a repository containing the "production" branch of your app.
</ul>

<h3>Installing Capistrano</h3>

Well, this is an easy one (you probably want to do this as root):

<blockquote>
gem install capistrano
</blockquote>

<h3>Installing Webistrano</h3>

Also fairly easy, with a little splash of configuration.

<blockquote>
# wget http://labs.peritor.com/webistrano/attachment/wiki/Download/webistrano-1.4.zip
# unzip webistrano-1.4.zip
# mv webistrano-1.4 /path/to/where/you/want/webistrano
</blockquote>

Setup the database tables and create a new webistrano user (obviously be conscious of your security preferences for access to your database in the host and password portions):

<blockquote>
# mysql
mysql> CREATE DATABASE `webistrano`;
mysql> CREATE USER 'webistrano'@'localhost' IDENTIFIED BY 'password';
mysql> GRANT ALL PRIVILEGES ON `webistrano`.* TO 'webistrano'@'localhost' WITH GRANT OPTION;
</blockquote>

Now, in the directory where you placed webistrano you're going to want to copy <i>config/database.yml.sample</i> to <i>config/database.yml</i>.  Edit this file, in the production area, to match your database settings.  By default the file expects a socket to connect, you can chase this by specifying <i>host:</i> and <i>port:</i>.  (Keep in mind Webistrano is simply a Rails app).

You should now be able to have Rails migrate the new database you created.  In the webistrano directory:

<blockquote>
# RAILS_ENV=production rake db:migrate
</blockquote>

Finally, copy <i>config/webistrano_config.rb.sample</i> to <i>config/webistrano_config.rb</i> and edit according to your preferred mail settings.

We can now test to see if webistrano is working properly by serving it via mongrel:

<blockquote>
# ruby script/server -d -e production -p 3000
</blockquote>

This starts a single mongrel daemon, using the production environment, listening on port 3000.  You should now be able to hit http://127.0.0.1:3000/ and get the Webistrano login prompt.  If this is working, kill that mongrel instance.

For longer term serving I decided to go with Phusion Passenger (essentially mod_rails for Apache).  It's a nearly zero configuration solution for serving a rails app and will feel at home to anyone with experience serving PHP apps via Apache and mod_php.

<h3>Installing Phusion Passenger</h3>

Again, as root:

<blockquote>
# gem install passenger
# passenger-install-apache2-module
</blockquote>

The second command will invoke an installer which compiled Passenger and provides instructions on integrating it into your Apache config.  Essentially, edit your httpd.conf as follows (<strong>these were specific to my install, make sure to use the ones provide by the installer for you</strong>):

<blockquote>
LoadModule passenger_module /usr/lib/ruby/gems/1.8/gems/passenger-2.2.9/ext/apache2/mod_passenger.so
PassengerRoot /usr/lib/ruby/gems/1.8/gems/passenger-2.2.9
PassengerRuby /usr/bin/ruby
</blockquote>

Now you can simply add VirtualHost entries to your httpd.conf for any of your Rails apps.  Let's add one for Webistrano:

<blockquote>
&lt;VirtualHost *:80&gt;
ServerName webistrano.mydomain.com
DocumentRoot /path/to/webistrano/public
&lt;/VirtualHost&gt;
</blockquote>

Yes, Passenger makes it that simple.  Add configuration directives as needed for your environment.

Now Webistrano should be serving from the VirtualHost you specified, seamlessly, via Passenger.

<h3>Deploying A Non-Rails App</h3>

Now the fun stuff.

Capistrano breaks things down into projects, stages, and recipes.  Each app you want managed by capistrano should be it's own project.  Each project should have a stage for at least production and optionally staging and development.

Hosts are added globally and form the targets of a deploy for any given project.  Hosts can include web, app, and database servers.

Deployments in Capistrano are done to a child directory under "releases" named via the date and time of the deployment.  By default 5 releases are kept and available to rollback to.  Upon successful deployment a symlink (default is called "current" and can be modified via the <i>current_path</i> configuration variable) is updated to that release directory.  It is this symlink that should be targeted by your webserver (your DocumentRoot in Apache).

Capistrano also creates a "shared" directory that is symlinked to in each release useful for storing logs and other data that should be maintained through each deployment.

For non-rails apps you'll use the "Pure File" project type when creating your new project.  Upon project creation you can add configuration variables specific to your project.  I recommend using <i>:export</i> instead of <i>:checkout</i> for <i>deploy_via</i> for production subversion deployments as this doesn't expose .svn directories.  Use an SSH user that has enough permissions to create directories where your deploy will occur or, specify <i>use_sudo</i> to true and create a new configuration variable <i>admin_runner</i> and set it to the same user as <i>runner</i>.

Add a stage to your new project for "production".  In the "Manage Hosts" page add a new host for each of your application servers.  Then add each host as a target of your "production" stage of your project.

At this point you should be able to execute the "Setup" task for your "production" stage.  This is a one time task that simply creates the directories.

Assuming this went successfully, try doing a "Deploy" and see if that finishes without error.  You might have to play around with permissions and other minor issues - post a comment if you have any specific questions.

For my PHP framework there are a couple specific tasks I wanted to run in addition to the default Capistrano tasks.  You do this by creating custom recipes in the "Manage Recipes" page in Webistrano.  Recipes are simply procedures written in ruby.  Here's what my recipe looks like:

[sourcecode language="ruby"]
namespace :deploy do
	task :setup, :except =&gt; { :no_release =&gt; true } do
		dirs = [deploy_to, releases_path, shared_path]
		dirs += shared_children.map { |d| File.join(shared_path, d) }
		run &quot;#{try_sudo} mkdir -p #{dirs.join(' ')} &amp;&amp; #{try_sudo} chmod g+w #{dirs.join(' ')}&quot;
		run &quot;chmod 777 #{shared_path}/log&quot;
	end

	task :finalize_update, :except =&gt; { :no_release =&gt; true } do
		run &quot;mkdir -p #{latest_release}/app/tmp&quot;
		run &quot;chmod -R 777 #{latest_release}/app/tmp&quot;
		run &quot;rm -rf #{latest_release}/app/logs&quot;
		run &quot;ln -s #{shared_path}/log #{latest_release}/app/logs&quot;
		run &quot;cp #{latest_release}/public_html/.htaccess-production #{latest_release}/public_html/.htaccess&quot;
		run &quot;cp #{latest_release}/app/config/config-production.php #{latest_release}/app/config/config.php&quot;
		run &quot;cp #{latest_release}/app/config/db-default.php #{latest_release}/app/config/db.php&quot;
		run &quot;cp #{latest_release}/app/config/memcache-default.php #{latest_release}/app/config/memcache.php&quot;
	end
end
[/sourcecode]

If you're not familiar with Ruby - what this code is essentially doing is overwriting two tasks in the :deploy namespace with my custom code.

The first, :setup, simply duplicates the base :setup functionality discussed above (creating the releases and shared directories) and chmods the shared log directory to be writable.

The second, :finalize_update, performs a variety of configuration tasks for a PHP app built with my framework.  Also, you'll notice that I'm removing my app's logs directory and symlinking to the shared log directory.  This way all releases will log to the same directory, consistently.  

In my case all of these procedures are command line instructions.  Alternatively, you can do a variety of things leveraging the full breadth of the Ruby language and any gem you'd like to introduce.   Things such as accessing your CDN API to clear image, JS, or CSS caching, etc.

<h3>Deploying Django Apps</h3>

First off it's worth noting that I serve my Django apps via mod_wsgi.  To make the deployment process easier here's what my app.wsgi script looks like:

[sourcecode language="python"]
import os
import sys

appdir = os.path.normpath(os.path.join(os.path.realpath(os.path.dirname(__file__)), '..'))
sys.path.insert(0, appdir)
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(appdir, '.python-eggs')
import django.core.handlers.wsgi
application = django.core.handlers.wsgi.WSGIHandler()
[/sourcecode]

This code allows us to avoid having to hardcode paths in the wsgi script (and thus avoid having to change them when we deploy).  It assumes the following directory structure:

<blockquote>
.python-eggs (egg cache)
apps (apps path is added to python system path in settings.py)
public (where your .wsgi script resides)
site_media
templates
settings.py
settings-production.py (used for deploy)
urls.py
...
</blockquote>

If you follow this convention, the following Capistrano recipe works great:

[sourcecode language="ruby"]
namespace :deploy do
	task :setup, :except =&gt; { :no_release =&gt; true } do
		dirs = [deploy_to, releases_path, shared_path]
		dirs += shared_children.map { |d| File.join(shared_path, d) }
		run &quot;#{try_sudo} mkdir -p #{dirs.join(' ')} &amp;&amp; #{try_sudo} chmod g+w #{dirs.join(' ')}&quot;
		run &quot;chmod 777 #{shared_path}/log&quot;
	end

	task :finalize_update, :except =&gt; { :no_release =&gt; true } do
		run &quot;rm -rf #{latest_release}/logs&quot;
		run &quot;ln -s #{shared_path}/log #{latest_release}/logs&quot;
		run &quot;cp #{latest_release}/settings-production.py #{latest_release}/settings.py&quot;
		run &quot;mkdir -p #{latest_release}/.python-eggs&quot;
		run &quot;chmod 777 #{latest_release}/.python-eggs&quot;
	end
end
[/sourcecode]

<h3>Fin</h3>

This should give you a nice intro to leveraging Capistrano via Webistrano.  Feel free to comment with questions, suggestions, or anything else!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>408</wp:post_id>
		<wp:post_date>2010-02-08 08:00:32</wp:post_date>
		<wp:post_date_gmt>2010-02-08 13:00:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>deployment-using-capistrano-and-webistrano-via-rails-and-phusion-passenger</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="deployment"><![CDATA[deployment]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="post_tag" nicename="mod_wsgi"><![CDATA[mod_wsgi]]></category>
		<category domain="post_tag" nicename="mongrel"><![CDATA[mongrel]]></category>
		<category domain="post_tag" nicename="passenger"><![CDATA[passenger]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="phusion-passenger"><![CDATA[phusion passenger]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby-development"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<category domain="post_tag" nicename="subversion"><![CDATA[subversion]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[65014137]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2757</wp:comment_id>
			<wp:comment_author><![CDATA[envorn]]></wp:comment_author>
			<wp:comment_author_email>envorn@mailinator.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>86.63.144.130</wp:comment_author_IP>
			<wp:comment_date>2010-02-10 00:07:38</wp:comment_date>
			<wp:comment_date_gmt>2010-02-10 05:07:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Why don&#39;t just use something form python world like `buildout` or `fabric`?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2763</wp:comment_id>
			<wp:comment_author><![CDATA[yggdrasil]]></wp:comment_author>
			<wp:comment_author_email>martijn@heemels.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.heemels.com</wp:comment_author_url>
			<wp:comment_author_IP>84.245.17.16</wp:comment_author_IP>
			<wp:comment_date>2010-02-26 11:18:06</wp:comment_date>
			<wp:comment_date_gmt>2010-02-26 16:18:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting article. We use virtually the same setup to deploy a few dozen PHP apps. Webistrano on Passenger. We&#39;ve split up our recipes a bit more though, so we can pick and choose which recipes get assigned to which projects.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>jQuery 1.4.2 Released</title>
		<link>http://blog.perplexedlabs.com/2010/02/20/jquery-1-4-2-released/</link>
		<pubDate>Sat, 20 Feb 2010 17:56:56 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=421</guid>
		<description></description>
		<content:encoded><![CDATA[Just a quick note alerting everyone to the fact that jQuery has gotten EVEN EASIER AND FASTER.

Go check out the <a href="http://blog.jquery.com/2010/02/19/jquery-142-released/">release notes</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date>2010-02-20 12:56:56</wp:post_date>
		<wp:post_date_gmt>2010-02-20 17:56:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jquery-1-4-2-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[68631110]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2762</wp:comment_id>
			<wp:comment_author><![CDATA[joshuajonah]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/joshuajonah</wp:comment_author_url>
			<wp:comment_author_IP>66.206.232.5</wp:comment_author_IP>
			<wp:comment_date>2010-02-23 02:33:51</wp:comment_date>
			<wp:comment_date_gmt>2010-02-23 07:33:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What does this have to do with Django?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Python data sharing in the multiprocessing module</title>
		<link>http://blog.perplexedlabs.com/2010/03/04/python-data-sharing-in-the-multiprocessing-module/</link>
		<pubDate>Thu, 04 Mar 2010 13:00:08 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=430</guid>
		<description></description>
		<content:encoded><![CDATA[Python's <a href="http://docs.python.org/library/multiprocessing.html">multiprocessing</a> module is a great tool that abstracts the details of forking and managing child processes in an interface inspired by the <a href="http://docs.python.org/library/threading.html">threading</a> module.  The benefit to using processes over threads is that you effectively avoid the issues of the GIL (Global Interpreter Lock).

I wanted to share my experience with sharing static data between the parent and the forked children.  The solution I ultimately went with is trivially implemented and works well.  It takes advantage of the fact that the children import the same modules of the parent.  If you house your data in a shared module, it's accessible in both places.

The directory structure looks like this:

<blockquote>
<pre>
mypackage/
    __init__.py
    mp.py
    myglobals.py
myscript.py
</pre>
</blockquote>

Here's my light wrapper around the multiprocessing module, mp.py:

[sourcecode language="python"]
import multiprocessing

import MySQLdb

import myglobals

# handles each unit of work, in this case a SQL query
def worker_do(sql):
    myglobals.cursor.execute(sql)

# called once upon worker initialization
def worker_init():
    myglobals.conn = MySQLdb.connect(**myglobals.config['db'])
    myglobals.cursor = myglobals.conn.cursor()
    myglobals.cursor.execute('SET AUTOCOMMIT=1')

# wrapper for multiprocessing module
def do_work(queue, num_processes):
    pool = multiprocessing.Pool(num_processes, initializer=worker_init)
    pool.map(worker_do, queue, 1)
    pool.close()
    pool.join()
[/sourcecode]

And here's my example script, myscript.py:

[sourcecode language="python"]
import os
import sys

import mp
import myglobals

def main():
   # anything in the myglobals module will be accessible by the child processes
   # we could then programatically retrieve this config info from a file 
   # via ConfigParser
   #
   # for simplicity I hard-coded it here 
   myglobals.config = {
      'db': {
         'host': 'db1',
         'user': 'dbuser',
         'passwd': 'dbpasswd',
         'db': 'dbase' 
      }
   }
   
   # build a whole bunch of queries to perform via the workers
   queries = build_queries()
   
   # perform the multiprocessing operation
   mp.do_work(queries, 4)

   return 0


if __name__ == '__main__':
   sys.exit(main())
[/sourcecode]

In this example the benefit would be to keep your database configuration code DRY - and share that data with the child processes.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>430</wp:post_id>
		<wp:post_date>2010-03-04 08:00:08</wp:post_date>
		<wp:post_date_gmt>2010-03-04 13:00:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-data-sharing-in-the-multiprocessing-module</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="multiprocessing"><![CDATA[multiprocessing]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[72466221]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2961</wp:comment_id>
			<wp:comment_author><![CDATA[Parallel MapReduce in Python in Ten Minutes &laquo; Cvet&#039;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://mikecvet.wordpress.com/2010/07/02/parallel-mapreduce-in-python/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.240</wp:comment_author_IP>
			<wp:comment_date>2010-07-02 15:50:02</wp:comment_date>
			<wp:comment_date_gmt>2010-07-02 20:50:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] token:count pairs. As you can see, the Python multiprocessing code is really easy to use. You don&#8217;t need to organize your problem as a MapReduce problem in order to properly use the process pool class [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4069</wp:comment_id>
			<wp:comment_author><![CDATA[pool_installation]]></wp:comment_author>
			<wp:comment_author_email>poolinstallationcomment001@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.poolinstallationguides.com/pool-installation/intex-above-ground-swimming-pools-easy-to-install-and/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-09-08 09:44:00</wp:comment_date>
			<wp:comment_date_gmt>2011-09-08 09:44:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[
  This is
  cool! And so interested! Are u have more posts like this? Please tell me,
  thanks
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Learning vs. Solving</title>
		<link>http://blog.perplexedlabs.com/2010/03/15/learning-vs-solving/</link>
		<pubDate>Mon, 15 Mar 2010 13:00:07 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=443</guid>
		<description></description>
		<content:encoded><![CDATA[Often times you're tasked with solving a problem you haven't faced before, requiring the use of technologies you haven't previously been exposed to.  This is a great thing!  These experiences are the stuff of legend - continuing deep into the night as your curiosity peaks.

When delivery of the solution makes a difference to somebody's bottom line you have to balance the opportunity as a means to learn with your desire to deliver for a customer.

Consider this example.  A client recently wanted a private chat system for internal company communications.  The service they had been using wasn't meeting their needs, was littered with bugs, and sometimes didn't work at all.  The core requirement other than privacy, real-time chat, presence, and multi-user chat was that it had to be compliant (all communications stored).  

The learner in me wanted to dive deep, dig into XMPP, build a server from scratch, and accompany that with a web and desktop client.  I spent a few days investigating the technologies involved and even wrote a quick proof of concept (that didn't use XMPP) in PHP.

What I came to realize is that much of the chat landscape had been "solved".  There were rock solid open-source servers that were full-featured, standards compliant, extensible, performant, and scalable (I'm looking at you ejabberd).  In addition, XMPP being such a universally accepted/supported protocol, there were open-source clients for every major OS and even an AJAX web client.

I really did want to write my own XMPP client and server.  Perhaps I will some day, but only if it solves a problem the business is having that can't be solved through the use of existing tools.  In my opinion this is a reminder to "keep your eye on the prize".  If time and resources are infinite then by all means dig in.  Since in business that's rarely (if ever) the case, it's a good lesson learned.

Ask yourself the question "are we in the business of compliant real-time chat?".  If the answer is no take it off the shelf and solve the problem.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>443</wp:post_id>
		<wp:post_date>2010-03-15 08:00:07</wp:post_date>
		<wp:post_date_gmt>2010-03-15 13:00:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>learning-vs-solving</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="random"><![CDATA[Random]]></category>
		<category domain="post_tag" nicename="random"><![CDATA[Random]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[75941924]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2820</wp:comment_id>
			<wp:comment_author><![CDATA[Ryan W Tenney]]></wp:comment_author>
			<wp:comment_author_email>ryan@10e.us</wp:comment_author_email>
			<wp:comment_author_url>http://ryan.10e.us/</wp:comment_author_url>
			<wp:comment_author_IP>66.66.6.142</wp:comment_author_IP>
			<wp:comment_date>2010-04-21 01:37:54</wp:comment_date>
			<wp:comment_date_gmt>2010-04-21 06:37:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I very frequently find myself in the same position.  I just wrote and XMLRPC server and client for PHP despite the fact that it&#39;s distributed with one!  Recently I&#39;ve been starting to come around and be "lazy" and use the existing solution.  You said it perfectly: "are we in the business of [blank]?"  Thanks for nudging me in the right direction!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>FormStack API Call Over SSL With Ruby</title>
		<link>http://blog.perplexedlabs.com/2010/04/28/formstack-api-call-over-ssl-with-ruby/</link>
		<pubDate>Wed, 28 Apr 2010 17:45:44 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=449</guid>
		<description></description>
		<content:encoded><![CDATA[I recently had to use the <a href="http://support.formstack.com/index.php?pg=kb.book&amp;id=3">FormStack API</a> in the context of a Rails app.  You need to make these calls over SSL, and API returns either XML or JSON.  I chose JSON because it's much easier to work with in my opinion and I hate XML.

Below is a simple example.  Check out the <a href="http://support.formstack.com/index.php?pg=kb.book&amp;id=3">FormStack API documentation</a> for all the other API calls.

<script src="http://gist.github.com/372524.js"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>449</wp:post_id>
		<wp:post_date>2010-04-28 12:45:44</wp:post_date>
		<wp:post_date_gmt>2010-04-28 17:45:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>formstack-api-call-over-ssl-with-ruby</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="formstack"><![CDATA[FormStack]]></category>
		<category domain="post_tag" nicename="json"><![CDATA[JSON]]></category>
		<category domain="category" nicename="random"><![CDATA[Random]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<category domain="post_tag" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[XML]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[90587838]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>google-define and last-fm plugins released</title>
		<link>http://blog.perplexedlabs.com/2010/05/06/google-define-and-last-fm-plugins-released/</link>
		<pubDate>Thu, 06 May 2010 16:44:58 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=453</guid>
		<description></description>
		<content:encoded><![CDATA[Over the last few days I released my first open-source plugins on GitHub.
<ul>
	<li><a href="http://github.com/speric/google-define">google-define</a> - Extracted from a side project I worked on, it's basically a wrapper class for parsing definitions from Google (define:perplexed).</li>
	<li><a href="http://github.com/speric/last-fm">last-fm</a> - This plugin was inspired by a previous <a href="http://gist.github.com/372629">gist</a>, which itself was taken from an app I wrote to aggregate the last week's movies, books, and music to send to Posterous (example <a href="http://www.ericfarkas.com/the-week-in-review-may-03-2010">here</a>). It's another wrapper class for easily parsing last.fm XML feeds.</li>
</ul>
I hope someone finds these useful.  Any and all feedback is appreciated.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>453</wp:post_id>
		<wp:post_date>2010-05-06 11:44:58</wp:post_date>
		<wp:post_date_gmt>2010-05-06 16:44:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-define-and-last-fm-plugins-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="plugins"><![CDATA[plugins]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<category domain="post_tag" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[93026191]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Python&#039;s Tornado has swept me off my feet</title>
		<link>http://blog.perplexedlabs.com/2010/07/01/pythons-tornado-has-swept-me-off-my-feet/</link>
		<pubDate>Thu, 01 Jul 2010 13:00:37 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=457</guid>
		<description></description>
		<content:encoded><![CDATA[I've been working with Python's <a href="http://www.tornadoweb.org/">Tornado</a> for about 2 months now and I love it.

Tornado is a non-blocking web server written in Python.  It's structure is similar to web.py so users of that popular Python web framework will feel right at home.  This is a structure that lends itself really well to developing RESTful APIs as the methods you write to handle incoming requests are named after the HTTP methods used:

[sourcecode language="python"]
class PlaceHandler(tornado.web.RequestHandler):
    def get(self, id):
        # respond to a GET
        self.write('GETting something')

    def post(self):
        # respond to a POST
        self.write('POSTing something')
[/sourcecode]

You match URI paths to "handlers" (the <em>controller</em> for those MVC folk) via a list of regex, handler tuples that instantiate an "application".

[sourcecode language="python"]
application = tornado.web.Application([
    (r&quot;/place&quot;, PlaceHandler),
    (r&quot;/place/([0-9]+)&quot;, PlaceHandler)
])

if __name__ == &quot;__main__&quot;:
    http_server = tornado.httpserver.HTTPServer(application)
    http_server.listen(8888)
    tornado.ioloop.IOLoop.instance().start()
[/sourcecode]

As usual any values that are captured from the regex are passed, in order, to the method that receives the request in the handler.

Because of it's non-blocking nature Tornado bundles an asynchronous HTTP client for use internally.  Additional modules include a command line and config file convenience library, escaping, 3rd party authentication (Facebook, Twitter, etc.), a wrapper around MySQLdb, and templating.  All in all this makes it a formidable web framework in its own right, especially if you're looking for something that's light and <a href="http://www.tornadoweb.org/documentation#performance">FAST</a>.

In production, I'm running 4 Tornado instances per server behind <a href="http://nginx.org/">nginx</a>.

One issue not addressed out of the box was daemonizing the Tornado instance.  I added PID file management and the ability to daemonize as follows (pid.py module follows):

[sourcecode language="python"]
# capture stdout/err in logfile
log_file = 'tornado.%s.log' % options.port
log = open(os.path.join(settings.log_path, log_file), 'a+')

# check pidfile
pidfile_path = settings.PIDFILE_PATH % options.port
pid.check(pidfile_path)

# daemonize
daemon_context = daemon.DaemonContext(stdout=log, stderr=log, working_directory='.')
with daemon_context:
    # write the pidfile
    pid.write(pidfile_path)
    
    # initialize the application
    http_server = tornado.httpserver.HTTPServer(application.app)
    http_server.listen(options.port, '127.0.0.1')
    
    try:
        # enter the Tornado IO loop
        tornado.ioloop.IOLoop.instance().start()
    finally:
        # ensure we remove the pidfile
        pid.remove(pidfile_path)
[/sourcecode]

And now the pid.py module:

[sourcecode language="python"]
# pid.py - module to help manage PID files
import os
import logging
import fcntl
import errno


def check(path):
    # try to read the pid from the pidfile
    try:
        logging.info(&quot;Checking pidfile '%s'&quot;, path)
        pid = int(open(path).read().strip())
    except IOError, (code, text):
        pid = None
        # re-raise if the error wasn't &quot;No such file or directory&quot;
        if code != errno.ENOENT:
            raise
    
    # try to kill the process
    try:
        if pid is not None:
            logging.info(&quot;Killing PID %s&quot;, pid)
            os.kill(pid, 9)
    except OSError, (code, text):
        # re-raise if the error wasn't &quot;No such process&quot;
        if code != errno.ESRCH:
            raise

def write(path):
    try:
        pid = os.getpid()
        pidfile = open(path, 'wb')
        # get a non-blocking exclusive lock
        fcntl.flock(pidfile.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
        # clear out the file
        pidfile.seek(0)
        pidfile.truncate(0)
        # write the pid
        pidfile.write(str(pid))
        logging.info(&quot;Writing PID %s to '%s'&quot;, pid, path)
    except:
        raise
    finally:
        try:
            pidfile.close()
        except:
            pass

def remove(path):
    try:
        # make sure we delete our pidfile
        logging.info(&quot;Removing pidfile '%s'&quot;, path)
        os.unlink(path)
    except:
        pass
[/sourcecode]

I'm going to follow up this post another on how I added a simple concept of "models" and an easy way to perform MySQL transactions.  Let me know if you have any specific questions!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>457</wp:post_id>
		<wp:post_date>2010-07-01 08:00:37</wp:post_date>
		<wp:post_date_gmt>2010-07-01 13:00:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pythons-tornado-has-swept-me-off-my-feet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="api"><![CDATA[API]]></category>
		<category domain="post_tag" nicename="asynchronous"><![CDATA[asynchronous]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="post_tag" nicename="non-blocking"><![CDATA[non-blocking]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
		<category domain="post_tag" nicename="tornado"><![CDATA[tornado]]></category>
		<category domain="post_tag" nicename="web-py"><![CDATA[web.py]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[113042269]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2943</wp:comment_id>
			<wp:comment_author><![CDATA[David Reynolds]]></wp:comment_author>
			<wp:comment_author_email>david@alwaysmovefast.com</wp:comment_author_email>
			<wp:comment_author_url>http://alwaysmovefast.com</wp:comment_author_url>
			<wp:comment_author_IP>24.22.143.146</wp:comment_author_IP>
			<wp:comment_date>2010-07-01 19:42:08</wp:comment_date>
			<wp:comment_date_gmt>2010-07-02 00:42:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I&#39;ve been using Tornado for a little bit myself and I think it&#39;s great. I&#39;m glad you showed how to daemonize tornado processes publicly. I rolled my own daemonized server scripts but never got around to actually demonstrating how it&#39;s done.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2957</wp:comment_id>
			<wp:comment_author><![CDATA[Peters Python Links &#8211; Der Schockwellenreiter]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.schockwellenreiter.de/blog/2010/07/02/peters-python-links-5/</wp:comment_author_url>
			<wp:comment_author_IP>81.169.145.25</wp:comment_author_IP>
			<wp:comment_date>2010-07-02 02:25:03</wp:comment_date>
			<wp:comment_date_gmt>2010-07-02 07:25:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] läuft und gehört zu Facebook&#8217;s Open Source Technologies. Ein begeisterter Nutzer schrieb: Python’s Tornado has swept me off my feet. Auf meine Testliste [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2958</wp:comment_id>
			<wp:comment_author><![CDATA[Jonas B.]]></wp:comment_author>
			<wp:comment_author_email>jonas1@mailinator.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>79.102.52.34</wp:comment_author_IP>
			<wp:comment_date>2010-07-02 07:42:21</wp:comment_date>
			<wp:comment_date_gmt>2010-07-02 12:42:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nobody needs to "check out" init with friends. What&#39;s required is knowledge about how Tornado tells us it wants to shut down, and under what circumstances it wants signals of different kinds.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2951</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2945</wp:comment_id>
			<wp:comment_author><![CDATA[Guest]]></wp:comment_author>
			<wp:comment_author_email>guest@example.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>75.151.10.166</wp:comment_author_IP>
			<wp:comment_date>2010-07-01 20:01:12</wp:comment_date>
			<wp:comment_date_gmt>2010-07-02 01:01:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Everyone re-invents pid.py, it should be in python core.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2946</wp:comment_id>
			<wp:comment_author><![CDATA[Paul Bohm]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/enkido</wp:comment_author_url>
			<wp:comment_author_IP>70.36.146.141</wp:comment_author_IP>
			<wp:comment_date>2010-07-01 21:27:57</wp:comment_date>
			<wp:comment_date_gmt>2010-07-02 02:27:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[tornado is awesome - agreed. i&#39;ve moved to tornado roughly two months ago too, and haven&#39;t looked back. don&#39;t agree on reinventing pid file handling tho - why not just use some external supervisor and not reinvent the wheel?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2947</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew B.]]></wp:comment_author>
			<wp:comment_author_email>andrewbadr@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://ianab.com/</wp:comment_author_url>
			<wp:comment_author_IP>173.8.179.82</wp:comment_author_IP>
			<wp:comment_date>2010-07-01 21:49:26</wp:comment_date>
			<wp:comment_date_gmt>2010-07-02 02:49:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I like Tornado, too, but here are a couple problems:<br><br>- Hard to test, at least relative to Django. There&#39;s no built-in support, and it&#39;s complicated by the lack of a response object. I have it working now, but it took some bashing and plenty of the <code>mock</code> library.<br><br>- Lack of libraries for things we might want to do asynchronously. I can buy the argument that that&#39;s fine for databases, but for AMQP it&#39;s mandatory. The lack of a (working) Tornado AMQP library drove me to use <a href="http://github.com/fiorix/cyclone" rel="nofollow">Cyclone</a>, which is a production-ready port of Tornado to the Twisted framework. Libraries ahoy.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2948</wp:comment_id>
			<wp:comment_author><![CDATA[Scott]]></wp:comment_author>
			<wp:comment_author_email>ssadler-perplexedlabs@mashi.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>186.136.158.246</wp:comment_author_IP>
			<wp:comment_date>2010-07-01 22:43:44</wp:comment_date>
			<wp:comment_date_gmt>2010-07-02 03:43:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, I&#39;m gearing up to run Tornado in production and have a few questions:<br><br>I&#39;m looking for a manager process for Tornado... Ie, it will start the server, restart it in case of crash, and redirect stdout/err to logfiles. How do you handle this?<br><br>How would you do a graceful shutdown/restart in Tornado? Ie, send the sever a signal to stop accepting new requests but complete the ones it&#39;s already processing? My idea is to use a named pipe and add it&#39;s file descriptor to the ioloop, and use that to process events, but it feels hackish.<br><br>It&#39;s very easy to write a class that performs a blocking operation in a thread, and calls a callback when finished. Admittedly there is a small performance degradation, but with the availability of this option is there any any good reason to require async libraries for everything? (Hint: the trick to doing this properly is not to process the callback in the thread, but rather to add it to the ioloop using add_callback. This is thread safe).<br><br>In node.js, from the little I&#39;ve seen, most async operations accept an "errback" parameter to be called in case of an exception. This is not the case in Tornado, and sometimes exceptions never find their way back to the request that they originated from, for example in the case of an error while parsing the request headers. This does scare me a little. Have you run into any issues with that so far?<br><br>Leading on from the above, I have a doubt that the authors of Tornado are interested in growing the application according to the needs of the community. I guess this last thing isn&#39;t a specific question, but it would be good to see some discussion on it nonetheless.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2949</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew Badr]]></wp:comment_author>
			<wp:comment_author_email>andrewbadr@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://ianab.com/</wp:comment_author_url>
			<wp:comment_author_IP>173.8.179.82</wp:comment_author_IP>
			<wp:comment_date>2010-07-01 23:30:53</wp:comment_date>
			<wp:comment_date_gmt>2010-07-02 04:30:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Regarding your first question, that&#39;s out of scope for Tornado, and it&#39;s wrong to count that against it. There are many existing solutions for daemonization.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2948</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3729</wp:comment_id>
			<wp:comment_author><![CDATA[LarcenIII]]></wp:comment_author>
			<wp:comment_author_email>larceniii@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://green.cx</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-01-21 21:55:00</wp:comment_date>
			<wp:comment_date_gmt>2011-01-21 21:55:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm a PHP programmer, and a python noob. I'm very interested in Tornado, and have an application in mind for high volume traffic, and it's a simple idea I have. Would I be wish to switch from PHP before I begin, dive into learning Python and Tornado at the same time?

If so, where should I start, knowing absolutely nothing about Python?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2950</wp:comment_id>
			<wp:comment_author><![CDATA[Scott]]></wp:comment_author>
			<wp:comment_author_email>ssadler-perplexedlabs@mashi.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>186.136.158.246</wp:comment_author_IP>
			<wp:comment_date>2010-07-01 23:41:43</wp:comment_date>
			<wp:comment_date_gmt>2010-07-02 04:41:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I&#39;m not counting that against it, I said I&#39;m looking for a manager process :). Could you link to some of the solutions you know of?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2949</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2951</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew Badr]]></wp:comment_author>
			<wp:comment_author_email>andrewbadr@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://ianab.com/</wp:comment_author_url>
			<wp:comment_author_IP>173.8.179.82</wp:comment_author_IP>
			<wp:comment_date>2010-07-01 23:47:27</wp:comment_date>
			<wp:comment_date_gmt>2010-07-02 04:47:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oh, I misunderstood. Check out daemontools, upstart, runit, or supervisord.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2950</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2960</wp:comment_id>
			<wp:comment_author><![CDATA[Cristian Ciupitu]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>https://me.yahoo.com/ciupicri#87205</wp:comment_author_url>
			<wp:comment_author_IP>85.204.234.1</wp:comment_author_IP>
			<wp:comment_date>2010-07-02 13:22:06</wp:comment_date>
			<wp:comment_date_gmt>2010-07-02 18:22:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You can write:<br><br>        pid = int(open(path).read().strip())<br><br>as:<br><br>        pid = int(open(path).read())]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3268</wp:comment_id>
			<wp:comment_author><![CDATA[Simo Salminen]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/ssalmine</wp:comment_author_url>
			<wp:comment_author_IP>195.170.128.98</wp:comment_author_IP>
			<wp:comment_date>2010-09-07 10:59:39</wp:comment_date>
			<wp:comment_date_gmt>2010-09-07 15:59:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I can recommend runit as daemonization tools. You don&#39;t need to write pid managment stuff, it is dead easy to make standalone program daemonizable. Basically just write a &#39;run&#39; file which contains instructions to start your program, and that&#39;s it.<br><br>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2982</wp:comment_id>
			<wp:comment_author><![CDATA[RSS Tidbits for 5 July 2010 &laquo; SKFox.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://skfox.com/2010/07/05/rss-tidbits-for-5-july-2010/</wp:comment_author_url>
			<wp:comment_author_IP>174.121.79.140</wp:comment_author_IP>
			<wp:comment_date>2010-07-05 18:23:35</wp:comment_date>
			<wp:comment_date_gmt>2010-07-05 23:23:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Python&#8217;s Tornado has swept me off my feet [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3533</wp:comment_id>
			<wp:comment_author><![CDATA[Quora]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.quora.com/Tornado-web-framework/How-do-you-daemonize-Tornado#ans178474</wp:comment_author_url>
			<wp:comment_author_IP>50.16.0.167</wp:comment_author_IP>
			<wp:comment_date>2010-12-12 23:22:11</wp:comment_date>
			<wp:comment_date_gmt>2010-12-13 04:22:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>How do you daemonize Tornado?...</strong>

I just ran into this, perhaps it's helpful: http://blog.perplexedlabs.com/2010/07/01/pythons-tornado-has-swept-me-off-my-feet/...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3730</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-01-22 15:45:00</wp:comment_date>
			<wp:comment_date_gmt>2011-01-22 15:45:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I recommend you do use Tornado as a vehicle for learning python.  It takes barely any code to get a working application up and running and would be a great start.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3729</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3732</wp:comment_id>
			<wp:comment_author><![CDATA[LarcenIII]]></wp:comment_author>
			<wp:comment_author_email>larceniii@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://green.cx</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-01-24 14:52:00</wp:comment_date>
			<wp:comment_date_gmt>2011-01-24 14:52:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Could you e-mail me? It's my username at gmail, I have a few off the record questions to ask you!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3730</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4271</wp:comment_id>
			<wp:comment_author><![CDATA[MitzvahGuy]]></wp:comment_author>
			<wp:comment_author_email>whitedan@wharton.upenn.edu</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-04-19 01:23:00</wp:comment_date>
			<wp:comment_date_gmt>2012-04-19 01:23:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Matt,
     My name is Daniel, and I am a sophomore at Penn.  Two friends and I are building a mobile and web app using Tornado and Cassandra.  Tornado is proving to be a bumpier ride than we expected and we are hoping to run by what we are doing with someone who is more experienced with it.  Any chance you could help us out or know someone that could?

Thanks,
Daniel]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3730</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4272</wp:comment_id>
			<wp:comment_author><![CDATA[Federico]]></wp:comment_author>
			<wp:comment_author_email>g7g@mashi.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-04-19 02:11:00</wp:comment_date>
			<wp:comment_date_gmt>2012-04-19 02:11:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I might be able to give you a hand, email me at g7g@mashi.org.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>4271</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Tornado 1.0 Released</title>
		<link>http://blog.perplexedlabs.com/2010/07/24/tornado-1-0-released/</link>
		<pubDate>Sat, 24 Jul 2010 16:27:40 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=459</guid>
		<description></description>
		<content:encoded><![CDATA[Just a quick note that the Tornado team announced the release of version 1.0 on July 22nd.

Here's the <a href="http://groups.google.com/group/python-tornado/browse_thread/thread/6040b860b74444e0">changelog</a>.

Looks like some nice new features - I'm looking forward to upgrading.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>459</wp:post_id>
		<wp:post_date>2010-07-24 11:27:40</wp:post_date>
		<wp:post_date_gmt>2010-07-24 16:27:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tornado-1-0-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="python-tornado"><![CDATA[python tornado]]></category>
		<category domain="category" nicename="random"><![CDATA[Random]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[121664762]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3458</wp:comment_id>
			<wp:comment_author><![CDATA[Leaf]]></wp:comment_author>
			<wp:comment_author_email>nikeshoescompany@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>58.46.176.142</wp:comment_author_IP>
			<wp:comment_date>2010-09-13 06:29:56</wp:comment_date>
			<wp:comment_date_gmt>2010-09-13 11:29:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This summer you can choose <a href="http://www.shoppingchristianlouboutin.com/" rel="nofollow">Christian louboutin</a> wedges. A pair of beautiful cheap Christian Louboutin wedges can keep you feeling effortlessly fabulous every day this summer. These can be matched with casual jeans, but these can also be dressed up with a great yellow dress.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Improved deploy:cleanup for capistrano</title>
		<link>http://blog.perplexedlabs.com/2010/09/08/improved-deploycleanup-for-capistrano/</link>
		<pubDate>Wed, 08 Sep 2010 22:08:50 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=478</guid>
		<description></description>
		<content:encoded><![CDATA[We ran into a problem today where capistrano wasn't correctly cleaning up old releases on a 15-minute multi-host deploy.  It seems like the default deploy:cleanup task wasn't written with multiple hosts in mind.

Essentially what it does is list the contents of your releases_path for the first host in the list of hosts and assumes that all those individual release directories will be present on all other hosts in the current deploy.  This is a poor assumption.  What if one host isn't deployed to as frequently (perhaps a QA environment?).  These edge cases cause trouble with the default code.

What it should do is, for each host you're deploying to, check the releases_path for that host with keep_releases and delete only those old directories on just that host.  I re-wrote deploy:cleanup to do just that using some of the features of run() to execute commands only on specific hosts...

[sourcecode language="ruby"]
  task :cleanup, :except =&gt; { :no_release =&gt; true } do
    count = fetch(:keep_releases, 5).to_i
    run &quot;hostname&quot; do |c, s, hostname|
      local_releases = capture(&quot;ls -xt #{releases_path}&quot;, :hosts =&gt; [hostname]).split.reverse
      if count &gt;= local_releases.length
        logger.important &quot;no old releases to clean up on #{hostname}&quot;
      else
        logger.info &quot;keeping #{count} of #{local_releases.length} deployed releases on #{hostname}&quot;

        (local_releases - local_releases.last(count)).each { |release|
          run &quot;#{sudo} rm -rf #{File.join(releases_path, release)}&quot;, :hosts =&gt; [hostname]
        }
      end
    end
  end
[/sourcecode] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>478</wp:post_id>
		<wp:post_date>2010-09-08 17:08:50</wp:post_date>
		<wp:post_date_gmt>2010-09-08 22:08:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>improved-deploycleanup-for-capistrano</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="capistrano"><![CDATA[capistrano]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="ruby-development"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<category domain="post_tag" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[139344734]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3528</wp:comment_id>
			<wp:comment_author><![CDATA[registrycleaner]]></wp:comment_author>
			<wp:comment_author_email>registrycleaner@126.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.best-registrycleaner.net</wp:comment_author_url>
			<wp:comment_author_IP>219.133.246.118</wp:comment_author_IP>
			<wp:comment_date>2010-10-30 08:08:16</wp:comment_date>
			<wp:comment_date_gmt>2010-10-30 13:08:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is a poor assumption.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4091</wp:comment_id>
			<wp:comment_author><![CDATA[Cache Hamm]]></wp:comment_author>
			<wp:comment_author_email>cdhamm@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-09-28 03:59:00</wp:comment_date>
			<wp:comment_date_gmt>2011-09-28 03:59:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I had the same issue as Phil (hostnames do not match role names).  I touched up the task above to not use the 'hostname' command, and instead make use of the channel[:server] variable.  Here's my tweaked version:

        deploy.task :cleanup, :except =&gt; { :no_release =&gt; true } do            count = fetch(:keep_releases, 5).to_i            cmd = "ls -xt #{releases_path}"            run cmd do |channel, stream, data|                local_releases = data.split.reverse                if count &gt;= local_releases.length                    logger.important "no old releases to clean up on #{channel[:server]}"                else                    logger.info "keeping #{count} of #{local_releases.length} deployed releases on #{channel[:server]}"                    (local_releases - local_releases.last(count)).each { |release|                        run "rm -rf #{File.join(releases_path, release)}", :hosts =&gt; [channel[:server]]                    }                end            end        end]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4022</wp:comment_id>
			<wp:comment_author><![CDATA[Mike Purcell]]></wp:comment_author>
			<wp:comment_author_email>digitalprecision@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-08-08 20:34:00</wp:comment_date>
			<wp:comment_date_gmt>2011-08-08 20:34:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Outstanding article. I am surprised that Capistrano isn't smart enough to realize that some deployments may not go out to all defined hosts. My only suggestion is to add a check for whether sudo is to be used or not. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4087</wp:comment_id>
			<wp:comment_author><![CDATA[Phil Rosenstein]]></wp:comment_author>
			<wp:comment_author_email>phil.rosenstein@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-09-22 21:35:00</wp:comment_date>
			<wp:comment_date_gmt>2011-09-22 21:35:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I needed to hack this slightly as my host names do not exactly match the role names (for example: myapp-production instead of just production).

I also had an issue with sudo.

Very helpful though, thank you!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Python libwkhtmltox module - wrapping a C library using Cython - convert HTML to PDF</title>
		<link>http://blog.perplexedlabs.com/2010/09/09/python-libwkhtmltox-module-wrapping-a-c-library-using-cython/</link>
		<pubDate>Thu, 09 Sep 2010 12:00:50 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=483</guid>
		<description></description>
		<content:encoded><![CDATA[First of all, big shout out to antialize for creating <a href="http://code.google.com/p/wkhtmltopdf/">wkhtmltopdf</a> (<a href="http://github.com/antialize/wkhtmltopdf">github repo</a>).

Also, this project is being hosted on GitHub @ <a href="http://github.com/mreiferson/py-wkhtmltox">http://github.com/mreiferson/py-wkhtmltox</a>.

<h2><a href="http://code.google.com/p/wkhtmltopdf/">wkhtmltox</a></h2>

What is wkhtmltox you ask?  It's a utility built on <a href="http://qt.nokia.com/">Nokia's Qt</a> framework for converting HTML (including images, CSS, <strong>and Javascript</strong>) to a PDF or image.  When Qt introduced it's <a href="http://doc.trolltech.com/4.6/qtwebkit.html">webkit module</a> it made it relatively easy to leverage it's rendering engine to produce high quality output.

wkhtmltox 0.10.0beta5 introduced libwkhtmltox - a simple C API making it possible to embed this functionality in higher-level scripting languages.  I jumped at the opportunity to build Python bindings...

First I tried <a href="http://www.riverbankcomputing.co.uk/software/sip/intro">SIP</a>, which is actually used for the Qt bindings.  A variety of issues coupled with poor documentation led me to search for other solutions.  I won't bore you with the details because it seems there are better ways...

<h2><a href="http://www.cython.org/">Cython</a></h2>

Note: I'm not talking about CPython (the default Python implementation written in C).  I'm talking about a toolset to build C extensions for Python.  The two major use cases being speed or, in my case, wrapping a C library.

It's really easy to get up and running, Cython the language is a hybrid of C and Python.  You write scripts with a .pyx extension, make things modular with .pxd files, and handle all the building and installation with <a href="http://docs.python.org/distutils/">distutils</a>.

Let's take a look at the API libwkhtmltox exposes (I'm only showing lines relevant to this post):

[sourcecode language="c"]
struct wkhtmltopdf_global_settings;
typedef struct wkhtmltopdf_global_settings wkhtmltopdf_global_settings;

struct wkhtmltopdf_object_settings;
typedef struct wkhtmltopdf_object_settings wkhtmltopdf_object_settings;

struct wkhtmltopdf_converter;
typedef struct wkhtmltopdf_converter wkhtmltopdf_converter;

CAPI int wkhtmltopdf_init(int use_graphics);
CAPI int wkhtmltopdf_deinit();

CAPI const char * wkhtmltopdf_version();

CAPI wkhtmltopdf_global_settings * wkhtmltopdf_create_global_settings();
CAPI wkhtmltopdf_object_settings * wkhtmltopdf_create_object_settings();

CAPI int wkhtmltopdf_set_global_setting(wkhtmltopdf_global_settings * settings, const char * name, const char * value);
CAPI int wkhtmltopdf_set_object_setting(wkhtmltopdf_object_settings * settings, const char * name, const char * value);

CAPI wkhtmltopdf_converter * wkhtmltopdf_create_converter(wkhtmltopdf_global_settings * settings);
CAPI void wkhtmltopdf_destroy_converter(wkhtmltopdf_converter * converter);

CAPI int wkhtmltopdf_convert(wkhtmltopdf_converter * converter);
CAPI void wkhtmltopdf_add_object(wkhtmltopdf_converter * converter, wkhtmltopdf_object_settings * setting, const char * data);

CAPI int wkhtmltopdf_http_error_code(wkhtmltopdf_converter * converter);
[/sourcecode]

And let's also look at the basic example provided with the wkhtmltopdf source distribution (again, only relevant lines shown):

[sourcecode language="c"]
wkhtmltopdf_init(false);
gs = wkhtmltopdf_create_global_settings();
wkhtmltopdf_set_global_setting(gs, &quot;out&quot;, &quot;test.pdf&quot;);
os = wkhtmltopdf_create_object_settings();
wkhtmltopdf_set_object_setting(os, &quot;page&quot;, &quot;http://doc.trolltech.com/4.6/qstring.html&quot;);
c = wkhtmltopdf_create_converter(gs);
wkhtmltopdf_add_object(c, os, NULL);
wkhtmltopdf_convert(c);
wkhtmltopdf_destroy_converter(c);
wkhtmltopdf_deinit();
[/sourcecode]

I found it helpful to try to identify which methods needed to be exposed to user-space and which ones could be safely abstracted behind a cleanly wrapped Pythonic API.  I wrote the following test script to work towards:

[sourcecode language="python"]
import wkhtmltox

pdf = wkhtmltox.Pdf()
pdf.set_global_setting('out', 'test.pdf')
pdf.set_object_setting('path', 'http://www.google.com')
pdf.convert()
[/sourcecode]

The initialization of a Pdf instance handles all of the internal libwkhtmltox initialization.  See below for the .pyx script.  Of interest is how C structs and functions are exposed to the Cython script and then wrapped, with appropriate names, as Python methods of a class.  Astute observers will also notice that some of the function declarations differ slightly from the original libwkhtmltox header file.  In most cases Cython doesn't need the const, CAPI and other specific declarations.  Also, <strong>bint</strong> hints that even though the return value is an int we should convert this to a boolean on the Python side.

[sourcecode language="python"]
cdef extern from &quot;wkhtmltox/pdf.h&quot;:
    struct wkhtmltopdf_converter:
        pass
    
    struct wkhtmltopdf_object_settings:
        pass
    
    struct wkhtmltopdf_global_settings:
        pass
    
    bint wkhtmltopdf_init(int use_graphics)
    bint wkhtmltopdf_deinit()
    char *wkhtmltopdf_version()
    
    wkhtmltopdf_global_settings *wkhtmltopdf_create_global_settings()
    wkhtmltopdf_object_settings *wkhtmltopdf_create_object_settings()
    
    bint wkhtmltopdf_set_global_setting(wkhtmltopdf_global_settings *settings, char *name, char *value)
    bint wkhtmltopdf_get_global_setting(wkhtmltopdf_global_settings *settings, char *name, char *value, int vs)
    bint wkhtmltopdf_set_object_setting(wkhtmltopdf_object_settings *settings, char *name, char *value)
    bint wkhtmltopdf_get_object_setting(wkhtmltopdf_object_settings *settings, char *name, char *value, int vs)
    
    wkhtmltopdf_converter *wkhtmltopdf_create_converter(wkhtmltopdf_global_settings *settings)
    void wkhtmltopdf_destroy_converter(wkhtmltopdf_converter *converter)
    
    bint wkhtmltopdf_convert(wkhtmltopdf_converter *converter)
    void wkhtmltopdf_add_object(wkhtmltopdf_converter *converter, wkhtmltopdf_object_settings *setting, char *data)
    
    int wkhtmltopdf_http_error_code(wkhtmltopdf_converter *converter)


cdef extern from &quot;wkhtmltox/image.h&quot;:
    struct wkhtmltoimage_global_settings:
        pass
    
    struct wkhtmltoimage_converter:
        pass
    
    bint wkhtmltoimage_init(int use_graphics)
    bint wkhtmltoimage_deinit()
    char *wkhtmltoimage_version()
    
    wkhtmltoimage_global_settings *wkhtmltoimage_create_global_settings()
    
    bint wkhtmltoimage_set_global_setting(wkhtmltoimage_global_settings *settings, char *name, char *value)
    bint wkhtmltoimage_get_global_setting(wkhtmltoimage_global_settings *settings, char *name, char *value, int vs)
    
    wkhtmltoimage_converter *wkhtmltoimage_create_converter(wkhtmltoimage_global_settings *settings, char *data)
    void wkhtmltoimage_destroy_converter(wkhtmltoimage_converter *converter)
    
    bint wkhtmltoimage_convert(wkhtmltoimage_converter *converter)
    
    int wkhtmltoimage_http_error_code(wkhtmltoimage_converter *converter)


cdef class Pdf:
    cdef wkhtmltopdf_global_settings *_c_global_settings
    cdef wkhtmltopdf_object_settings *_c_object_settings
    cdef bint last_http_error_code
    
    def __cinit__(self):
        wkhtmltopdf_init(0)
        self._c_global_settings = wkhtmltopdf_create_global_settings()
        self._c_object_settings = wkhtmltopdf_create_object_settings()
    
    def __dealloc__(self):
        wkhtmltopdf_deinit();
    
    def set_global_setting(self, char *name, char *value):
        return wkhtmltopdf_set_global_setting(self._c_global_settings, name, value)
    
    def set_object_setting(self, char *name, char *value):
        return wkhtmltopdf_set_object_setting(self._c_object_settings, name, value)
    
    def convert(self):
        cdef wkhtmltopdf_converter *c
        c = wkhtmltopdf_create_converter(self._c_global_settings)
        wkhtmltopdf_add_object(c, self._c_object_settings, NULL)
        ret = wkhtmltopdf_convert(c)
        self.last_http_error_code = wkhtmltopdf_http_error_code(c)
        wkhtmltopdf_destroy_converter(c)
        return ret
    
    def http_error_code(self):
        return self.last_http_error_code


cdef class Image:
    cdef wkhtmltoimage_global_settings *_c_global_settings
    cdef bint last_http_error_code
    
    def __cinit__(self):
        wkhtmltoimage_init(0)
        self._c_global_settings = wkhtmltoimage_create_global_settings()
    
    def __dealloc__(self):
        wkhtmltoimage_deinit();
    
    def set_global_setting(self, char *name, char *value):
        return wkhtmltoimage_set_global_setting(self._c_global_settings, name, value)
    
    def convert(self):
        cdef wkhtmltoimage_converter *c
        c = wkhtmltoimage_create_converter(self._c_global_settings, NULL)
        ret = wkhtmltoimage_convert(c)
        self.last_http_error_code = wkhtmltoimage_http_error_code(c)
        wkhtmltoimage_destroy_converter(c)
        return ret
    
    def http_error_code(self):
        return self.last_http_error_code
[/sourcecode]

This is really my first attempt to get something working.  I'm sure there are bugs and perhaps better ways to go about this.  I always welcome questions/feedback.

I'm going to continue to support this project at <a href="http://github.com/mreiferson/py-wkhtmltox">http://github.com/mreiferson/py-wkhtmltox</a> - watch it!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>483</wp:post_id>
		<wp:post_date>2010-09-09 07:00:50</wp:post_date>
		<wp:post_date_gmt>2010-09-09 12:00:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-libwkhtmltox-module-wrapping-a-c-library-using-cython</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="binding"><![CDATA[binding]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="post_tag" nicename="cython"><![CDATA[cython]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="libwkhtmltox"><![CDATA[libwkhtmltox]]></category>
		<category domain="post_tag" nicename="module"><![CDATA[module]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="category" nicename="random"><![CDATA[Random]]></category>
		<category domain="post_tag" nicename="wkhtmltoimage"><![CDATA[wkhtmltoimage]]></category>
		<category domain="post_tag" nicename="wkhtmltopdf"><![CDATA[wkhtmltopdf]]></category>
		<category domain="post_tag" nicename="wrapper"><![CDATA[wrapper]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[139388692]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3816</wp:comment_id>
			<wp:comment_author><![CDATA[Gargkapil]]></wp:comment_author>
			<wp:comment_author_email>gargkapil@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-05-21 22:40:00</wp:comment_date>
			<wp:comment_date_gmt>2011-05-21 22:40:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[any update on this? ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3758</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3287</wp:comment_id>
			<wp:comment_author><![CDATA[R_b_lawson]]></wp:comment_author>
			<wp:comment_author_email>r_b_lawson@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.191.195.117</wp:comment_author_IP>
			<wp:comment_date>2010-09-11 12:22:40</wp:comment_date>
			<wp:comment_date_gmt>2010-09-11 17:22:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[this is a nice contribution. Java has a project called flying saucer which provides a nice xhtml to pdf engine but the markup has to be clean xhtml. Being able to use an industrial strength rendering engine from Python means you can handle a lot more situations.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3521</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>67.152.23.98</wp:comment_author_IP>
			<wp:comment_date>2010-11-12 18:50:10</wp:comment_date>
			<wp:comment_date_gmt>2010-11-12 23:50:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[this should be fixed and updated in the github repo, thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3485</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3369</wp:comment_id>
			<wp:comment_author><![CDATA[UloPe]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://ulo.pe/</wp:comment_author_url>
			<wp:comment_author_IP>79.254.1.147</wp:comment_author_IP>
			<wp:comment_date>2010-09-18 22:57:43</wp:comment_date>
			<wp:comment_date_gmt>2010-09-19 03:57:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,<br><br>Did you consider using ctypes? And if yes why did you go with cython ultimately?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3371</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>68.173.11.54</wp:comment_author_IP>
			<wp:comment_date>2010-09-19 03:19:43</wp:comment_date>
			<wp:comment_date_gmt>2010-09-19 08:19:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I didn&#39;t so I can&#39;t really provide any insight on Cython vs. ctypes.  ctypes certainly looks like it could get the job done but seems somewhat one-off.<br><br>I was intentionally making an attempt to learn a bit about python under-the-hood as well as explore Cython.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3369</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3289</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>68.173.11.54</wp:comment_author_IP>
			<wp:comment_date>2010-09-11 14:56:21</wp:comment_date>
			<wp:comment_date_gmt>2010-09-11 19:56:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[thanks!  it&#39;s definitely powerful to be able to have the option (without changing markup, css, or even javascript powered views) to produce a high-quality PDF or image.<br><br>was really happy that Cython was so easy to work with.<br><br>let me know if you find any issues...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3287</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3485</wp:comment_id>
			<wp:comment_author><![CDATA[Edoardo]]></wp:comment_author>
			<wp:comment_author_email>edoardo@serra.to.it</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>88.149.230.232</wp:comment_author_IP>
			<wp:comment_date>2010-10-22 16:43:25</wp:comment_date>
			<wp:comment_date_gmt>2010-10-22 21:43:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, thanks for the nice works, wkhtmltopdf is a great alternative for generating PDF from HTML! Other implementations are way too slow!<br><br>However, I&#39;m having the following issue trying to install it:<br><br>$ python <a href="http://setup.py" rel="nofollow">setup.py</a> install --prefix=/usr/local<br>[...]<br>gcc -pthread -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -I/home/eserra/include/python2.7 -c wkhtmltox.c -o build/temp.linux-i686-2.7/wkhtmltox.o<br>gcc: wkhtmltox.c: No such file or directory<br>[...]<br><br>Do you know how to fix it?<br>I cannot find the file wkhtmltox.c in the libwkhtmltox source tree.<br><br>Tnx!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3569</wp:comment_id>
			<wp:comment_author><![CDATA[Fernando]]></wp:comment_author>
			<wp:comment_author_email>lfbarrera17@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>201.102.36.115</wp:comment_author_IP>
			<wp:comment_date>2010-12-23 09:54:20</wp:comment_date>
			<wp:comment_date_gmt>2010-12-23 14:54:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello,<br><br>I&#39;ve installed wkhtmltox but I am interested in converting a HTML string into PDF. Is this possible?<br><br>Thank you]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3815</wp:comment_id>
			<wp:comment_author><![CDATA[Gargkapil]]></wp:comment_author>
			<wp:comment_author_email>gargkapil@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-05-21 22:38:00</wp:comment_date>
			<wp:comment_date_gmt>2011-05-21 22:38:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ Hello there
I am keen on making a call to wkhtmltoPDF from java thread or process or jsps.  I'd like to know if someone has had experience in doing that or want to share their thoughts/tips over process closure etc.?
http://stackoverflow.com/questions/5506275/launching-wkhtmltopdf-from-runtime-getruntime-exec-never-terminates
Any other references would be appreciated in terms of faster execution. We d like to call wkhtmltopdf as a process, one off execution t generate PDF. Is it recommened?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3520</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>67.152.23.98</wp:comment_author_IP>
			<wp:comment_date>2010-11-12 18:49:31</wp:comment_date>
			<wp:comment_date_gmt>2010-11-12 23:49:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hah - apologies.  I had made some changes so that Cython isn&#39;t required to build the extension and forgot to include the C source.<br><br>The github repo is updated.<br><br>Thanks for the tip, again.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3519</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3519</wp:comment_id>
			<wp:comment_author><![CDATA[wodzik]]></wp:comment_author>
			<wp:comment_author_email>wodziszczakow@o2.pl</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>89.76.233.174</wp:comment_author_IP>
			<wp:comment_date>2010-11-12 09:57:45</wp:comment_date>
			<wp:comment_date_gmt>2010-11-12 14:57:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[root@Latpop:/usr/local/src/py-wkhtmltox# python <a href="http://setup.py" rel="nofollow">setup.py</a> install<br>running install<br>running build<br>running build_ext<br>building &#39;wkhtmltox&#39; extension<br>gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -I/usr/include/python2.6 -c wkhtmltox.c -o build/temp.linux-i686-2.6/wkhtmltox.o<br>gcc: wkhtmltox.c: No such file or directory<br>gcc: no input files<br>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3518</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3518</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>67.152.23.98</wp:comment_author_IP>
			<wp:comment_date>2010-11-11 23:00:19</wp:comment_date>
			<wp:comment_date_gmt>2010-11-12 04:00:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[i&#39;ve fixed this in the github repo, thanks for the tip]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3517</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3517</wp:comment_id>
			<wp:comment_author><![CDATA[wodzik]]></wp:comment_author>
			<wp:comment_author_email>wodziszczakow@o2.pl</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>89.76.233.174</wp:comment_author_IP>
			<wp:comment_date>2010-11-11 22:16:41</wp:comment_date>
			<wp:comment_date_gmt>2010-11-12 03:16:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[root@Latpop:/usr/local/src/py-wkhtmltox# python <a href="http://setup.py" rel="nofollow">setup.py</a> install <br>Traceback (most recent call last):<br>  File "<a href="http://setup.py" rel="nofollow">setup.py</a>", line 11, in &lt;module&gt;<br>    cmdclass = {"build_ext": build_ext},<br>NameError: name &#39;build_ext&#39; is not defined<br>&lt;/module&gt;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3758</wp:comment_id>
			<wp:comment_author><![CDATA[ryanisnan]]></wp:comment_author>
			<wp:comment_author_email>ryanisnan@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.ryanwest.info</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-04-07 15:56:00</wp:comment_date>
			<wp:comment_date_gmt>2011-04-07 15:56:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Matt,

I'm interested in printing a specific page as it appears. The fact that this uses webkit is awesome, since that's what I've been primarily developing my HTML/CSS to start. 

I originally wanted the page to print using the browser's print directive, but I am realizing that this is a difficult task (when you consider all the different browsers and stylesheet considerations you must make). Offering users the generated PDF would be a viable alternative, but I have my reservations about the speed.

How intensive is this process (speaking end-to-end, including the Webkit Qt components) on system memory and CPU? Would this be suitable for a webapp with little traffic?

Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3289</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Convert HTML to PDF in PHP (libwkhtmltox extension)</title>
		<link>http://blog.perplexedlabs.com/2010/09/15/convert-html-to-pdf-in-php-libwkhtmltox-extension/</link>
		<pubDate>Wed, 15 Sep 2010 13:49:41 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=502</guid>
		<description></description>
		<content:encoded><![CDATA[A common problem when developing a web application is having producing a high-quality PDF out of an existing layout/view/template.  Perhaps for a reporting engine, an invoice, a receipt, or any number of other situations.

Often this involves using somewhat cryptic output primitives and creating the PDF by hand.  Wouldn't it be nice if there were a way to <strong>re-use</strong> all that beautiful HTML, CSS, and maybe even <em>Javascript</em> that you already wrote?

Well, there is.  It's called <a href="http://code.google.com/p/wkhtmltopdf/">wkhtmltopdf</a>.  Normally a command line utility, with the release of 0.10.0_beta5 antialize included a simple C API to be able to build bindings in other popular languages.

I'm proud to announce the release of a PHP extension that facilitates the process of doing the conversion directly in PHP:

[sourcecode language="php"]
&lt;?php

wkhtmltox_convert('pdf',
    array('out' =&gt; 'test.pdf', 'imageQuality' =&gt; '95'), // global settings
    array(
        array('page' =&gt; 'http://www.visionaryrenesis.com/'),
        array('page' =&gt; 'http://www.google.com/', 'web.printMediaType' =&gt; true)
        ));

?&gt;
[/sourcecode]

I'm hosting the code at GitHub:  <a href="http://github.com/mreiferson/php-wkhtmltox">http://github.com/mreiferson/php-wkhtmltox</a>

It was certainly interesting working with PHP under the hood but overall the process was pretty straightforward.  Keep in mind the function signatures may change a bit as the API matures.  Feedback welcome!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>502</wp:post_id>
		<wp:post_date>2010-09-15 08:49:41</wp:post_date>
		<wp:post_date_gmt>2010-09-15 13:49:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>convert-html-to-pdf-in-php-libwkhtmltox-extension</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="convert"><![CDATA[convert]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="extension"><![CDATA[extension]]></category>
		<category domain="post_tag" nicename="html-to-pdf"><![CDATA[html to pdf]]></category>
		<category domain="post_tag" nicename="libwkhtmltox"><![CDATA[libwkhtmltox]]></category>
		<category domain="post_tag" nicename="pdf"><![CDATA[pdf]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="php-development"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="wkhtmltopdf"><![CDATA[wkhtmltopdf]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[142163587]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3573</wp:comment_id>
			<wp:comment_author><![CDATA[Rogerio Machado]]></wp:comment_author>
			<wp:comment_author_email>rogerio.s.machado@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.7.50.210</wp:comment_author_IP>
			<wp:comment_date>2010-12-23 20:32:58</wp:comment_date>
			<wp:comment_date_gmt>2010-12-24 01:32:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I make this simbolic links in /usr/local/lib and also in /usr/lib<br>then works!  (Ubuntu 10.04)<br><br>Sorry for my english :(]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3334</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3494</wp:comment_id>
			<wp:comment_author><![CDATA[Dumakude]]></wp:comment_author>
			<wp:comment_author_email>dumakude@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.213.126.7</wp:comment_author_IP>
			<wp:comment_date>2010-10-25 15:12:48</wp:comment_date>
			<wp:comment_date_gmt>2010-10-25 20:12:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi could you post a step by step tutorial on how to install this on ubuntu. I am a real n00b on this.<br><br>thanks! <br>Debonair]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3342</wp:comment_id>
			<wp:comment_author><![CDATA[Jcgamia]]></wp:comment_author>
			<wp:comment_author_email>jcgamia@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>84.78.197.138</wp:comment_author_IP>
			<wp:comment_date>2010-09-16 22:08:10</wp:comment_date>
			<wp:comment_date_gmt>2010-09-17 03:08:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The best convert html to pdf in PHP: mPDF: <a href="http://mpdf.bpm1.com" rel="nofollow">http://mpdf.bpm1.com</a>/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3341</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>63.208.173.196</wp:comment_author_IP>
			<wp:comment_date>2010-09-16 21:06:53</wp:comment_date>
			<wp:comment_date_gmt>2010-09-17 02:06:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey James I&#39;ve updated the config.m4 file that phpize uses to generate the configure script.  Can you:<br><br>$ git pull origin master<br>$ phpize --clean<br>$ phpize<br>$ ./configure<br><br>And if it isn&#39;t working paste the entire output of the configure script?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3336</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3481</wp:comment_id>
			<wp:comment_author><![CDATA[Jordan]]></wp:comment_author>
			<wp:comment_author_email>jspivack@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>72.145.237.143</wp:comment_author_IP>
			<wp:comment_date>2010-10-21 07:04:07</wp:comment_date>
			<wp:comment_date_gmt>2010-10-21 12:04:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I&#39;m getting the same error as the other two users above using CentOS and a 64 bit system "version .1 or later required". What was the resolution on these?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3432</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3380</wp:comment_id>
			<wp:comment_author><![CDATA[Jurian Sluiman]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/juriansluiman</wp:comment_author_url>
			<wp:comment_author_IP>77.162.12.178</wp:comment_author_IP>
			<wp:comment_date>2010-09-19 18:56:47</wp:comment_date>
			<wp:comment_date_gmt>2010-09-19 23:56:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What is the difference of this library compared to, for example, DomPdf? That is an OOP php implementation to convert html scripts with css into a pdf document.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3333</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>63.208.173.196</wp:comment_author_IP>
			<wp:comment_date>2010-09-16 13:09:49</wp:comment_date>
			<wp:comment_date_gmt>2010-09-16 18:09:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[James, have you run ldconfig?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3331</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3331</wp:comment_id>
			<wp:comment_author><![CDATA[James Griffin]]></wp:comment_author>
			<wp:comment_author_email>jsgriffin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.143.144.78</wp:comment_author_IP>
			<wp:comment_date>2010-09-16 09:26:06</wp:comment_date>
			<wp:comment_date_gmt>2010-09-16 14:26:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This looks fantastic! I&#39;m getting an error when trying to configure it though, it&#39;s probably something with my system. I&#39;m on Cent OS 5, I&#39;ve got <a href="http://libwkhtmltox.so" rel="nofollow">libwkhtmltox.so</a> (version 10.0) in /usr/local/lib and that path is in $LD_LIBRARY_PATH, and i&#39;ve got the folder wkhtmltox and its contents in /usr/local/include, which is in my $PATH. I&#39;ve also got wkhtmltox in /usr/local/bin, which means I can run it through the command line no problems. when I run ./configure, it finds the library, and then on the next line looks for "wkhtmltopdf_init in -lwkhtmltox... no", then tells me I need libwkhtmltox version 0.10 or later. Any ideas?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3411</wp:comment_id>
			<wp:comment_author><![CDATA[Matt Dawson]]></wp:comment_author>
			<wp:comment_author_email>matthewtdawson@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.197.65.18</wp:comment_author_IP>
			<wp:comment_date>2010-09-28 18:39:45</wp:comment_date>
			<wp:comment_date_gmt>2010-09-28 23:39:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[32 bit. CentOS 5.5. One difference - I couldn&#39;t figure out how to set LD_CONFIG_PATH, so I symlinked <a href="http://libwkhtmltox.so" rel="nofollow">libwkhtmltox.so</a> to /usr/lib instead of /usr/local/lib.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3410</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3317</wp:comment_id>
			<wp:comment_author><![CDATA[K]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/nowarninglabel</wp:comment_author_url>
			<wp:comment_author_IP>130.212.9.218</wp:comment_author_IP>
			<wp:comment_date>2010-09-15 17:54:51</wp:comment_date>
			<wp:comment_date_gmt>2010-09-15 22:54:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome, wish this had been around sooner. How about incorporating this with docvert? <a href="http://holloway.co.nz/docvert" rel="nofollow">http://holloway.co.nz/docvert</a>/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3319</wp:comment_id>
			<wp:comment_author><![CDATA[John]]></wp:comment_author>
			<wp:comment_author_email>john@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>167.136.142.40</wp:comment_author_IP>
			<wp:comment_date>2010-09-15 18:39:32</wp:comment_date>
			<wp:comment_date_gmt>2010-09-15 23:39:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice! I&#39;m working on building a web application that services small and medium sized manufacturing businesses. We&#39;ve recently had feature requests for displaying certain web pages as PDFs instead of HTML (for email or whatever). I&#39;ll look into making use of this! Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3313</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>63.208.173.196</wp:comment_author_IP>
			<wp:comment_date>2010-09-15 14:52:13</wp:comment_date>
			<wp:comment_date_gmt>2010-09-15 19:52:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I guess it would be possible to provide a binary distribution for common platforms and, depending on the version of PHP you&#39;re running (ie &lt; 5.3) you could use the dl() function to dynamically introduce the extension.  The shared hosting environment might have disabled that too, though.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3311</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3352</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>63.208.173.196</wp:comment_author_IP>
			<wp:comment_date>2010-09-17 14:34:54</wp:comment_date>
			<wp:comment_date_gmt>2010-09-17 19:34:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[and how about the full output of:<br><br>$ ldconfig -v]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3350</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3738</wp:comment_id>
			<wp:comment_author><![CDATA[zid]]></wp:comment_author>
			<wp:comment_author_email>yazid75@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-02-10 23:27:00</wp:comment_date>
			<wp:comment_date_gmt>2011-02-10 23:27:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Does it work with session-protected urls? I mean if i have an active firefox session with the site that runs this, will the php code use the active session or i have to do something to make it use the active session (so i don't end up printing a login screen instead)?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3350</wp:comment_id>
			<wp:comment_author><![CDATA[James Griffin]]></wp:comment_author>
			<wp:comment_author_email>jsgriffin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.143.144.78</wp:comment_author_IP>
			<wp:comment_date>2010-09-17 08:30:21</wp:comment_date>
			<wp:comment_date_gmt>2010-09-17 13:30:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey, thanks for that - afraid it&#39;s still not configuring though :( The output is:<br><br>checking for egrep... grep -E<br>checking for a sed that does not truncate output... /bin/sed<br>checking for cc... cc<br>checking for C compiler default output file name... a.out<br>checking whether the C compiler works... yes<br>checking whether we are cross compiling... no<br>checking for suffix of executables... <br>checking for suffix of object files... o<br>checking whether we are using the GNU C compiler... yes<br>checking whether cc accepts -g... yes<br>checking for cc option to accept ANSI C... none needed<br>checking how to run the C preprocessor... cc -E<br>checking for icc... no<br>checking for suncc... no<br>checking whether cc understands -c and -o together... yes<br>checking for system library directory... lib<br>checking if compiler supports -R... no<br>checking if compiler supports -Wl,-rpath,... yes<br>checking build system type... i686-redhat-linux-gnu<br>checking host system type... i686-redhat-linux-gnu<br>checking target system type... i686-redhat-linux-gnu<br>checking for PHP prefix... /usr<br>checking for PHP includes... -I/usr/include/php -I/usr/include/php/main -I/usr/include/php/TSRM -I/usr/include/php/Zend -I/usr/include/php/ext -I/usr/include/php/ext/date/lib<br>checking for PHP extension directory... /usr/lib/php/modules<br>checking for PHP installed headers prefix... /usr/include/php<br>checking if debug is enabled... no<br>checking if zts is enabled... no<br>checking for re2c... no<br>checking for gawk... gawk<br>checking for libwkhtmltox support... yes, shared<br>found in /usr/local<br>checking for wkhtmltopdf_init in -lwkhtmltox... no]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3341</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3484</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>67.152.23.98</wp:comment_author_IP>
			<wp:comment_date>2010-10-22 13:33:28</wp:comment_date>
			<wp:comment_date_gmt>2010-10-22 18:33:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[im opening a new issue on github for this - better place for discussion.<br><br><a href="http://github.com/mreiferson/php-wkhtmltox/issues#issue/5" rel="nofollow">http://github.com/mreiferson/php-wkhtmltox/issues#issue/5</a><br>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3481</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3438</wp:comment_id>
			<wp:comment_author><![CDATA[pvledoux]]></wp:comment_author>
			<wp:comment_author_email>pvledoux@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>87.66.0.9</wp:comment_author_IP>
			<wp:comment_date>2010-10-04 12:04:41</wp:comment_date>
			<wp:comment_date_gmt>2010-10-04 17:04:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great idea! I was already using whtmltox through a exec(), but I can imagine the extension is quicker.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3432</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>68.173.11.54</wp:comment_author_IP>
			<wp:comment_date>2010-10-02 20:58:20</wp:comment_date>
			<wp:comment_date_gmt>2010-10-03 01:58:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[try symlinking /usr/lib/<a href="http://libwkhtmltox.so" rel="nofollow">libwkhtmltox.so</a>.0 to /usr/local/lib/<a href="http://libwkhtmltox.so" rel="nofollow">libwkhtmltox.so</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3411</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3409</wp:comment_id>
			<wp:comment_author><![CDATA[Matt Dawson]]></wp:comment_author>
			<wp:comment_author_email>matthewtdawson@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.197.65.18</wp:comment_author_IP>
			<wp:comment_date>2010-09-28 17:42:32</wp:comment_date>
			<wp:comment_date_gmt>2010-09-28 22:42:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[FWIW, I&#39;m getting the *exact* same error as James with the exact same environment. Did either of you ever find the solution?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3352</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3410</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>68.173.11.54</wp:comment_author_IP>
			<wp:comment_date>2010-09-28 18:19:34</wp:comment_date>
			<wp:comment_date_gmt>2010-09-28 23:19:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Matt,<br><br>What architecture? (32 or 64)?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3409</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3739</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-02-11 03:23:00</wp:comment_date>
			<wp:comment_date_gmt>2011-02-11 03:23:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It really depends on what you're trying to do.  I've used one-time-use keys to allow access to a page I'd like to convert.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3738</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3381</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>166.137.137.77</wp:comment_author_IP>
			<wp:comment_date>2010-09-19 20:38:48</wp:comment_date>
			<wp:comment_date_gmt>2010-09-20 01:38:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This uses the webkit rendering engine to produce output that is nearly identical to what you&#39;d see in a browser (including JavaScript execution)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3380</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3451</wp:comment_id>
			<wp:comment_author><![CDATA[Joao]]></wp:comment_author>
			<wp:comment_author_email>joao.fgf@sapo.pt</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.102.167.142</wp:comment_author_IP>
			<wp:comment_date>2010-10-13 11:15:00</wp:comment_date>
			<wp:comment_date_gmt>2010-10-13 16:15:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great work!<br>Is there a windows/apache installation?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3452</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>67.152.23.98</wp:comment_author_IP>
			<wp:comment_date>2010-10-13 13:46:06</wp:comment_date>
			<wp:comment_date_gmt>2010-10-13 18:46:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I haven&#39;t tested on windows but don&#39;t see any reason why it couldn&#39;t work...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3451</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3524</wp:comment_id>
			<wp:comment_author><![CDATA[Smuglet]]></wp:comment_author>
			<wp:comment_author_email>smuglet@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>86.28.216.123</wp:comment_author_IP>
			<wp:comment_date>2010-11-23 09:21:18</wp:comment_date>
			<wp:comment_date_gmt>2010-11-23 14:21:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Anyone tried building this for Windows?  Would be perfect but don&#39;t know where to start myself.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3329</wp:comment_id>
			<wp:comment_author><![CDATA[Usman Arham]]></wp:comment_author>
			<wp:comment_author_email>usman.arham@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>119.152.89.243</wp:comment_author_IP>
			<wp:comment_date>2010-09-16 06:30:45</wp:comment_date>
			<wp:comment_date_gmt>2010-09-16 11:30:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[really helpfull ..]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3311</wp:comment_id>
			<wp:comment_author><![CDATA[pratYk]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/pratyk</wp:comment_author_url>
			<wp:comment_author_IP>192.136.22.4</wp:comment_author_IP>
			<wp:comment_date>2010-09-15 14:46:49</wp:comment_date>
			<wp:comment_date_gmt>2010-09-15 19:46:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[how would one go about using this on a shared hosting environment with the need to compile it before running and the needed modification to the php.ini file ..]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3312</wp:comment_id>
			<wp:comment_author><![CDATA[Ben Werdmuller v.E.]]></wp:comment_author>
			<wp:comment_author_email>None</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/benwerd</wp:comment_author_url>
			<wp:comment_author_IP>82.41.240.198</wp:comment_author_IP>
			<wp:comment_date>2010-09-15 16:37:13</wp:comment_date>
			<wp:comment_date_gmt>2010-09-15 21:37:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is extremely cool. I&#39;m looking forward to seeing how it develops, but I can already think of a thousand uses for it. Well done!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3334</wp:comment_id>
			<wp:comment_author><![CDATA[James Griffin]]></wp:comment_author>
			<wp:comment_author_email>jsgriffin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.143.144.78</wp:comment_author_IP>
			<wp:comment_date>2010-09-16 14:17:57</wp:comment_date>
			<wp:comment_date_gmt>2010-09-16 19:17:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just tried it, but it&#39;s made no difference I&#39;m afraid :(<br><br>`ldconfig -v | grep &#39;wkhtml&#39;` gives this output: "<a href="http://libwkhtmltox.so" rel="nofollow">libwkhtmltox.so</a>.0 -&gt; <a href="http://libwkhtmltox.so" rel="nofollow">libwkhtmltox.so</a>", so I presume it is doing something with the library]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3333</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3335</wp:comment_id>
			<wp:comment_author><![CDATA[matticakes]]></wp:comment_author>
			<wp:comment_author_email>matt@perplexedlabs.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.perplexedlabs.com</wp:comment_author_url>
			<wp:comment_author_IP>63.208.173.196</wp:comment_author_IP>
			<wp:comment_date>2010-09-16 14:33:53</wp:comment_date>
			<wp:comment_date_gmt>2010-09-16 19:33:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sure you have the libs for the right architecture you&#39;re trying to build the extension for?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3334</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3336</wp:comment_id>
			<wp:comment_author><![CDATA[James Griffin]]></wp:comment_author>
			<wp:comment_author_email>jsgriffin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.143.144.78</wp:comment_author_IP>
			<wp:comment_date>2010-09-16 15:08:26</wp:comment_date>
			<wp:comment_date_gmt>2010-09-16 20:08:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeah, I&#39;m running libwkhtmltox-0.10.0_beta5-i386, which is definitely the right one. I&#39;ve also checked that all the dependencies are installed and up to date for wkhtmltox, and everything seems fine, but still won&#39;t configure I&#39;m afraid]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3335</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3747</wp:comment_id>
			<wp:comment_author><![CDATA[Justin]]></wp:comment_author>
			<wp:comment_author_email>justin@mediaslave.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-03-02 04:50:00</wp:comment_date>
			<wp:comment_date_gmt>2011-03-02 04:50:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I would like to know this as well]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3738</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3743</wp:comment_id>
			<wp:comment_author><![CDATA[Alexander Hramov&#8217;s blog &raquo; Установка php-wkhtmltox в Gentoo]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.hramov.info/%d1%83%d1%81%d1%82%d0%b0%d0%bd%d0%be%d0%b2%d0%ba%d0%b0-php-wkhtmltox-%d0%b2-gentoo/</wp:comment_author_url>
			<wp:comment_author_IP>85.159.224.19</wp:comment_author_IP>
			<wp:comment_date>2011-02-15 13:53:21</wp:comment_date>
			<wp:comment_date_gmt>2011-02-15 18:53:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] даже появилось php расширение для этой библиотеки &#8211; php-wkhtmltox &#8211; &#8220;да это просто праздник какой то!&#8221; подумал я, [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3749</wp:comment_id>
			<wp:comment_author><![CDATA[rm]]></wp:comment_author>
			<wp:comment_author_email>charles.foichat@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-03-11 15:12:00</wp:comment_date>
			<wp:comment_date_gmt>2011-03-11 15:12:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've made an alternative to the extension in case you can't install it.
It works only on Unix like systems.
It use the "static" version of wkhtmltopdf in order to use footers.
It don't use authentification or session etc... it fit my need as is.
Usage : 
$pdf = new toPdf("put_url_you_want_renderred_in_pdf_here");
$result = $pdf-&gt;generate();
//if $result["ret_value"] == 0, generation was ok
//in that case you got pdf content in $result["stdout"]


_wkhtmltopdf_path = dirname(__FILE__) . "/../../../bin/wkhtmltopdf-i386"; //adjust to your needs
    $this-&gt;_main_page_path = $main_page_path;
  }

  public function execWkHtmlToPdf() {
    $descriptorspec = array(
                            0 =&gt; array("pipe", "r"),  // stdin is a pipe that the child will read from
                            1 =&gt; array("pipe", "w"),  // stdout is a pipe that the child will write to
                            2 =&gt; array("pipe", "w"),  // stderr is a file to write to
                            );
    $cmd = $this-&gt;_wkhtmltopdf_path." -q -B ".$this-&gt;_footer_margin." --footer-html ".$this-&gt;_footer_path." ".$this-&gt;_main_page_path." /dev/stdout";
    $process = proc_open($cmd, $descriptorspec, $pipes, NULL, NULL);
    if (!is_resource($process)) {
      return FALSE;
    }
    fclose($pipes[0]);
    $ret = array();
    $ret["stdout"] = stream_get_contents($pipes[1]);
    $ret["stderr"] = stream_get_contents($pipes[2]);
    fclose($pipes[1]);
    fclose($pipes[2]);
    $ret["ret_value"] = proc_close($process);
    return $ret;
  }
  
  public function generate() {
    $ret = $this-&gt;execWkHtmlToPdf();
    return $ret;
  }

}

?&gt;
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3754</wp:comment_id>
			<wp:comment_author><![CDATA[Justin Palmer]]></wp:comment_author>
			<wp:comment_author_email>justin@mediaslave.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-03-25 19:38:00</wp:comment_date>
			<wp:comment_date_gmt>2011-03-25 19:38:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@matticakes Yeah that is possible, but it is a hack.

There has to be a way to build a php extension that is session aware.

Take care,

Justin]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3739</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4030</wp:comment_id>
			<wp:comment_author><![CDATA[Saadullah Saeed]]></wp:comment_author>
			<wp:comment_author_email>saadullah.saeed@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-08-12 00:12:00</wp:comment_date>
			<wp:comment_date_gmt>2011-08-12 00:12:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How can I set pageSize in global settings?
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4031</wp:comment_id>
			<wp:comment_author><![CDATA[Saadullah Saeed]]></wp:comment_author>
			<wp:comment_author_email>saadullah.saeed@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-08-12 00:16:00</wp:comment_date>
			<wp:comment_date_gmt>2011-08-12 00:16:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ok nvm. Its size.pageSize .. should have looked before asking]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>4030</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4266</wp:comment_id>
			<wp:comment_author><![CDATA[Icandothat]]></wp:comment_author>
			<wp:comment_author_email>icandothat@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-18 05:54:00</wp:comment_date>
			<wp:comment_date_gmt>2012-02-18 05:54:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ I've got one if you want it. I wrote a session/cookie aware HTTP class that you can use with wkhtmltopdf also supports https and proxies. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3754</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Migrating from a legacy authentication scheme to Authlogic</title>
		<link>http://blog.perplexedlabs.com/2010/10/22/migrating-from-a-legacy-authentication-scheme-to-authlogic/</link>
		<pubDate>Sat, 23 Oct 2010 01:44:51 +0000</pubDate>
		<dc:creator>speric</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=510</guid>
		<description></description>
		<content:encoded><![CDATA[I've been working on a project where I inherited a database with over 9,000 users.  The passwords are stored as an MD5 hash, with no salt.  For obvious reasons, I wanted to transition the old authentication scheme and architecture over to <a href="http://github.com/binarylogic/authlogic">authlogic</a>.  This <a href="http://www.binarylogic.com/2008/11/23/tutorial-upgrade-passwords-easily-with-authlogic/">post</a> by Ben Johnson pointed me in the right direction.

The problem I ran into was that the column where the hashed passwords are stored was not one of the default authlogic fields (:crypted_password, :encrypted_password, :password_hash, or :pw_hash).  It was simple to make this work with a legacy column name that's not a default, just tell authlogic what the crypted_password_field is:

[sourcecode language="ruby"]
class User &lt; ActiveRecord::Base
  acts_as_authentic do |c|
    c.crypted_password_field = :hashed_password #my legacy password column
    c.transition_from_crypto_providers = Authlogic::CryptoProviders::MD5 #old password encryption scheme
  end
end
[/sourcecode]

Now, as users log in, they will be migrated to the scheme, transparently.  I didn't specify what I want the new encryption scheme to be, and therefore authlogic will use the  CryptoProviders::Sha512 scheme.  Simple.

See also: <a href="http://rubydoc.info/github/binarylogic/authlogic/master/Authlogic/ActsAsAuthentic/Password/Config">Module: Authlogic::ActsAsAuthentic::Password::Config</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>510</wp:post_id>
		<wp:post_date>2010-10-22 20:44:51</wp:post_date>
		<wp:post_date_gmt>2010-10-23 01:44:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>migrating-from-a-legacy-authentication-scheme-to-authlogic</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="activerecord"><![CDATA[ActiveRecord]]></category>
		<category domain="post_tag" nicename="authlogic"><![CDATA[authlogic]]></category>
		<category domain="post_tag" nicename="model"><![CDATA[model]]></category>
		<category domain="post_tag" nicename="passwords"><![CDATA[passwords]]></category>
		<category domain="category" nicename="ruby-development"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="ruby-on-rails"><![CDATA[Ruby on Rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[160563379]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Async DNS Resolution in Tornado&#039;s AsyncHttpClient (curl multi, c-ares)</title>
		<link>http://blog.perplexedlabs.com/2010/11/01/asynchronous-dns-resolution-in-tornados-asynchttpclient-curl-multi-c-ares/</link>
		<pubDate>Mon, 01 Nov 2010 23:50:26 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=513</guid>
		<description></description>
		<content:encoded><![CDATA[I learned some rather important facts about cURL's multi interface (which makes it possible to perform asynchronous HTTP requests and what Python's <a href="http://www.tornadoweb.org/">Tornado</a> framework uses under the hood in it's AsyncHttpClient helper).

I was investigating some intermittent issues in an application at work - transient DNS issues were causing the application to become unresponsive.  This was confusing at first because it was written to perform HTTP requests asynchronously.  The important thing here is that it was specifically DNS resolution that was failing.  As I dug deeper I realized that simple health checks, ones that did not perform any HTTP requests, were also hanging... something had to be blocking.

Taking a look at the Tornado source, unsurprisingly, it was leveraging the <a href="http://curl.haxx.se/libcurl/c/libcurl-multi.html">multi</a> functionality of libcurl (via pycurl).  What was surprising to me was that the DNS resolution portion of the multi interface, by default, blocks on non-windows installations.  Only when compiled with <a href="http://c-ares.haxx.se/">c-ares</a> support does it perform these async.

You learn something new every day!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>513</wp:post_id>
		<wp:post_date>2010-11-01 18:50:26</wp:post_date>
		<wp:post_date_gmt>2010-11-01 23:50:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>asynchronous-dns-resolution-in-tornados-asynchttpclient-curl-multi-c-ares</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="async"><![CDATA[async]]></category>
		<category domain="post_tag" nicename="asynchronous"><![CDATA[asynchronous]]></category>
		<category domain="post_tag" nicename="asynchttpclient"><![CDATA[asynchttpclient]]></category>
		<category domain="post_tag" nicename="c-ares"><![CDATA[c-ares]]></category>
		<category domain="post_tag" nicename="curl"><![CDATA[curl]]></category>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="dns"><![CDATA[dns]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="post_tag" nicename="libcurl"><![CDATA[libcurl]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="tornado"><![CDATA[tornado]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[165495601]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3825</wp:comment_id>
			<wp:comment_author><![CDATA[Sven]]></wp:comment_author>
			<wp:comment_author_email>sven@tras.se</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-05-25 12:46:00</wp:comment_date>
			<wp:comment_date_gmt>2011-05-25 12:46:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've also had this problem, We solved it temporarily with specifying our internal hostnames in the hosts file (which could of course also block if the hard drive would hang...)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Experiences Developing My First iOS / iPhone App - OnCall for Nagios</title>
		<link>http://blog.perplexedlabs.com/2011/05/16/experiences-developing-my-first-ios-iphone-app-oncall-for-nagios/</link>
		<pubDate>Mon, 16 May 2011 14:00:29 +0000</pubDate>
		<dc:creator>snakes</dc:creator>
		<guid isPermaLink="false">http://blog.perplexedlabs.com/?p=517</guid>
		<description></description>
		<content:encoded><![CDATA[I've long since wanted to participate in the explosion of popularity that is the iOS App Store.  I toyed with demonstration-purpose applications, learning the foundational aspects of developing on this new platform and the intricacies of Objective-C, but never really had a compelling idea to follow through to completion.

Due to the nature of my current employment I spend alternating periods of time as primary oncall responder when issues arise in our infrastructure.  I've long been a fan of <a href="http://www.nagios.org/">Nagios</a>, which we use at work as well.  It lacks a native iPhone interface, but provides easy-enough hooks to be able to build one.  This gave me a fantastic opportunity to hone my iOS SDK skills with a app that would certainly "scratch my own itch".  I'm a strong believer that you learn best when addressing a problem you're actually experiencing - you can taste the pain going away.  With <strong><a href="http://bit.ly/nagiosss">OnCall for Nagios</a></strong>, the iPhone becomes a fantastic platform to be able to do basic triage and diagnosis as well as respond and communicate to other participants of your infrastructure team.

The great thing about this as my first <em>real</em> application was that it required a deeper dive into many of the core iPhone SDK APIs as well as the building of a more complicated (from a development perspective) UI.

Under the hood it's interaction with Nagios is accomplished via screen-scraping.  This allows the app to work right out of the box, acting as just another client to the existing Nagios web interface without any server side changes required.  For HTML parsing I built a light abstraction around libxml and used xpath queries to retrieve the relevant data.  Certain views required multiple asynchronous HTTP requests, each with the same delegate, which required another light abstraction layer around NSURLConnection to be able to pass in identifiers for the connections so that incoming data would be appended to the correct NSMutableData property.  Seemingly simple tasks such as HTTP authentication for async NSURLConnection requests and (optionally) ignoring self-signed SSL certificates took significant digging through documentation to gain a better understanding of connection's didReceiveAuthenticationChallenge method.

<strong><a href="http://bit.ly/nagiosss">OnCall for Nagios</a></strong> uses a TabBarController with child NavigationBarControllers - this gives you the familiar tabbed buttons at the bottom with the ability to navigate forwards and backwards at the top.  It also uses a combination of custom and NSUserDefaults to provide saved settings - allowing multiple Nagios instances to be setup and switched between within the app.  

<div style="width: 680px; padding: 0px: margin:0px">
<div style="float:left">
<a href="http://blog.perplexedlabs.com/wp-content/uploads/2011/05/sshot4.png"><img src="http://blog.perplexedlabs.com/wp-content/uploads/2011/05/sshot4.png" alt="Problems View Screen Shot" title="Problems" width="320" height="480" class="size-full wp-image-519" /></a>
</div>
<div style="float:right">
<a href="http://blog.perplexedlabs.com/wp-content/uploads/2011/05/sshot5.png"><img src="http://blog.perplexedlabs.com/wp-content/uploads/2011/05/sshot5.png" alt="Service Detail View" title="ServiceDetail" width="320" height="480" class="size-full wp-image-525" /></a>
</div>
<div style="clear:both;"></div>
</div>

Interface development was slow and tedious for the initial setup.  Determining the correct nesting order (TabBarController is the parent of multiple NavigationBarControllers) was huge.  Once you get the hang of IBOutlets and where to "connect the dots" duplicating previous discoveries becomes easier.  For certain interface details I often found myself hand-coding these elements instead of arguably spending more time figuring out how to do them correctly in Interface Builder.  I'd be curious to hear of other's experiences on where to draw that line.  I found that anything non-trivial required some level of code (take custom UITableViewCells) although I'm sure there are other ways to accomplish this.

One of the most important aspects to developing in Objective-C is a solid of understanding of it's memory management.  With a solid background in C as well as Python - this wasn't terribly difficult.  <strong><a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/MemoryMgmt/MemoryMgmt.html">This document</a></strong> was extremely helpful.  If you follow the golden rule <strong>"you only release or autorelease objects you own"</strong> you'll be fine.  I found Xcode's static code analysis (clang) to be extremely helpful in situations that weren't immediately obvious, diagnosing and eliminating problems in my code.  It's quite impressive to see arrows being overlaid onto your source code illustrating the code path that's causing the issue.

<a href="http://blog.perplexedlabs.com/wp-content/uploads/2011/05/clang3.png"><img src="http://blog.perplexedlabs.com/wp-content/uploads/2011/05/clang3.png" alt="Enable Static Code Analyzer" title="clang" width="649" height="246" class="aligncenter size-full wp-image-522" /></a>

I also highly recommend <a href="http://www.flurry.com">Flurry</a>, a free analytics SDK.  It's extremely easy to integrate and provides a wide variety of metrics without much effort.  It was also helpful in identifying when Apple was reviewing the application.  The approval process took longer than I had hoped but wasn't as problematic as I had imagined it to be.

I also found it extremely beneficial to release a <em>lite</em> version.  For this type of application the choices were obvious as to limiting functionality (display fewer problems, dont allow multiple instances, only show 2 hosts, etc.).  In terms of implementation of the lite version - it exists in the same codebase.  In Xcode I defined a new target with a different output binary and a specific C define which the code pivots on.

[sourcecode language="c"]
#ifdef LITE_VERSION
    if ([table count] &lt; 2) {    
        [table addObject:data];
    } else if (!didShowUpgrade) {
        didShowUpgrade = TRUE;
        UIAlertView *alertBox = [[UIAlertView alloc] initWithTitle:@&quot;Lite Version&quot; message:@&quot;The lite version only displays 2 problems, consider upgrading!&quot; delegate:self cancelButtonTitle:@&quot;Ok&quot; otherButtonTitles:nil];
        [alertBox show];
        [alertBox release];
    }
#else
    [table addObject:data];
#endif
[/sourcecode]

The lite version sees much higher downloads and facilitates the need for experimentation and testing before purchasing.

I've certainly learned a lot throughout this process and I'm looking forward to continuing to develop features for this app as well as getting back into game development on this powerful platform.  If you'd like more detail on anything I've glossed over feel free to ask questions in the comments or e-mail me directly.

Good luck!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>517</wp:post_id>
		<wp:post_date>2011-05-16 09:00:29</wp:post_date>
		<wp:post_date_gmt>2011-05-16 14:00:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>experiences-developing-my-first-ios-iphone-app-oncall-for-nagios</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[Infrastructure]]></category>
		<category domain="category" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="ios-2"><![CDATA[ios]]></category>
		<category domain="post_tag" nicename="ios-sdk"><![CDATA[ios sdk]]></category>
		<category domain="post_tag" nicename="ipad"><![CDATA[ipad]]></category>
		<category domain="post_tag" nicename="ipad-sdk"><![CDATA[ipad sdk]]></category>
		<category domain="post_tag" nicename="iphone"><![CDATA[iphone]]></category>
		<category domain="post_tag" nicename="iphone-sdk"><![CDATA[iphone sdk]]></category>
		<category domain="post_tag" nicename="nagios"><![CDATA[nagios]]></category>
		<category domain="post_tag" nicename="oncall"><![CDATA[oncall]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[305200882]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3887</wp:comment_id>
			<wp:comment_author><![CDATA[Claudio]]></wp:comment_author>
			<wp:comment_author_email>cacciares@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-06-07 02:59:00</wp:comment_date>
			<wp:comment_date_gmt>2011-06-07 02:59:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks a lot for sharing your experience, nice post.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
</channel>
</rss>
